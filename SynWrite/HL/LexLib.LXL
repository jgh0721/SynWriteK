object SyntaxManager: TSyntaxManager
  Left = 360
  Top = 136
  object SyntAnal55: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        VertAlignment = vaTop
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end>
    TokenRules = <
      item
        DisplayName = 'asm_st'
        StyleName = 'Preprocessor'
        TokenType = 10
        Expression = '\#asm\s*\("'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'asm_end'
        StyleName = 'Preprocessor'
        TokenType = 11
        Expression = '"\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|\\\\|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '\~?[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
          'hout exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Define'
        Enabled = False
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '(?-i)'#13#10'\#define(.*\\\s*\n)*'#13#10'.*  # last line'#13#10#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^\.!]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__asm'
              '__automated'
              '__cdecl'
              '__classid'
              '__closure'
              '__declspec'
              '__dispid'
              '__except'
              '__export'
              '__fastcall'
              '__finally'
              '__import'
              '__inline'
              '__int64'
              '__msfastcall'
              '__msreturn'
              '__pascal'
              '__property'
              '__published'
              '__stdcall'
              '__try'
              '__uuidof'
              '_asm'
              '_cdecl'
              '_export'
              '_fastcall'
              '_import'
              '_pascal'
              '_stdcall'
              'asm'
              'auto'
              'bool'
              'break'
              'case'
              'catch'
              'cdecl'
              'char'
              'class'
              'const'
              'continue'
              'default'
              'delete'
              'do'
              'double'
              'else'
              'enum'
              'explicit'
              'export'
              'extern'
              'false'
              'float'
              'for'
              'friend'
              'goto'
              'if'
              'inline'
              'int'
              'long'
              'mutable'
              'new'
              'operator'
              'pascal'
              'private'
              'protected'
              'public'
              'register'
              'return'
              'short'
              'signed'
              'sizeof'
              'static'
              'struct'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typedef'
              'typeid'
              'typename'
              'union'
              'unsigned'
              'uuid'
              'virtual'
              'void'
              'volatile'
              'wchar_t'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '#if'
        Enabled = False
        StrictParent = True
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '\#if')
            CondType = tcMask
            TokenTypes = 512
          end>
        BlockEnd = '#endif'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '#endif'
      end
      item
        DisplayName = '#endif'
        Enabled = False
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '#endif')
            TokenTypes = 512
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function begin'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'function end'
        NameFmt = '%s0'
        RefToCondEnd = True
        HighlightPos = cpBound
        IgnoreAsParent = True
      end
      item
        DisplayName = 'function end'
        BlockName = 'function begin'
        StrictParent = True
        NotParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        RefToCondEnd = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function begin 2'
        Enabled = False
        BlockName = '#if'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'function end 2'
        NameFmt = '%s-1~[)]'
        RefToCondEnd = True
        HighlightPos = cpBound
        IgnoreAsParent = True
      end
      item
        DisplayName = 'function end 2'
        Enabled = False
        BlockName = 'function begin 2'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '}'
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '{ ... }'
        GrammaRuleName = 'comments'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
            IgnoreCase = True
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Inline asm start'
        StyleName = 'Current block'
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'Inline asm end'
        DisplayInTree = False
        NameFmt = '%sz0'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Inline asm end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        DisplayInTree = False
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'asm2'
        StyleName = 'Preprocessor'
        StartExpression = '\#asm\s*\(\s*"'
        EndExpression = '"\)'
        SyntAnalyzer = SyntAnalyzer13
      end
      item
        DisplayName = 'asm1'
        StyleName = 'Preprocessor'
        StartExpression = '\#asm'
        EndExpression = '\#endasm'
        SyntAnalyzer = SyntAnalyzer13
      end>
    SampleText.Strings = (
      '/*Syntax highlighting*/'
      ''
      '#define MAX(a, b)  \'
      '     ((a > b) ? a : b) '
      '     '
      'void Proc1(char *Sender)'
      '{'
      '  int Number = 10;  // View integer number style'
      '  double F = 1e2 + 0.123e+2;  // View float number style'
      
        '  Caption = "Number is " + IntToStr(Number); // View string styl' +
        'e'
      '  Number += 0x1FA7; // View HEX style'
      '  char c = '#39'D'#39';'
      '  for (i=0; i<5; i++) {'
      '  } '
      '  if (c=='#39'A'#39') {'
      '    return;'
      '  }'
      '  #asm (" mov EAX, 0 ")'
      '}'
      ''
      '#if TT'
      'static char* Proc2(int a; char b) {'
      '  return;'
      '}'
      '#endif')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Inline Asm Start'
      'Inline Asm End')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'c h'
    LexerName = 'C'
    Notes.Strings = (
      'Rule "Function"'
      'name of formatting str was: %s0~s[)]')
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal78: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'class (tree)'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'asm_end'
        StyleName = 'Preprocessor'
        BlockName = 'Inline asm start'
        TokenType = 11
        Expression = '"\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'asm_st'
        StyleName = 'Preprocessor'
        TokenType = 10
        Expression = '\#asm\s*\("'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|\\\\|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '\~?[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
          'hout exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Define'
        Enabled = False
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '(?-i)'#13#10'\#define(.*\\\s*\n)*'#13#10'.*  # last line'#13#10#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^\.!\?%]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__asm'
              '__automated'
              '__cdecl'
              '__classid'
              '__closure'
              '__declspec'
              '__dispid'
              '__except'
              '__export'
              '__fastcall'
              '__finally'
              '__import'
              '__inline'
              '__int64'
              '__msfastcall'
              '__msreturn'
              '__pascal'
              '__property'
              '__published'
              '__stdcall'
              '__try'
              '__uuidof'
              '_asm'
              '_cdecl'
              '_export'
              '_fastcall'
              '_import'
              '_pascal'
              '_stdcall'
              'asm'
              'auto'
              'bool'
              'break'
              'case'
              'catch'
              'cdecl'
              'char'
              'class'
              'const'
              'continue'
              'default'
              'delete'
              'do'
              'double'
              'else'
              'enum'
              'explicit'
              'export'
              'extern'
              'false'
              'float'
              'for'
              'friend'
              'goto'
              'if'
              'inline'
              'int'
              'long'
              'mutable'
              'new'
              'operator'
              'pascal'
              'private'
              'protected'
              'public'
              'register'
              'return'
              'short'
              'signed'
              'size_t'
              'sizeof'
              'static'
              'struct'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typedef'
              'typeid'
              'typename'
              'union'
              'unsigned'
              'uuid'
              'virtual'
              'void'
              'volatile'
              'wchar_t'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class begin 2'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
          end>
        BlockEnd = 'End'
        NameFmt = 'class %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        TreeItemImage = 1
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class begin 1'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            CondType = tcSkip
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              ':')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
          end>
        BlockEnd = 'End'
        NameFmt = 'class %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        TreeItemImage = 1
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '/* ... */'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        StrictParent = True
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '#endif'
        Enabled = False
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '\#endif')
            CondType = tcMask
            TokenTypes = 512
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '#if'
        Enabled = False
        StrictParent = True
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '\#if')
            CondType = tcMask
            TokenTypes = 512
          end>
        BlockEnd = '#endif'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        IgnoreAsParent = True
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '#endif'
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'const')
            CondType = tcSkip
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'else'
              'if')
            CondType = tcNotEqual
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '::')
            CondType = tcNotEqual
            TokenTypes = 8
          end>
        IdentIndex = -1
        BlockOffset = -1
        BlockEnd = 'function end'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '%sz-1...'
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function end'
        BlockName = 'function begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function begin 2'
        Enabled = False
        BlockName = '#if'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '::')
            CondType = tcNotEqual
            TokenTypes = 8
          end>
        IdentIndex = -1
        BlockOffset = -1
        BlockEnd = 'function end 2'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '%sz-1...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function end 2'
        Enabled = False
        BlockName = 'function begin 2'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'cls func'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              ':'
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '::')
            TokenTypes = 8
          end>
        BlockOffset = 2
        BlockEnd = 'cls func end'
        NameFmt = '%s-1'
        GroupFmt = '%s1'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '%sz2...'
        TreeGroupStyle = 'class (tree)'
        TreeItemImage = 5
        TreeGroupImage = 1
        IgnoreAsParent = False
      end
      item
        DisplayName = 'cls func end'
        BlockName = 'cls func'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '{ ... %ez0'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '}'
      end
      item
        DisplayName = 'Inline asm start'
        StyleName = 'Current block'
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'Inline asm end'
        DisplayInTree = False
        NameFmt = '%sz0'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Inline asm end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        DisplayInTree = False
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <
      item
        Name = 'if'
        Description = 'if ( ) {...}'
        Code.Strings = (
          'if (<caret>)'
          '{'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'func'
        Description = 'void function (void) {...}'
        Code.Strings = (
          'void <caret> function (void)'
          '{'
          '  '
          '  return;'
          '}')
        Advanced = True
      end
      item
        Name = 'for'
        Description = 'for (int i=0; i<x; i++) {...}'
        Code.Strings = (
          'for(int i=0;i<<caret>;i++)'
          '{'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'while'
        Description = 'while ( ) {...}'
        Code.Strings = (
          'while (<caret>)'
          '{'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'do'
        Description = 'do {...} while ( );'
        Code.Strings = (
          'do'
          '{'
          ''
          '}'
          'while (<caret>);')
        Advanced = True
      end
      item
        Name = 'switch'
        Description = 'switch...case...'
        Code.Strings = (
          'switch (<caret>)'
          '{'
          '  case 0:'
          ''
          '    break;'
          '  case 1:'
          ''
          '    break;'
          '  case 2:'
          ''
          '    break;'
          '  default:'
          ''
          '    break;'
          '}')
        Advanced = True
      end
      item
        Name = 'if_else'
        Description = 'if ( ) {...} else {...}'
        Code.Strings = (
          'if (<caret>)'
          '{'
          ''
          '}'
          'else'
          '{'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'main'
        Description = 'int main (int argc, char* argv[]) {...}'
        Code.Strings = (
          'int main(int argc, char* argv[])'
          '{'
          '  <caret>'
          '  return 0;'
          '}')
        Advanced = True
      end
      item
        Name = 'vmain'
        Description = 'void main (void) {...}'
        Code.Strings = (
          'void main(void)'
          '{'
          '  <caret>'
          '}')
        Advanced = True
      end
      item
        Name = 'class'
        Description = 'class x TNewClass {...}'
        Code.Strings = (
          'class <caret> TNewClass'
          '{'
          '  private:'
          '  '
          '  public:'
          '  '
          '};')
        Advanced = True
      end>
    SubAnalyzers = <
      item
        DisplayName = 'asm2'
        StyleName = 'Preprocessor'
        StartExpression = '\#asm\s*\(\s*"'
        EndExpression = '"\)'
        SyntAnalyzer = SyntAnalyzer13
      end
      item
        DisplayName = 'asm1'
        StyleName = 'Preprocessor'
        StartExpression = '\#asm'
        EndExpression = '\#endasm'
        SyntAnalyzer = SyntAnalyzer13
      end>
    SampleText.Strings = (
      '/*Syntax highlighting*/'
      ''
      '#define MAX(a, b)  \'
      '     ((a > b) ? a : b)'
      '     '
      'class Class1 : public Class2 {'
      '    static int priv;'
      '    const int tot;'
      '    unsigned long fib(unsigned long n) {'
      '        return n < 2 ? n : fib(n - 1) + fib(n - 2);'
      '    }'
      '}'
      '  '
      '      '
      'void __fastcall TForm1->Button1Click(Sender: TObject)'
      '{'
      ' int Number = 1e2;  // View integer number style'
      ' double FloatNumber = 0.123e+2;  // View float number style'
      
        ' Caption = "This Number is " + IntToStr(Number); // View string ' +
        'style'
      ' Number += 0x1FA7; // View HEX style'
      ' char c = '#39'D'#39';'
      ' #asm(" pop ax ");'
      '}'
      ''
      'void main(int argc; char* argv) {'
      '  strcpy(b, "text\"");'
      '}'
      ' '
      'void test(int a) {'
      '  //some text '
      '}  ')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Inline asm'
      'Inline asm end')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'c cpp cxx h hpp hxx inl cc'
    LexerName = 'C++'
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnalyzer3: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Line separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clGreen
      end
      item
        DisplayName = 'Sub background'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15663082
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'OP Keywords'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = 
          '#if only one " string to end '#13#10'#of line will be highlighted, '#13#10'#' +
          'otherwise after closing it '#13#10'#string will not be highlighted '#13#10'"' +
          '.*?("|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'end'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = 'end'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '#first charecter can'#39't be digit'#13#10'[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'#13#10' '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '#any sequence of digits'#13#10'\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '#all chars after '#39' to end of line'#13#10#39'.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '#Hex is started with $ sign'#13#10'\$[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-&%\$]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'addressof'
              'alias'
              'and'
              'appactivate'
              'as'
              'beep'
              'binary'
              'boolean'
              'byref'
              'byte'
              'byval'
              'call'
              'case'
              'Catch'
              'chdir'
              'chdrive'
              'choose'
              'class'
              'close'
              'const'
              'currency'
              'date'
              'decimal'
              'declare'
              'deletesetting'
              'dim'
              'do'
              'doevents'
              'double'
              'each'
              'else'
              'elseif'
              'empty'
              'end'
              'enum'
              'eqv'
              'erase'
              'error'
              'event'
              'exit'
              'False'
              'filecopy'
              'finally'
              'for'
              'friend'
              'function'
              'get'
              'gosub'
              'goto'
              'if'
              'imp'
              'implements'
              'in'
              'input'
              'integer'
              'is'
              'kill'
              'let'
              'lib'
              'like'
              'line'
              'load'
              'lock'
              'long'
              'loop'
              'lset'
              'new'
              'next'
              'not'
              'null'
              'object'
              'on'
              'optional'
              'or'
              'paramarray'
              'return'
              'select'
              'set'
              'single'
              'static'
              'step'
              'stop'
              'string'
              'sub'
              'switch'
              'then'
              'to'
              'True'
              'Try'
              'type'
              'typeof'
              'unlock'
              'until'
              'variant'
              'wend'
              'while'
              'with'
              'withevents'
              'write'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'OP Keywords'
        StyleName = 'OP Keywords'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'imports'
              'Inherits'
              'Overloads'
              'Overrides'
              'private'
              'property'
              'protected'
              'public')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Sub begin line break'
        StyleName = 'Line separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Sub end line break'
        StyleName = 'Line separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        LinePos = lbBottom
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Sub start'
        StyleName = 'Sub background'
        BlockName = 'Sub start'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Sub end'
        Highlight = True
        NameFmt = '%s0'
        DynHighlight = dhRange
        HighlightPos = cpRange
        DrawStaple = True
        CollapseFmt = '%sz0'
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Sub end'
        BlockName = 'Sub start'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'get'
              'if'
              'property'
              'select'
              'try'
              'type'
              'while'
              'with')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        HighlightPos = cpBound
        DrawStaple = True
        CollapseFmt = '%sz0 ...'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'End %s0 '
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        SameIdent = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = #39' ...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Class'
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'class'
              'Namespace')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'End'
        NameFmt = '%sz1'
        HighlightPos = cpAny
        CollapseFmt = '%s1 %s0'
        TreeItemImage = 1
        IgnoreAsParent = False
      end
      item
        DisplayName = 'For'
        ConditionList = <
          item
            TagList.Strings = (
              'for')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Next'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Next'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'next')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '#Region begin'
        ConditionList = <
          item
            TagList.Strings = (
              '\#region')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        BlockEnd = '#End region'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        IgnoreAsParent = False
      end
      item
        DisplayName = '#End region'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '\#end\s+region')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Prop begin'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'property')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Prop end'
        NameFmt = '%s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1'
        TreeItemImage = 4
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Prop end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'property')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Prop begin'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      #39' Syntax highlighting'
      'Function PrintNumber'
      '  Dim Number'
      '  Dim X      34.4e+5'
      ''
      '  Number = 123456'
      '  Response.Write "The number is " & number'
      '             '
      '  For I = 0 To Number'
      '    X = X + &h4c'
      '    X = X - &o8'
      '    X = X + 1.0'
      '  Next'
      ''
      '  I = I + @;  '
      'End Function')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    LexerName = 'Visual Basic'
    LineComment = #39
    Charset = DEFAULT_CHARSET
  end
  object SyntAnalyzer13: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Ident'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Integer'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'HEX'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Label'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'reserved words'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Registers'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = ';.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Labels'
        StyleName = 'Label'
        Expression = '@+\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'HEX'
        TokenType = 7
        Expression = '[\da-f]+h \b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Integer'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Ident'
        StyleName = 'Ident'
        TokenType = 2
        Expression = '[a-z_%]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Str'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39') .*? \1'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Registers'
        StyleName = 'Registers'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ah'
              'al'
              'ax'
              'bh'
              'bl'
              'bp'
              'bx'
              'ch'
              'cl'
              'cs'
              'cx'
              'dh'
              'di'
              'ds'
              'dx'
              'eax'
              'ebp'
              'ebx'
              'ecx'
              'edi'
              'edx'
              'eip'
              'es'
              'esc'
              'esi'
              'esp'
              'si'
              'sp'
              'ss')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Reserved words'
        StyleName = 'reserved words'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'aaa'
              'aad'
              'aam'
              'aas'
              'adc'
              'add'
              'and'
              'arpl'
              'assume'
              'bound'
              'bsf'
              'bsr'
              'bswap'
              'bt'
              'btc'
              'btr'
              'bts'
              'byte'
              'call'
              'cbw'
              'cdq'
              'clc'
              'cld'
              'cli'
              'clts'
              'cmc'
              'cmp'
              'cmps'
              'cmpsb'
              'cmpsd'
              'cmpsw'
              'cmpxchg'
              'comment'
              'cwd'
              'cwde'
              'daa'
              'das'
              'db'
              'dd'
              'dec'
              'div'
              'dl'
              'dq'
              'dt'
              'dw'
              'dword'
              'end'
              'endm'
              'endp'
              'ends'
              'enter'
              'eq'
              'equ'
              'exitm'
              'extrn'
              'f2xm1'
              'fabs'
              'fadd'
              'faddp'
              'far'
              'fbld'
              'fbstp'
              'fchs'
              'fclex'
              'fcom'
              'fcomp'
              'fcompp'
              'fcos'
              'fdecstp'
              'fdisi'
              'fdiv'
              'fdivp'
              'fdivr'
              'fdivrp'
              'feni'
              'ffree'
              'fiadd'
              'ficom'
              'ficomp'
              'fidiv'
              'fidivr'
              'fild'
              'fimul'
              'fincstp'
              'finit'
              'fist'
              'fistp'
              'fisub'
              'fisubr'
              'fld'
              'fld1'
              'fldcw'
              'fldenv'
              'fldl2e'
              'fldl2t'
              'fldlg2'
              'fldln2'
              'fldpi'
              'fldz'
              'fmul'
              'fmulp'
              'fnclex'
              'fndisi'
              'fneni'
              'fninit'
              'fnop'
              'fnsave'
              'fnstcw'
              'fnstenv'
              'fnstsw'
              'fpatan'
              'fprem'
              'fprem1'
              'fptan'
              'frndint'
              'frstor'
              'fs'
              'fsave'
              'fscale'
              'fsetpm'
              'fsin'
              'fsincos'
              'fsqrt'
              'fst'
              'fstcw'
              'fstenv'
              'fstp'
              'fstsw'
              'fsub'
              'fsubp'
              'fsubr'
              'fsubrp'
              'ftst'
              'fucom'
              'fucomp'
              'fucompp'
              'fwait'
              'fxam'
              'fxch'
              'fxtract'
              'fyl2x'
              'fyl2xp1'
              'ge'
              'group'
              'gs'
              'gt'
              'high'
              'hlt'
              'idiv'
              'imul'
              'in'
              'inc'
              'include'
              'insb'
              'insd'
              'insw'
              'int'
              'into'
              'invd'
              'invlpg'
              'iret'
              'iretd'
              'ja'
              'jae'
              'jb'
              'jbe'
              'jc'
              'jcxz'
              'je'
              'jecxz'
              'jg'
              'jge'
              'jl'
              'jle'
              'jmp'
              'jna'
              'jnae'
              'jnb'
              'jnbe'
              'jnc'
              'jne'
              'jng'
              'jnge'
              'jnl'
              'jnle'
              'jno'
              'jnp'
              'jns'
              'jnz'
              'jo'
              'jp'
              'jpe'
              'jpo'
              'js'
              'jz'
              'label'
              'lahf'
              'lar'
              'large'
              'lds'
              'le'
              'lea'
              'leave'
              'length'
              'les'
              'lfs'
              'lgdt'
              'lgs'
              'lidt'
              'lldt'
              'lmsw'
              'local'
              'lock'
              'lods'
              'lodsb'
              'lodsd'
              'lodsw'
              'loop'
              'loopd'
              'loopde'
              'loopdne'
              'loopdnz'
              'loopdz'
              'loope'
              'loopne'
              'loopnz'
              'loopz'
              'low'
              'lsl'
              'lss'
              'lt'
              'ltr'
              'macro'
              'mask'
              'mod'
              'mov'
              'movs'
              'movsb'
              'movsd'
              'movsw'
              'movsx'
              'movzx'
              'mul'
              'name'
              'near'
              'neg'
              'nop'
              'not'
              'offset'
              'or'
              'org'
              'out'
              'outsb'
              'outsd'
              'outsw'
              'page'
              'pop'
              'popa'
              'popad'
              'popf'
              'popfd'
              'proc'
              'ptr'
              'public'
              'purge'
              'push'
              'pusha'
              'pushad'
              'pushf'
              'pushfd'
              'qword'
              'rcl'
              'rcr'
              'record'
              'rep'
              'repe'
              'repne'
              'repnz'
              'rept'
              'repz'
              'ret'
              'retf'
              'retn'
              'rol'
              'ror'
              'sahf'
              'sal'
              'sar'
              'sbb'
              'scas'
              'scasb'
              'scasd'
              'scasw'
              'seg'
              'segcs'
              'segds'
              'seges'
              'segfs'
              'seggs'
              'segment'
              'segss'
              'seta'
              'setae'
              'setb'
              'setbe'
              'setc'
              'sete'
              'setg'
              'setge'
              'setl'
              'setle'
              'setna'
              'setnae'
              'setnb'
              'setnbe'
              'setnc'
              'setne'
              'setng'
              'setnge'
              'setnl'
              'setnle'
              'setno'
              'setnp'
              'setns'
              'setnz'
              'seto'
              'setp'
              'setpe'
              'setpo'
              'sets'
              'setz'
              'sgdt'
              'shl'
              'shld'
              'short'
              'shr'
              'shrd'
              'sidt'
              'size'
              'sldt'
              'small'
              'smsw'
              'st'
              'stc'
              'std'
              'sti'
              'stos'
              'stosb'
              'stosd'
              'stosw'
              'str'
              'struc'
              'sub'
              'subttl'
              'symtype'
              'tbyte'
              'test'
              'this'
              'title'
              'type'
              'verr'
              'verw'
              'wait'
              'wbinvd'
              'width'
              'word'
              'xadd'
              'xchg'
              'xlat'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'seg'
        ConditionList = <
          item
            TagList.Strings = (
              'segment')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'seg end'
        NameFmt = 'segment %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'seg end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'ends')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'proc'
        ConditionList = <
          item
            TagList.Strings = (
              'proc')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'proc end'
        NameFmt = 'proc %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'proc end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endp')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'macro'
        ConditionList = <
          item
            TagList.Strings = (
              'macro')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'macro end'
        NameFmt = 'macro %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'macro end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endm')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'macro%'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '%macro')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'macro% end'
        NameFmt = 'macro %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'macro% end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '%endmacro')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '; x86 assembly sample source'
      '  CODE'#9'SEGMENT'#9'BYTE PUBLIC '
      '    ASSUME'#9'CS:CODE'
      '    '
      '    PUSH SS'
      '    POP DS'
      '    MOV AX, AABBh'
      '    MOV'#9'BYTE PTR ES:[DI], 255'
      '    JMP SHORT @AsmEnd'
      ''
      '  welcomeMsg DB '#39'Hello World'#39', 0'
      ''
      '  @AsmEnd:'
      '    MOV AX, 0'
      '    RET'
      '    '
      'test1 PROC NEAR'
      '      MOV ax,10'
      '      CALL test2'
      '      RET'
      'test1 ENDP'
      ''
      'test2 PROC FAR'
      '      ADD ax,ax'
      '      RET'
      'test2 ENDP'
      ''
      '  CODE'#9'ENDS'
      '  '
      'PUSHALL MACRO'
      '       PUSH AX BX CX DX'
      '       PUSH DS SI'
      '       PUSH ES DI'
      #9'ENDM'
      '    '
      '; nasm macro taking 1 par'
      '%MACRO DOSB 1'
      '           mov ah, %1'
      '           int 21h'
      '%ENDMACRO    '
      '  '
      'END')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'asm'
    LexerName = 'Assembler'
    Notes.Strings = (
      'Fixed by Alex, uvviewsoft.com'
      '+ macros/procs/segments in tree (for MASM/NASM)')
    LineComment = ';'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal1: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlight
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clLime
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clSilver
        BorderTypeTop = blSolid
        BorderColorTop = clSilver
        BorderTypeRight = blSolid
        BorderColorRight = clSilver
        BorderTypeBottom = blSolid
        BorderColorBottom = clSilver
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Region Name'
        StyleName = 'Preprocessor'
        BlockName = 'Region header'
        TokenType = 10
        Expression = '.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)".*?("|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Reserved Id'
        StyleName = 'Reserved word'
        Expression = '#to not catch by Func rule'#13#10'\b(if | foreach | while | catch)\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Region'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#region'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^!~]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'base'
              'bool'
              'break'
              'byte'
              'case'
              'catch'
              'char'
              'checked'
              'class'
              'const'
              'continue'
              'decimal'
              'default'
              'delegate'
              'do'
              'double'
              'else'
              'enum'
              'event'
              'explicit'
              'extern'
              'false'
              'finally'
              'fixed'
              'float'
              'for'
              'foreach'
              'get'
              'goto'
              'if'
              'implicit'
              'in'
              'int'
              'interface'
              'internal'
              'is'
              'lock'
              'long'
              'namespace'
              'new'
              'null'
              'object'
              'operator'
              'out'
              'override'
              'params'
              'private'
              'protected'
              'public'
              'readonly'
              'ref'
              'return'
              'sbyte'
              'sealed'
              'set'
              'short'
              'sizeof'
              'static'
              'string'
              'struct'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typeof'
              'uint'
              'ulong'
              'unchecked'
              'unsafe'
              'ushort'
              'using'
              'virtual'
              'void'
              'where'
              'while'
              'yield')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '#if'
        ConditionList = <
          item
            TagList.Strings = (
              '#if*'
              '#ifdef*'
              '#ifndef*')
            CondType = tcMask
            TokenTypes = 1024
          end>
        BlockEnd = '#endif'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '#endif'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '#endif')
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function begin'
        BlockName = 'function begin'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 12
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '('
              'class')
            CondType = tcNotEqual
            TokenTypes = 12
          end>
        IdentIndex = -1
        BlockEnd = 'function end'
        NameFmt = '%s-1~s[(]1'
        RefToCondEnd = True
        HighlightPos = cpBound
        GrammaRuleName = 'func'
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '}'
      end
      item
        DisplayName = 'class'
        ConditionList = <
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
          end>
        IdentIndex = -1
        BlockEnd = 'end of class'
        NameFmt = '%s-1'
        HighlightPos = cpBound
        TreeItemImage = 1
        IgnoreAsParent = False
      end
      item
        DisplayName = 'namespace'
        ConditionList = <
          item
            TagList.Strings = (
              'namespace')
            TokenTypes = 4
          end>
        IdentIndex = -1
        BlockEnd = 'end of namespace'
        HighlightPos = cpBound
        TreeItemImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockName = '{'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function end'
        BlockName = 'function begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end of class'
        BlockName = 'class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end of namespace'
        BlockName = 'namespace'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        CollapseFmt = '[ ... ]'
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Region header'
        ConditionList = <
          item
            TagList.Strings = (
              '#region')
            TokenTypes = 512
            IgnoreCase = True
          end>
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Region header end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'Region header'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'prop begin'
        BlockName = 'prop begin'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'get'
              'set')
            TokenTypes = 4
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'prop end'
        NameFmt = '%s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 4
        IgnoreAsParent = False
      end
      item
        DisplayName = 'prop end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = 'prop begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'enum begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'enum')
            TokenTypes = 4
          end>
        BlockEnd = 'enum end'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'enum end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = 'enum begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'indexer begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'this')
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'indexer end'
        NameFmt = 'indexer %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 7
        IgnoreAsParent = False
      end
      item
        DisplayName = 'indexer end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = 'indexer begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'struct begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'struct')
            TokenTypes = 4
          end>
        BlockEnd = 'struct end'
        NameFmt = '%s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'struct end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = 'struct begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'oper begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 12
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'operator')
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'oper end'
        NameFmt = 'operator %s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 7
        IgnoreAsParent = False
      end
      item
        DisplayName = 'oper end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = 'oper begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'field'
        ConditionList = <
          item
            TagList.Strings = (
              ','
              ';'
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            CondType = tcMask
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'private'
              'public'
              'static')
            TokenTypes = 4
          end>
        NameFmt = '%sz-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        GrammaRuleName = 'field'
        TreeItemImage = 3
        IgnoreAsParent = False
      end
      item
        DisplayName = 'delegate begin'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TokenTypes = 4
          end
          item
            CondType = tcSkip
            TokenTypes = 12
          end
          item
            TagList.Strings = (
              'delegate')
            TokenTypes = 4
          end>
        NameFmt = '%sz0'
        HighlightPos = cpAny
        NoEndRule = True
        TreeItemImage = 3
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'XML doc'
        Enabled = False
        StartExpression = '///'
        EndExpression = '(?s)(\r\n | ///)'
        SyntAnalyzer = SyntAnal22
      end>
    SampleText.Strings = (
      '//C# syntax highlighting'
      'enum Days {P1, P2, P3};'
      ' '
      'public class Stack: IEdit, IEdit2'
      '{'
      '  public delegate int[] DelDemo();'
      '  private Node first = null;'
      '  public bool Empty {'
      '    //property'
      '    get {'
      '      return (first == null);'
      '    }'
      '  }'
      '  public object IEdit.Pop() {'
      '    if (first == null)'
      '      throw new Exception("Can'#39't Pop from an empty Stack.");'
      '    else {'
      '      object temp = first.Value;'
      '      first = first.Next;'
      '      return temp;'
      '    }'
      '  }'
      '  '
      '  static void RegisterFunction(Type reg1; Type2 reg2)'
      '  {'
      '    CategoryRegistration(registerType);'
      '  }'
      ''
      '  [ComUnregisterFunction()]'
      '  [ComVisible(false)] '
      
        '  static void UnregisterFunction(Type reg1; Type[] regs; Type2 r' +
        'eg2)'
      '  {'
      '    CategoryUnregistration(registerType);'
      '  }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Region name')
    Gramma.Gramma = 
      'Complex_name =  <Identifier> | Complex_name "." <Identifier>;'#13#10'f' +
      'ield = ('#39'private'#39' | '#39'public'#39' | '#39'static'#39') Complex_name <Identifie' +
      'r> ('#39'='#39' | '#39','#39' | '#39';'#39');'#13#10#13#10'Params = <Identifier> | Params <Identif' +
      'ier> | Params ('#39','#39' | '#39'.'#39' | '#39';'#39' | '#39':'#39' | '#39'['#39' | '#39']'#39');'#13#10'func = <Iden' +
      'tifier> ('#39'['#39' '#39']'#39')? Complex_name '#39'('#39' Params? '#39')'#39' '#39'{'#39';'#13#10
    MarkedBlockStyle = 'Marked block'
    Extentions = 'cs c cpp h'
    LexerName = 'C#'
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal5: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Current function'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16772332
        FormatType = ftBackGround
        MultiLineBorder = True
      end
      item
        DisplayName = 'Type'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Const'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Annotation'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39') (\\\1|.)*? (\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Annot'
        StyleName = 'Annotation'
        TokenType = 2
        Expression = '\@\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IdKeyword'
        StyleName = 'Reserved word'
        TokenType = 10
        Expression = 
          '#to don'#39't catch keyword by Id rule - for functions'#13#10'if | else | ' +
          'new'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]+ |'#13#10'0b[01]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '((\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+\.\d+) [df]?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+L?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\./\+\-\*:=<>&/\|\^~!\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'break'
              'case'
              'catch'
              'class'
              'const'
              'continue'
              'default'
              'do'
              'else'
              'extends'
              'final'
              'finally'
              'for'
              'function'
              'get'
              'goto'
              'if'
              'implements'
              'import'
              'in'
              'instanceof'
              'interface'
              'native'
              'new'
              'package'
              'private'
              'protected'
              'public'
              'return'
              'set'
              'static'
              'string'
              'super'
              'switch'
              'synchronized'
              'this'
              'throw'
              'throws'
              'transient'
              'try'
              'var'
              'void'
              'volatile'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Consts'
        StyleName = 'Const'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'false'
              'null'
              'true'
              'undefined')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Types'
        StyleName = 'Type'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'array'
              'boolean'
              'byte'
              'char'
              'double'
              'float'
              'int'
              'long'
              'short')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function begin'
        Enabled = False
        StyleName = 'Current function'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'get'
              'set')
            CondType = tcSkip
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockEnd = 'function end'
        Highlight = True
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function end'
        Enabled = False
        BlockName = 'function begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class start'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            CondType = tcSkip
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
          end
          item
            TokenTypes = 6
          end>
        BlockEnd = 'End'
        EndOfTextClose = True
        NameFmt = 'class %s-2'
        RefToCondEnd = True
        HighlightPos = cpBound
        CancelNextRules = True
        CollapseFmt = 'class %s-2 { ... }'
        SelfClose = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '/* ... */'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '('
              ':'
              '['
              '=')
            CondType = tcNotEqual
            TokenTypes = 8
          end>
        BlockOffset = -1
        BlockEnd = 'End'
        NameFmt = 'func %s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        SelfClose = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <
      item
        Name = 'switchs'
        Description = 'switch statement'
        Code.Strings = (
          'switch (|)'
          '{'
          '  case : ;'
          '  break;'
          '  case : ;'
          '  break;'
          '}')
      end
      item
        Name = 'switche'
        Description = 'switch statement (with default)'
        Code.Strings = (
          'switch (|)'
          '{'
          '  case : ;'
          '  break;'
          '  case : ;'
          '  break;'
          '  default: ;'
          '}')
      end
      item
        Name = 'classd'
        Description = 'class declaration (no parts)'
        Code.Strings = (
          'public class |'
          '{'
          '};')
      end
      item
        Name = 'fors'
        Description = 'for (no opening/closing braces)'
        Code.Strings = (
          'for (|; ;)')
      end
      item
        Name = 'forb'
        Description = 'for statement'
        Code.Strings = (
          'for (|; ;)'
          '{'
          ''
          '}')
      end
      item
        Name = 'for'
        Description = 'for statement'
        Code.Strings = (
          'for (int i = 0; i <|; i++)'
          '{'
          '}')
      end
      item
        Name = 'function'
        Description = 'function declaration'
        Code.Strings = (
          '|()'
          '{'
          ''
          '}')
      end
      item
        Name = 'ifs'
        Description = 'if (no opening/closing braces)'
        Code.Strings = (
          'if (|)')
      end
      item
        Name = 'ifb'
        Description = 'if statement'
        Code.Strings = (
          'if (|)'
          '{'
          ''
          '}')
      end
      item
        Name = 'ife'
        Description = 'if (no opening/closing braces) else (no opening/closing braces)'
        Code.Strings = (
          'if (|)'
          ''
          'else')
      end
      item
        Name = 'ifeb'
        Description = 'if else'
        Code.Strings = (
          'if (|)'
          '{'
          ''
          '}'
          'else'
          '{'
          ''
          '}')
      end
      item
        Name = 'trye'
        Description = 'try catch'
        Code.Strings = (
          'try'
          '{'
          '  |'
          '}'
          'catch()'
          '{'
          '}')
      end
      item
        Name = 'trycf'
        Description = 'try catch finally'
        Code.Strings = (
          'try'
          '{'
          '  |'
          '}'
          'catch()'
          '{'
          '}'
          'finally'
          '{'
          '}')
      end
      item
        Name = 'whileb'
        Description = 'while statement'
        Code.Strings = (
          'while (|)'
          '{'
          ''
          '}')
      end
      item
        Name = 'whiles'
        Description = 'while (no opening/closing braces)'
        Code.Strings = (
          'while (|)')
      end
      item
        Name = 'out'
        Description = 'System.out.println'
        Code.Strings = (
          'System.out.println')
      end
      item
        Name = 'streamin'
        Description = 'input from keyboard'
        Code.Strings = (
          'BufferedReader streami = new BufferedReader('
          '  new InputStreamReader(System.in));'
          '|')
      end
      item
        Name = 'fostream'
        Description = 'file output stream'
        Code.Strings = (
          'PrintWriter fostream = new PrintWriter(new FileWriter(|))')
      end>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* Java syntax highlighting */'
      'import java.util.*;'
      ''
      '@SupressWarnings("serial")'
      'public class Ruler extends JFrame {'
      '  public void setModel(TableModel model) {'
      '    super.setModel(model);'
      '    reallocateIndexes();'
      '  }'
      '  public static void testTest() {'
      '  }'
      '}'
      ''
      'public class Sample {'
      '  public static void main(String[] args) {'
      '    long i = 0L;'
      '    float f = 0.5f / 2.0;'
      '    String s = "aa\"" + "bb" + '#39'\'#39#39' + '#39'\n'#39';'
      '    for (i=0; i<10; i++)'
      '      System.out.println("Hello world");'
      '  }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Keyword')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'java jav groovy'
    LexerName = 'Java'
    Notes.Strings = (
      'Fixed by Alex, uvviewsoft.com'
      '+ functions shown in tree '
      '  (not correct for funcs out of classes,'
      '  for nested classes,'
      '  but for most cases OK)'
      '+ annotations'
      '+ hex/dec/float nums')
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal12: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Std functions'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^c.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'access'
              'action'
              'advance'
              'allocatable'
              'allocate'
              'apostrophe'
              'assign'
              'assignment'
              'associate'
              'asynchronous'
              'backspace'
              'bind'
              'blank'
              'blockdata'
              'call'
              'case'
              'character'
              'class'
              'close'
              'common'
              'complex'
              'contains'
              'continue'
              'cycle'
              'data'
              'deallocate'
              'decimal'
              'default'
              'delim'
              'dimension'
              'direct'
              'do'
              'double'
              'doubleprecision'
              'dowhile'
              'else'
              'elseif'
              'elsewhere'
              'encoding'
              'end'
              'endassociate'
              'endblockdata'
              'enddo'
              'endfile'
              'endforall'
              'endfunction'
              'endif'
              'endinterface'
              'endmodule'
              'endprogram'
              'endselect'
              'endsubroutine'
              'endtype'
              'endwhere'
              'entry'
              'eor'
              'equivalence'
              'err'
              'errmsg'
              'exist'
              'exit'
              'external'
              'file'
              'flush'
              'fmt'
              'forall'
              'form'
              'format'
              'formatted'
              'function'
              'go'
              'goto'
              'id'
              'if'
              'implicit'
              'in'
              'include'
              'inout'
              'inquire'
              'integer'
              'intent'
              'interface'
              'intrinsic'
              'iolength'
              'iomsg'
              'iostat'
              'kind'
              'len'
              'logical'
              'module'
              'name'
              'named'
              'namelist'
              'nextrec'
              'nml'
              'none'
              'nullify'
              'number'
              'only'
              'open'
              'opened'
              'operator'
              'optional'
              'out'
              'pad'
              'parameter'
              'pass'
              'pause'
              'pending'
              'pointer'
              'pos'
              'position'
              'precision'
              'print'
              'private'
              'program'
              'protected'
              'public'
              'quote'
              'read'
              'readwrite'
              'real'
              'rec'
              'recl'
              'recursive'
              'result'
              'return'
              'rewind'
              'save'
              'select'
              'selectcase'
              'selecttype'
              'sequential'
              'sign'
              'size'
              'stat'
              'status'
              'stop'
              'stream'
              'subroutine'
              'target'
              'then'
              'to'
              'type'
              'unformatted'
              'unit'
              'use'
              'value'
              'volatile'
              'wait'
              'where'
              'while'
              'write')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'std functions'
        StyleName = 'Std functions'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abs'
              'achar'
              'acos'
              'acosd'
              'adjustl'
              'adjustr'
              'aimag'
              'aimax0'
              'aimin0'
              'aint'
              'ajmax0'
              'ajmin0'
              'akmax0'
              'akmin0'
              'all'
              'allocated'
              'alog'
              'alog10'
              'amax0'
              'amax1'
              'amin0'
              'amin1'
              'amod'
              'anint'
              'any'
              'asin'
              'asind'
              'associated'
              'atan'
              'atan2'
              'atan2d'
              'atand'
              'bit_size'
              'bitest'
              'bitl'
              'bitlr'
              'bitrl'
              'bjtest'
              'bktest'
              'break'
              'btest'
              'cabs'
              'ccos'
              'cdabs'
              'cdcos'
              'cdexp'
              'cdlog'
              'cdsin'
              'cdsqrt'
              'ceiling'
              'cexp'
              'char'
              'clog'
              'cmplx'
              'conjg'
              'cos'
              'cosd'
              'cosh'
              'count'
              'cpu_time'
              'cshift'
              'csin'
              'csqrt'
              'dabs'
              'dacos'
              'dacosd'
              'dasin'
              'dasind'
              'datan'
              'datan2'
              'datan2d'
              'datand'
              'date'
              'date_and_time'
              'dble'
              'dcmplx'
              'dconjg'
              'dcos'
              'dcosd'
              'dcosh'
              'dcotan'
              'ddim'
              'dexp'
              'dfloat'
              'dfloti'
              'dflotj'
              'dflotk'
              'digits'
              'dim'
              'dimag'
              'dint'
              'dlog'
              'dlog10'
              'dmax1'
              'dmin1'
              'dmod'
              'dnint'
              'dot_product'
              'dprod'
              'dreal'
              'dsign'
              'dsin'
              'dsind'
              'dsinh'
              'dsqrt'
              'dtan'
              'dtand'
              'dtanh'
              'eoshift'
              'epsilon'
              'errsns'
              'exp'
              'exponent'
              'float'
              'floati'
              'floatj'
              'floatk'
              'floor'
              'fraction'
              'free'
              'huge'
              'iabs'
              'iachar'
              'iand'
              'ibclr'
              'ibits'
              'ibset'
              'ichar'
              'idate'
              'idim'
              'idint'
              'idnint'
              'ieor'
              'ifix'
              'iiabs'
              'iiand'
              'iibclr'
              'iibits'
              'iibset'
              'iidim'
              'iidint'
              'iidnnt'
              'iieor'
              'iifix'
              'iint'
              'iior'
              'iiqint'
              'iiqnnt'
              'iishft'
              'iishftc'
              'iisign'
              'ilen'
              'imax0'
              'imax1'
              'imin0'
              'imin1'
              'imod'
              'index'
              'inint'
              'inot'
              'int'
              'int1'
              'int2'
              'int4'
              'int8'
              'ior'
              'iqint'
              'iqnint'
              'ishft'
              'ishftc'
              'isign'
              'isnan'
              'izext'
              'jiand'
              'jibclr'
              'jibits'
              'jibset'
              'jidim'
              'jidint'
              'jidnnt'
              'jieor'
              'jifix'
              'jint'
              'jior'
              'jiqint'
              'jiqnnt'
              'jishft'
              'jishftc'
              'jisign'
              'jmax0'
              'jmax1'
              'jmin0'
              'jmin1'
              'jmod'
              'jnint'
              'jnot'
              'jzext'
              'kiabs'
              'kiand'
              'kibclr'
              'kibits'
              'kibset'
              'kidim'
              'kidint'
              'kidnnt'
              'kieor'
              'kifix'
              'kind'
              'kint'
              'kior'
              'kishft'
              'kishftc'
              'kisign'
              'kmax0'
              'kmax1'
              'kmin0'
              'kmin1'
              'kmod'
              'knint'
              'knot'
              'kzext'
              'lbound'
              'leadz'
              'len'
              'len_trim'
              'lenlge'
              'lge'
              'lgt'
              'lle'
              'llt'
              'log'
              'log10'
              'logical'
              'lshift'
              'malloc'
              'matmul'
              'max'
              'max0'
              'max1'
              'maxexponent'
              'maxloc'
              'maxval'
              'merge'
              'min'
              'min0'
              'min1'
              'minexponent'
              'minloc'
              'minval'
              'mod'
              'modulo'
              'mvbits'
              'nearest'
              'nint'
              'not'
              'number_of_processors'
              'nworkers'
              'pack'
              'popcnt'
              'poppar'
              'precision'
              'present'
              'product'
              'radix'
              'random'
              'random_number'
              'random_seed'
              'range'
              'real'
              'repeat'
              'reshape'
              'rrspacing'
              'rshift'
              'scale'
              'scan'
              'secnds'
              'selected_int_kind'
              'selected_real_kind'
              'set_exponent'
              'shape'
              'sign'
              'sin'
              'sind'
              'sinh'
              'size'
              'sizeof'
              'sngl'
              'snglq'
              'spacing'
              'spread'
              'sqrt'
              'sum'
              'system_clock'
              'tan'
              'tand'
              'tanh'
              'tiny'
              'transfer'
              'transpose'
              'trim'
              'ubound'
              'unpack'
              'verify')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'IF'
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
          end>
        BlockEnd = 'endif'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'endif'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endif')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'f for f90 f95 f2k'
    LexerName = 'Fortran'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal8: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Something'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsUnderline]
      end
      item
        DisplayName = 'String regex'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 8
        Expression = '\$\w+::\w+ |'#13#10'[\$\#%@]+\w+'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String Regex subst'
        StyleName = 'String regex'
        TokenType = 4
        Expression = 's/ (\\/|.)*? / (\\/|.)*? / \w* '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String Regex'
        StyleName = 'String regex'
        TokenType = 4
        Expression = '\w* / (\\/|.)+? (/|$) \w* '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\\\|\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 2'
        StyleName = 'Something'
        TokenType = 9
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\{\}\?!@&%\|~]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__DATA__'
              '__END__'
              '__FILE__'
              '__LINE__'
              '__PACKAGE__'
              'abs'
              'accept'
              'alarm'
              'and'
              'atan2'
              'AUTOLOAD'
              'BEGIN'
              'bind'
              'binmode'
              'bless'
              'caller'
              'chdir'
              'CHECK'
              'chmod'
              'chomp'
              'chop'
              'chown'
              'chr'
              'chroot'
              'close'
              'closedir'
              'cmp'
              'connect'
              'continue'
              'CORE'
              'cos'
              'crypt'
              'dbmclose'
              'dbmopen'
              'define'
              'defined'
              'delete'
              'DESTROY'
              'die'
              'do'
              'dump'
              'each'
              'else'
              'elsif'
              'END'
              'endgrent'
              'endhostent'
              'endnetent'
              'endprotoent'
              'endpwent'
              'endservent'
              'eof'
              'EQ'
              'eval'
              'exec'
              'exists'
              'exit'
              'exp'
              'fcntl'
              'fileno'
              'flock'
              'for'
              'foreach'
              'fork'
              'format'
              'formline'
              'GE'
              'getc'
              'getgrent'
              'getgrgid'
              'getgrnam'
              'gethostbyaddr'
              'gethostbyname'
              'gethostent'
              'getlogin'
              'getnetbyaddr'
              'getnetbyname'
              'getnetent'
              'getpeername'
              'getpgrp'
              'getppid'
              'getpriority'
              'getprotobyname'
              'getprotobynumber'
              'getprotoent'
              'getpwent'
              'getpwnam'
              'getpwuid'
              'getservbyname'
              'getservbyport'
              'getservent'
              'getsockname'
              'getsockopt'
              'glob'
              'gmtime'
              'goto'
              'grep'
              'GT'
              'hex'
              'if'
              'index'
              'INIT'
              'int'
              'ioctl'
              'join'
              'keys'
              'kill'
              'last'
              'lc'
              'lcfirst'
              'LE'
              'length'
              'link'
              'listen'
              'local'
              'localtime'
              'lock'
              'log'
              'lstat'
              'LT'
              'm'
              'map'
              'mkdir'
              'msgctl'
              'msgget'
              'msgrcv'
              'msgsnd'
              'my'
              'NE'
              'next'
              'no'
              'not'
              'NULL'
              'oct'
              'open'
              'opendir'
              'or'
              'ord'
              'our'
              'pack'
              'package'
              'pipe'
              'pop'
              'pos'
              'print'
              'printf'
              'prototype'
              'push'
              'q'
              'qq'
              'qr'
              'qu'
              'quotemeta'
              'qw'
              'qx'
              'rand'
              'read'
              'readdir'
              'readline'
              'readlink'
              'readpipe'
              'recv'
              'redo'
              'ref'
              'rename'
              'require'
              'reset'
              'return'
              'reverse'
              'rewinddir'
              'rindex'
              'rmdir'
              's'
              'scalar'
              'seek'
              'seekdir'
              'select'
              'semctl'
              'semget'
              'semop'
              'send'
              'setgrent'
              'sethostent'
              'setnetent'
              'setpgrp'
              'setpriority'
              'setprotoent'
              'setpwent'
              'setservent'
              'setsockopt'
              'shift'
              'shmctl'
              'shmget'
              'shmread'
              'shmwrite'
              'shutdown'
              'sin'
              'sleep'
              'socket'
              'socketpair'
              'sort'
              'splice'
              'split'
              'sprintf'
              'sqrt'
              'srand'
              'stat'
              'study'
              'sub'
              'substr'
              'symlink'
              'syscall'
              'sysopen'
              'sysread'
              'sysseek'
              'system'
              'syswrite'
              'tell'
              'telldir'
              'tie'
              'tied'
              'time'
              'times'
              'tr'
              'truncate'
              'uc'
              'ucfirst'
              'umask'
              'undef'
              'unless'
              'unlink'
              'unpack'
              'unshift'
              'untie'
              'until'
              'use'
              'utime'
              'values'
              'vec'
              'wait'
              'waitpid'
              'wantarray'
              'warn'
              'while'
              'write'
              'x'
              'xor'
              'y')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Sub'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'sub')
            TokenTypes = 1028
          end>
        BlockEnd = '}'
        NameFmt = 'sub %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = 'sub %s-1'
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '...'
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#!/bin/perl'
      'require "cgi-lib.pl";   '
      'use sigtrap;'
      'do '#39'envars.pl'#39';'
      ''
      '$re = m/text/i; #Usual regex'
      '$sLine =~ s/x/y/; #Subst regex'
      '$sLine =~ s/x\/y/y\*z/g; #Subst too'
      ''
      '$MyVar or $MyLib::MyVar '
      'or @MyArray or $#MyArray or %MyHash'
      ''
      'sub MyOpen(*$) {  # debug'
      '  my ($sKey);'
      '}  '
      ''
      'sub WriteBack() {'
      '        while ($_ ne "fred")    {'
      '                sleep 5;'
      '        }'
      '}'
      ''
      'sub Some {'
      '  print "Test";'
      '  while (test) {'
      '    print "TT";'
      '  }  '
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'String 2')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'pl pm cgi pod plx'
    LexerName = 'Perl'
    Notes.Strings = (
      'Fixes by Alex, uvviewsoft.com')
    LineComment = '#'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal84: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftColor
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Code block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15856098
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Code border'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindow
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clBlack
      end
      item
        DisplayName = 'HTML'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Verdana'
        Font.Style = []
      end
      item
        DisplayName = 'Current Block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15400927
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end>
    TokenRules = <
      item
        DisplayName = 'Code block start'
        StyleName = 'Code border'
        TokenType = 9
        Expression = '<\?(php)?'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Code block end'
        StyleName = 'Code border'
        TokenType = 10
        Expression = '\?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)(["'#39'])(\\\\|\\\1|.)*?\1'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 2
        Expression = '\$\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[!/\+\-\*:=<>&/\|\^~]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'as'
              'break'
              'case'
              'class'
              'continue'
              'default'
              'define'
              'defined'
              'do'
              'echo'
              'else'
              'elseif'
              'endfor'
              'endforeach'
              'endif'
              'endswitch'
              'endwhile'
              'exit'
              'extends'
              'for'
              'function'
              'gettype'
              'global'
              'if'
              'include'
              'int'
              'isset'
              'old_function'
              'print'
              'private'
              'protected'
              'public'
              'pval'
              'require'
              'return'
              'settype'
              'static'
              'string'
              'switch'
              'var'
              'void'
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Code block start'
        StyleName = 'Code block'
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Code block end'
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Code block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current Block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = 'Begin'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class'
        ConditionList = <
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'class_end'
        EndOfTextClose = True
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        SelfClose = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class_end'
        BlockName = 'class'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function'
        BlockName = 'class'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'function_end'
        EndOfTextClose = True
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        SelfClose = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function_end'
        BlockName = 'function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function_without_class'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
          end>
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <
      item
        Name = 'if'
        Description = 'if ( ) {...}'
        Code.Strings = (
          'if (<caret>){'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'func'
        Description = 'function ( ) {...}'
        Code.Strings = (
          'function <caret>(){'
          ''
          '}'
          '  ')
        Advanced = True
      end
      item
        Name = 'for'
        Description = 'for($i=0; $i<x; $i++) {...}'
        Code.Strings = (
          'for($i=0; $i<<caret>; $i++){'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'while'
        Description = 'while ( ) {...}'
        Code.Strings = (
          'while (<caret>){'
          ''
          '}'
          '    ')
        Advanced = True
      end
      item
        Name = 'do'
        Description = 'do {...} while'
        Code.Strings = (
          'do{'
          ''
          '}'
          'while (<caret>);')
        Advanced = True
      end
      item
        Name = 'switch'
        Description = 'swith...case'
        Code.Strings = (
          'switch ($<caret>i){'
          '  case 0:'
          ''
          '    break;'
          '  case 1:'
          ''
          '    break;'
          '  case 2:'
          ''
          '    break;'
          '}')
        Advanced = True
      end
      item
        Name = 'print'
        Description = 'print " "'
        Code.Strings = (
          'print "<caret>";')
        Advanced = True
      end
      item
        Name = 'echo'
        Description = 'echo " "'
        Code.Strings = (
          'echo "<caret>";')
        Advanced = True
      end
      item
        Name = 'mail'
        Description = 'mail template'
        Code.Strings = (
          'mail($<caret>email, $subject, $message, "From: $from_email");')
        Advanced = True
      end
      item
        Name = 'setcookie'
        Description = 'cookie for 1 hr'
        Code.Strings = (
          'setcookie ("<caret>", $value, time()+3600);')
        Advanced = True
      end
      item
        Name = 'mysql_con'
        Description = 'connect to MySQL'
        Code.Strings = (
          
            '$link = mysql_connect("<caret>mysql_host", "mysql_login", "mysql' +
            '_password")'
          '  or die ("Could not connect to MySQL");'
          ''
          'mysql_select_db("my_database")'
          '  or die ("Could not select database");')
        Advanced = True
      end
      item
        Name = 'mysql_query'
        Description = 'mysql query'
        Code.Strings = (
          '$query = "<caret>SELECT * FROM my_table";'
          '$result = mysql_query($query)'
          '  or die("Query failed");'
          ''
          '// Output in HTML'
          ''
          'print "<table>\n";'
          'while ($line = mysql_fetch_array($result))'
          '{'
          '  print "\t<tr>\n";'
          '  while (list($col_name, $col_value) = each($line))'
          '  {'
          '    print "\t\t<td>$col_value</td>\n";'
          '  }'
          '  print "\t</tr>\n";'
          '}'
          'print "</table>\n";')
        Advanced = True
      end
      item
        Name = 'header'
        Description = 'header'
        Code.Strings = (
          'Header("Content-type: <caret>image/png");')
        Advanced = True
      end
      item
        Name = 'loc'
        Description = 'loc'
        Code.Strings = (
          'Header("Location: http://<caret>");')
        Advanced = True
      end
      item
        Name = 'fwrite'
        Description = 'file output template'
        Code.Strings = (
          '$fp = fopen("<caret>file.txt", "w+");'
          'fwrite($fp, "Test");'
          'fclose($fp);')
        Advanced = True
      end
      item
        Name = 'if_else'
        Description = 'if...else'
        Code.Strings = (
          'if (<caret>){'
          ''
          '}'
          'else{'
          ''
          '}')
        Advanced = True
      end>
    SubAnalyzers = <
      item
        DisplayName = 'HTML'
        StyleName = 'HTML'
        StartExpression = '\?>'#13#10
        EndExpression = '<\?'#13#10
        SyntAnalyzer = SyntAnal36
        FromTextBegin = True
      end>
    SampleText.Strings = (
      '<?php'
      ''
      'function ppp(int a){'
      '  echo '#39'\\'#39';'
      '  echo '#39'test'#39'."\\";'
      '  if (a){'
      '  }'
      '}'
      ''
      'class f {'
      '  function a(){'
      '    if (a) { a++; }'
      '    i++;'
      '  }'
      '  function b(){'
      '  }'
      '}'
      ''
      'class ff extends f {'
      '  function a(){'
      '    i++;'
      '  }'
      ''
      '  function b(){'
      '    if (a>b) {'
      '      a++;'
      '    }'
      '  }'
      '}'
      ''
      'function pp(int a; int b){'
      '  i++;'
      '  if (a){'
      '  }'
      '}'
      ''
      '?>')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Code Start'
      'Code End')
    MarkedBlockStyle = 'Marked block'
    LexerName = 'PHP'
    Notes.Strings = (
      'Tree added by Matthias030, ghisler.ch.')
    RestartFromLineStart = True
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal75: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clScrollBar
      end
      item
        DisplayName = 'Brackets'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = ';.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_][\w-]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Brackets'
        StyleName = 'Brackets'
        TokenType = 6
        Expression = '[\(\)]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\+\-\*=~\.\'#39']|'#13#10'[<>/]=?|'#13#10'1[\+\-]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 64
          end>
        BlockEnd = ')'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 64
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abs'
              'acos'
              'and'
              'append'
              'apply'
              'ascii'
              'asin'
              'assoc'
              'atan'
              'atof'
              'atoi'
              'atom'
              'atoms-family'
              'boundp'
              'caaar'
              'caadr'
              'caar'
              'cadar'
              'caddr'
              'cadr'
              'car'
              'cdaar'
              'cdadr'
              'cdar'
              'cddar'
              'cdddr'
              'cddr'
              'cdr'
              'chr'
              'close'
              'cond'
              'cons'
              'cos'
              'defun'
              'eq'
              'equal'
              'eval'
              'exit'
              'exp'
              'expt'
              'fix'
              'float'
              'foreach'
              'gc'
              'if'
              'inputbox'
              'INT'
              'itoa'
              'lambda'
              'last'
              'length'
              'list'
              'LIST'
              'LISTCHAIN'
              'listp'
              'load'
              'log'
              'logand'
              'logior'
              'lsh'
              'mapcar'
              'max'
              'mem'
              'member'
              'messagebox'
              'min'
              'minusp'
              'nil'
              'not'
              'nth'
              'null'
              'numberp'
              'open'
              'or'
              'PAIR'
              'pos'
              'princ'
              'print'
              'progn'
              'quit'
              'quote'
              'read'
              'read-char'
              'read-line'
              'REAL'
              'REF'
              'rem'
              'repeat'
              'reverse'
              'rtos'
              'set'
              'setq'
              'showmessage'
              'sin'
              'sqrt'
              'STR'
              'strcase'
              'strcat'
              'strlen'
              'strlsort'
              'subst'
              'substr'
              'SYM'
              'T'
              'tan'
              'terpri'
              'type'
              'ver'
              'while'
              'write-char'
              'Write-line'
              'zerop')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      ';;; comment  '#8230' This is an example  '
      ';;  comment  '#8230' definition of a lisp function'
      ';   comment  '#8230' it'#8217's important that parentheses match'
      
        ';---------------------------------------------------------------' +
        ' (defun S5_LoadCostantiStringa (/ fid riga righe result rl)'
      '  (setq fid    (open (strcat $TEMPDIR "CostantiStringa") "r")'
      '        righe  ""'
      '        result nil'
      '  )'
      ''
      '  (if fid'
      '    (progn'
      '      (while (setq riga (read-line fid))'
      '        (setq righe (strcat righe riga))'
      '      )'
      '      (close fid)'
      '      (setq rl (read righe))'
      ''
      '      (close fid)'
      '      (if (> (strlen righe) 0)'
      '        (progn'
      '          (eval rl)'
      '          (setq result T)'
      '        )'
      '      )'
      '    )'
      '  )'
      '  result'
      ')')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Brackets')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'lisp lsp'
    LexerName = 'Lisp'
    LineComment = ';'
    AlwaysSyncBlockAnal = True
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal23: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Control'#39's ID'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsUnderline]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]+L*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        BlockName = 'Resource'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        TokenType = 2
        Expression = '\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^\.\{\}]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key Words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ACCELERATORS'
              'BEGIN'
              'BITMAP'
              'CURSOR'
              'DESIGNINFO'
              'DIALOG'
              'DIALOGEX'
              'END'
              'ICON'
              'LANGUAGE'
              'MENU'
              'REGISTRY'
              'STRINGTABLE'
              'TEXTINCLUDE'
              'TOOLBAR'
              'TYPELIB'
              'VERSIONINFO')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Menu & Toolbar controls'
        StyleName = 'Control'#39's ID'
        BlockName = 'Resource'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'BUTTON'
              'MENUITEM'
              'POPUP'
              'SEPARATOR')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Dialog controls'
        StyleName = 'Control'#39's ID'
        BlockName = 'Resource'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'CAPTION'
              'COMBOBOX'
              'CONTROL'
              'CTEXT'
              'DEFPUSHBUTTON'
              'EDITTEXT'
              'FONT'
              'GROUPBOX'
              'ICON'
              'LISTBOX'
              'LTEXT'
              'PUSHBUTTON'
              'STYLE')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'BEGIN'
        ConditionList = <
          item
            TagList.Strings = (
              'BEGIN')
            TokenTypes = 4
          end>
        BlockEnd = 'END'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'END'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'END')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'String table'
        ConditionList = <
          item
            TagList.Strings = (
              'STRINGTABLE')
            TokenTypes = 4
          end>
        BlockEnd = 'String table end'
        NameFmt = '%e2 ...'
        GroupFmt = '%s0'
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'String table end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'END')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Resource'
        ConditionList = <
          item
            TagList.Strings = (
              'ACCELERATORS'
              'DESIGNINFO'
              'DIALOG'
              'DIALOGEX'
              'MENU'
              'TEXTINCLUDE'
              'TOOLBAR'
              'VERSIONINFO')
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'Resource end'
        NameFmt = '%s1'
        GroupFmt = '%s0'
        HighlightPos = cpBound
        CollapseFmt = '%s0 %s1'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Resource end'
        BlockName = 'Resource'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'END')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '#if'
        ConditionList = <
          item
            TagList.Strings = (
              '\#if')
            CondType = tcMask
            TokenTypes = 512
          end>
        BlockEnd = '#endif'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        IgnoreAsParent = False
      end
      item
        DisplayName = '#endif'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '\#endif')
            CondType = tcMask
            TokenTypes = 512
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'BITMAP begin'
        BlockName = 'Resource'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'BITMAP'
              'CURSOR'
              'ICON'
              'REGISTRY'
              'TYPELIB')
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end>
        BlockOffset = 1
        BlockEnd = 'BITMAP end'
        NameFmt = '%s1  ::  %s-1'
        GroupFmt = '%s0'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'BITMAP end'
        BlockName = 'Resource'
        NotParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'BITMAP'
              'CURSOR'
              'ICON'
              'REGISTRY'
              'TYPELIB')
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end>
        BlockOffset = -1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '{ ... %ez0'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '}'
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'rc rc2'
    LexerName = 'Resource files'
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnalyzer5: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Blob Data'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\{.*?(\}|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Blob data'
        StyleName = 'Blob Data'
        BlockName = 'Blob begin'
        Expression = '[^\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_][\w\.]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\$[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-\{\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '\#(\d+|\$[\da-f]+)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'end'
              'inherited'
              'inline'
              'item'
              'object')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin'
        ConditionList = <
          item
            TagList.Strings = (
              'inherited'
              'item'
              'object')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        NameFmt = '%s0 %s-1%s-2 %s-3'
        HighlightPos = cpBound
        DrawStaple = True
        CollapseFmt = '%s0 %s-1%s-2 %s-3'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Collection begin'
        ConditionList = <
          item
            TagList.Strings = (
              '<')
            TokenTypes = 8
          end>
        BlockOffset = 2
        BlockEnd = 'Collection end'
        NameFmt = '%s2 (collection)'
        HighlightPos = cpBound
        DrawStaple = True
        CollapseFmt = '< %s2 >'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Collection end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '>')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'List begin'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockOffset = 2
        BlockEnd = 'List end'
        NameFmt = '%s2 (list)'
        HighlightPos = cpBound
        DrawStaple = True
        CollapseFmt = '( %s2 )'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'List end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Blob begin'
        StyleName = 'Blob Data'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'Blob end'
        HighlightPos = cpBound
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Blob end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '{ Delphi/C++ Builder Form Definitions }'
      'object TestForm: TTestForm'
      '  Left = 200'
      '  Top = 100'
      '  Caption = '#39'Sample source'#39
      '  SampleText.Strings = ('
      '    '#39'Test'#39')'
      'end')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'dfm lfm lxl lcf fmx'
    LexerName = 'Delphi resources'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal21: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'operator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BorderTypeBottom = blDot
        BorderColorBottom = clRed
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^\#.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Param'
        StyleName = 'Param'
        TokenType = 4
        Expression = '".*?"'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'operator'
        StyleName = 'operator'
        TokenType = 2
        Expression = '!\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbols'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\|&\$=]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'variable'
        TokenType = 5
        Expression = '^\s*?\w*\s*?='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Block start'
        ConditionList = <
          item
            TagList.Strings = (
              '!IF'
              '!IFDEF'
              '!IFNDEF')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Block end'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '!ENDIF')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Variable'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    Extentions = 
      '/makefile /makefile.gnu /makefile.gcc /makefile.bor /makefile.ms' +
      'c /makefile.vc /makefile.dm /makefile.bcc'
    LexerName = 'Make files'
    LineComment = '#'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnalyzer11: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'uuid'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Keys'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Int const'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end>
    TokenRules = <
      item
        DisplayName = 'UUID'
        StyleName = 'uuid'
        TokenType = 10
        Expression = '[\dA-F]{8}-[\dA-F]{4}'#13#10'-[\dA-F]{4}-[\dA-F]{4}'#13#10'-[\dA-F]{12}'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Int const'
        StyleName = 'Int const'
        TokenType = 5
        Expression = '[-+]?\d'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[=;\[\]\{\}\(\)]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Multiline comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Keys'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__int3264'
              '__int64'
              'aggregatable'
              'allocate'
              'appobject'
              'arrays'
              'async'
              'async_uuid'
              'auto_handle'
              'bindable'
              'boolean'
              'broadcast'
              'byte'
              'byte_count'
              'call_as'
              'callback'
              'char'
              'coclass'
              'code'
              'comm_status'
              'const'
              'context_handle'
              'context_handle_noserialize'
              'context_handle_serialize'
              'control'
              'cpp_quote'
              'custom'
              'decode'
              'default'
              'defaultbind'
              'defaultcollelem'
              'defaultvalue'
              'defaultvtable'
              'dispinterface'
              'displaybind'
              'dllname'
              'double'
              'dual'
              'enable_allocate'
              'encode'
              'endpoint'
              'entry'
              'enum'
              'error_status_t'
              'explicit_handle'
              'fault_status'
              'first_is'
              'float'
              'handle'
              'handle_t'
              'heap'
              'helpcontext'
              'helpfile'
              'helpstring'
              'helpstringcontext'
              'helpstringdll'
              'hidden'
              'hyper'
              'id'
              'idempotent'
              'ignore'
              'iid_is'
              'immediatebind'
              'implicit_handle'
              'import'
              'importlib'
              'in'
              'in_line'
              'include'
              'int'
              'interface'
              'last_is'
              'lcid'
              'length_is'
              'library'
              'licensed'
              'local'
              'long'
              'max_is'
              'maybe'
              'message'
              'midl_pragma'
              'midl_user_allocate'
              'midl_user_free'
              'min_is'
              'module'
              'ms_union'
              'ncacn_at_dsp'
              'ncacn_dnet_nsp'
              'ncacn_http'
              'ncacn_ip_tcp'
              'ncacn_nb_ipx'
              'ncacn_nb_nb'
              'ncacn_nb_tcp'
              'ncacn_np'
              'ncacn_spx'
              'ncacn_vns_spp'
              'ncadg_ip_udp'
              'ncadg_ipx'
              'ncadg_mq'
              'ncalrpc'
              'nocode'
              'nonbrowsable'
              'noncreatable'
              'nonextensible'
              'notify'
              'object'
              'odl'
              'oleautomation'
              'optimize'
              'optional'
              'out'
              'out_of_line'
              'pipe'
              'pointer_default'
              'propget'
              'propput'
              'propputref'
              'ptr'
              'public'
              'range'
              'readonly'
              'ref'
              'represent_as'
              'requestedit'
              'restricted'
              'retval'
              'shape'
              'short'
              'signed'
              'size_is'
              'small'
              'source'
              'strict_context_handle'
              'string'
              'struct'
              'switch'
              'switch_is'
              'switch_type'
              'transmit_as'
              'typedef'
              'uidefault'
              'union'
              'unique'
              'unsigned'
              'user_marshal'
              'usesgetlasterror'
              'v1_enum'
              'vararg'
              'version'
              'void'
              'warning'
              'wchar_t'
              'wire_marshal')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'interface'
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            CondType = tcNotEqual
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'interface')
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = '}'
        GroupFmt = 'Interfaces'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              '}')
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'module'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 12
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'module')
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = '}'
        GroupFmt = 'Modules'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'typedef'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'enum'
              'struct')
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'typedef')
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 3
        BlockEnd = 'typedef end'
        NameFmt = '%e1'
        GroupFmt = '%s2s'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'library'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'library')
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = '}'
        NameFmt = '%s2 %s1'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'typedef 2'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'enum'
              'struct')
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'typedef')
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = 'typedef end'
        NameFmt = '%e1'
        GroupFmt = '%s1s'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'typedef end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2045
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* CORBA IDL sample source  */'
      '#include <sample.idl>'
      '                           '
      'const string TestString = "Hello World";'
      'const long TestLong = 10;'
      ''
      'module TestModule {'
      '  interface DemoInterface {'
      '    boolean HelloWorld(in string Message);'
      '  }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'UUID')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'idl'
    LexerName = 'IDL files'
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal16: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Section'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15658734
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'constant'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^;.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[;=]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Section'
        StyleName = 'Section'
        TokenType = 9
        Expression = '^\[.*?\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        Enabled = False
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Pre {#..}'
        StyleName = 'Preprocessor'
        TokenType = 10
        Expression = '\{\#.*?\}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Constant'
        StyleName = 'constant'
        TokenType = 8
        Expression = '\{.*?\}'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 10
        Expression = '^\s*\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keys'
        StyleName = 'Reserved word'
        NotParent = True
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'adminprivilegesrequired'
              'allowcancelduringinstall'
              'allownoicons'
              'allowrootdirectory'
              'allowuncpath'
              'alwayscreateuninstallicon'
              'alwaysrestart'
              'alwaysshowcomponentslist'
              'alwaysshowdironreadypage'
              'alwaysshowgrouponreadypage'
              'alwaysusepersonalgroup'
              'appcomments'
              'appcontact'
              'appcopyright'
              'appenddefaultdirname'
              'appenddefaultgroupname'
              'appid'
              'appmodifypath'
              'appmutex'
              'appname'
              'apppublisher'
              'apppublisherurl'
              'appreadmefile'
              'appsupporturl'
              'appupdatesurl'
              'appvername'
              'appversion'
              'attribs'
              'backcolor'
              'backcolor2'
              'backcolordirection'
              'backsolid'
              'changesassociations'
              'changesenvironment'
              'components'
              'compression'
              'createappdir'
              'createuninstallregkey'
              'defaultdirname'
              'defaultgroupname'
              'defaultuserinfoname'
              'defaultuserinfoorg'
              'defaultuserinfoserial'
              'description'
              'destdir'
              'destname'
              'direxistswarning'
              'disableappenddir'
              'disabledirpage'
              'disablefinishedpage'
              'disableprogramgrouppage'
              'disablereadymemo'
              'disablereadypage'
              'disablestartupprompt'
              'dontmergeduplicatefiles'
              'enabledirdoesntexistwarning'
              'extradiskspacerequired'
              'filename'
              'flags'
              'flatcomponentslist'
              'groupdescription'
              'infoafterfile'
              'infobeforefile'
              'key'
              'languagedetectionmethod'
              'languages'
              'licensefile'
              'messagesfile'
              'minversion'
              'name'
              'onlybelowversion'
              'OutputBaseFilename'
              'outputdir'
              'password'
              'permissions'
              'privilegesrequired'
              'restartifneededbyrun'
              'root'
              'section'
              'setupiconfile'
              'showcomponentsizes'
              'showlanguagedialog'
              'showtaskstreelines'
              'solidcompression'
              'source'
              'string'
              'subkey'
              'tasks'
              'timestamprounding'
              'timestampsinutc'
              'touchdate'
              'touchtime'
              'type'
              'types'
              'uninstallable'
              'uninstalldisplayicon'
              'uninstalldisplayname'
              'uninstallfilesdir'
              'uninstalliconfile'
              'uninstalliconname'
              'uninstalllogmode'
              'uninstallrestartcomputer'
              'uninstallstyle'
              'updateuninstalllogappname'
              'usepreviousappdir'
              'usepreviousgroup'
              'useprevioussetuptype'
              'useprevioustasks'
              'useprevioususerinfo'
              'userinfopage'
              'valuedata'
              'valuename'
              'valuetype'
              'windowresizable'
              'windowshowcaption'
              'windowstartmaximized'
              'windowvisible'
              'wizardimagebackcolor'
              'wizardimagefile'
              'wizardimagestretch'
              'wizardsmallimagebackcolor'
              'wizardsmallimagefile'
              'wizardstyle')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Section end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Section begin'
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Section end'
        EndOfTextClose = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'Code'
        StartExpression = '(?i)\[code\]'#13#10
        EndExpression = '^\[\w+\]'
        SyntAnalyzer = SyntAnal20
        ToTextEnd = True
      end>
    SampleText.Strings = (
      '[Languages]'
      'Name: "english"; MessagesFile: "compiler:Default.isl"'
      'Name: "german"; MessagesFile: "compiler:Languages\German.isl"'
      ''
      '[Tasks]'
      
        'Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; Grou' +
        'pDescription: "{cm:AdditionalIcons}"'
      ''
      '[Files]'
      
        'Source: "{app}\Plugins\wlx\SynWrite\HL\C#.acp"; DestDir: "{app}\' +
        'Plugins\wlx\SynWrite\HL"; MinVersion: 0.0,5.0; Flags: restartrep' +
        'lace overwritereadonly uninsrestartdelete ignoreversion uninsrem' +
        'overeadonly '
      
        'Source: "{app}\Plugins\wlx\SynWrite\HL\C++.acp"; DestDir: "{app}' +
        '\Plugins\wlx\SynWrite\HL"; MinVersion: 0.0,5.0; Flags: restartre' +
        'place overwritereadonly uninsrestartdelete ignoreversion uninsre' +
        'movereadonly '
      ''
      '#sub AddIconFiles'
      '#expr GetFileVars'
      
        'Source: {#Copy (IconsMask, 0, RPos ("\", IconsMask)) + CurrentFi' +
        'leName}; DestDir: {app}; DestName: {#IconName}; Components: icon' +
        's\{#CurrentName}; Flags: ignoreversion'
      '#endsub '
      ''
      '[Code]'
      '  #ifdef Code'
      'function TT(a: Integer): Integer;'
      'begin'
      '  Result:= Ord('#39'Test'#39'[a]);'
      'end;'
      '  #endif'
      ''
      '[CustomMessages]'
      'ru.Msg=Ru'
      'ru.M2=Ru')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Constant'
      'Section'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'iss'
    LexerName = 'Inno Setup'
    SkipSpaces = False
    LineComment = ';'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal57: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Identifier Ext'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol Ext'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BorderTypeBottom = blWavyLine
        BorderColorBottom = clSilver
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Keyword'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clInactiveCaption
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Function Ext'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 13266272
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BorderTypeBottom = blWavyLine
        BorderColorBottom = clSilver
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Expression'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 33023
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clInactiveCaptionText
        FormatType = ftColor
      end
      item
        DisplayName = 'Current Block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clLime
        BorderTypeLeft = blSolid
        BorderTypeTop = blSolid
        BorderTypeRight = blSolid
        BorderTypeBottom = blSolid
      end
      item
        DisplayName = 'Test Style Main'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Test Style Sub'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clLime
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Marked Block - Range'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15925237
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree (Main, Color)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 14844018
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Tree (Main, Black)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Tree (Main, Alias)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 1482313
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Tree (Regular, Color)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 14844018
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tree (Regular, Black)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tree (Regular, Alias)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 1550414
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Collapsed'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 13610927
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftBackGround
        BorderTypeLeft = blSolid2
        BorderColorLeft = 4364526
      end
      item
        DisplayName = 'Alias'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 2086500
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Table'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 5
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 2'
        StyleName = 'String'
        TokenType = 5
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 3'
        StyleName = 'String'
        TokenType = 5
        Expression = '`.*?(`|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '--.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment Ext'
        Enabled = False
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\(\*.*?(\(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol 2'
        StyleName = 'Symbol'
        TokenType = 4
        Expression = '!=|<>|\^=|<>|<=|>=|\(\+\)|\(\-\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 4
        Expression = '[/,\.;:\(\)=<>\+\-\*]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier'
        StyleName = 'Identifier'
        TokenType = 3
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier Ext'
        StyleName = 'Identifier Ext'
        TokenType = 3
        Expression = '(?r)\[[\w\x20]*\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier Qualified'
        Enabled = False
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*(\.[a-z_]\w*){1,3}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier Sub'
        Enabled = False
        StyleName = 'Test Style Sub'
        TokenType = 9
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier Main'
        Enabled = False
        StyleName = 'Test Style Main'
        StrictParent = True
        TokenType = 8
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Identifier Qualified Ext'
        Enabled = False
        StyleName = 'Identifier Ext'
        TokenType = 3
        Expression = '(?r)(\[[\w\x20]*\]|[a-z_]\c*)*(\.(\[[\w\x20]*\]|[a-z_]\c*)){1,3}'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keyword'
        StyleName = 'Keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'all'
              'and'
              'any'
              'as'
              'between'
              'by'
              'concat'
              'distinct'
              'exists'
              'from'
              'full'
              'grant'
              'group'
              'having'
              'in'
              'index'
              'inner'
              'is'
              'join'
              'left'
              'like'
              'max'
              'min'
              'not'
              'null'
              'on'
              'option'
              'or'
              'order'
              'outer'
              'select'
              'some'
              'table'
              'union'
              'view'
              'where')
            TokenTypes = 8
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Expression'
        StyleName = 'Expression'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'case'
              'else'
              'end'
              'then'
              'when')
            TokenTypes = 8
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Function'
        StyleName = 'Function'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'avg'
              'bitand'
              'count'
              'date_format'
              'decode'
              'substr'
              'timediff'
              'userenv')
            TokenTypes = 8
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Function Ex'
        StyleName = 'Function Ext'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'bitand'
              'decode'
              'userenv')
            TokenTypes = 8192
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Symbol Ext'
        StyleName = 'Symbol Ext'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '(-)'
              '(+)')
            TokenTypes = 16
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Bracket Close'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 16
          end>
        BlockEnd = 'Bracket Open'
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Subquery Open'
        StyleName = 'Current Block'
        ConditionList = <
          item
            TagList.Strings = (
              'select')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 16
          end>
        BlockEnd = 'Subquery Close'
        NotCollapsed = True
        DisplayInTree = False
        NameFmt = 'subquery'
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'section end SELECT'
        BlockName = 'section SELECT'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              'from'
              'group'
              'having'
              'order'
              'select'
              'union')
            TokenTypes = 20
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'section SELECT'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'section end WHERE'
        BlockName = 'section WHERE'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              'from'
              'group'
              'having'
              'order'
              'select'
              'union')
            TokenTypes = 20
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'section WHERE'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Alias'
        StyleName = 'Alias'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 8
          end
          item
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        TokenType = 8
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Table'
        StyleName = 'Table'
        BlockName = 'section FROM'
        StrictParent = True
        BlockType = btTagDetect
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 8
          end
          item
            TokenTypes = 8
          end>
        RefToCondEnd = True
        HighlightPos = cpBound
        TokenType = 8
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Bracket Open'
        StyleName = 'Current Block'
        ConditionList = <
          item
            TagList.Strings = (
              'select')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 16
          end>
        NotCollapsed = True
        DisplayInTree = False
        NameFmt = '('
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        IgnoreAsParent = True
      end
      item
        DisplayName = 'section end FROM'
        BlockName = 'section FROM'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              'from'
              'group'
              'having'
              'order'
              'select'
              'union'
              'where')
            TokenTypes = 20
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'section FROM'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'SECTION END'
        BlockName = 'SECTION'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              'from'
              'group'
              'having'
              'order'
              'select'
              'union'
              'where')
            TokenTypes = 20
            IgnoreCase = True
          end
          item
            TokenTypes = 4095
          end>
        BlockOffset = 1
        BlockEnd = 'SECTION'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'STATEMENT END'
        BlockName = 'STATEMENT'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              'select'
              'union')
            TokenTypes = 20
            IgnoreCase = True
          end>
        BlockOffset = 1
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Subquery Close'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 16
          end>
        BlockEnd = 'Subquery Open'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'sub-section end ON'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end>
        BlockOffset = 1
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'SECTION'
        BlockName = 'STATEMENT'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'from'
              'group'
              'having'
              'order'
              'where')
            TokenTypes = 4
            IgnoreCase = True
          end>
        EndOfTextClose = True
        HighlightPos = cpAny
        DynSelectMin = True
        TreeItemStyle = 'Tree (Regular, Color)'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'STATEMENT'
        StyleName = 'Marked Block - Range'
        ConditionList = <
          item
            TagList.Strings = (
              'select'
              'union')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'STATEMENT END'
        EndOfTextClose = True
        NameFmt = '%s0'
        DynHighlight = dhRange
        HighlightPos = cpRange
        DynSelectMin = True
        TreeItemStyle = 'Tree (Main, Black)'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'section SELECT'
        BlockName = 'STATEMENT'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'select')
            TokenTypes = 4
            IgnoreCase = True
          end>
        DisplayInTree = False
        NameFmt = '__SELECT__'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'section FROM'
        BlockName = 'SECTION'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'from')
            TokenTypes = 4
            IgnoreCase = True
          end>
        DisplayInTree = False
        NameFmt = '__FROM__'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'syb-section ON'
        BlockName = 'section FROM'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'on')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'sub-section end ON'
        DisplayInTree = False
        NameFmt = '__ON__'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'section WHERE'
        BlockName = 'SECTION'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'where')
            TokenTypes = 4
            IgnoreCase = True
          end>
        DisplayInTree = False
        NameFmt = '__WHERE__'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Table or Alias'
        StyleName = 'Alias'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 16
          end
          item
            TokenTypes = 8
          end>
        IdentIndex = 1
        HighlightPos = cpBound
        TokenType = 8
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/*Syntax highlighting*/'
      
        'SELECT c.session , c.username ,TIMEDIFF(max(c.datetime) , min(c.' +
        'datetime))'
      
        'FROM  livehelp_domain_user a , livehelp_users b, livehelp_messag' +
        'es c'
      'WHERE a.id_domain = 29 AND'
      '      a.id_user = b.id AND'
      '      CONCAT( b.firstname, '#39' '#39',b.lastname)   = c.username AND'
      '      DATE_FORMAT(c.datetime,'#39'%m/%d/%Y'#39') ='#39'09/21/2006'#39' AND'
      '      (SELECT COUNT(data) from sometable where Fld = '#39'YES'#39') = 6 '
      'GROUP BY c.session'
      'ORDER BY c.session,c.username'
      '')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'KeyWord'
      'Identifier'
      'Symbol'
      'String'
      'Integer'
      'Float'
      'Table'
      'Field')
    Gramma.Gramma = 'Skip = <Comment>;'#13#10
    MarkedBlockStyle = 'Marked block'
    CurrentLineStyle = 'Current Line'
    CollapseStyleName = 'Collapsed'
    Extentions = 'sql'
    LexerName = 'SQL'
    SkipSpaces = False
    RestartFromLineStart = True
    LineComment = '--'
    AlwaysSyncBlockAnal = True
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal63: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
        BorderColorLeft = clRed
        BorderColorTop = clNavy
        BorderColorRight = clMaroon
        BorderColorBottom = clRed
        MultiLineBorder = True
      end
      item
        DisplayName = 'Reserved PL/SQL word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'SQL Functions'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'SQL*Plus Meta Commands'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Datatypes'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsUnderline]
      end
      item
        DisplayName = 'Predefined Exceptions'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Default Oracle Packages'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatFlags = [ffBold, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Public Package Procedure'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clRed
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clBtnFace
        FormatType = ftColor
        BorderTypeLeft = blDot
        BorderColorLeft = clMaroon
        BorderTypeTop = blDot
        BorderColorTop = clMaroon
        BorderTypeRight = blDot
        BorderColorRight = clMaroon
        BorderTypeBottom = blDot
        BorderColorBottom = clMaroon
      end
      item
        DisplayName = 'Current function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16777205
        FormatType = ftBackGround
        MultiLineBorder = True
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 13369080
        FormatType = ftBackGround
      end
      item
        DisplayName = '()'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
        BgColor = clBtnFace
        BorderTypeLeft = blDot
        BorderTypeTop = blDot
        BorderTypeRight = blDot
        BorderTypeBottom = blDot
      end
      item
        DisplayName = 'Big Bold (tree)'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Times New Roman'
        Font.Style = [fsBold]
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Group (tree)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Function (tree)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Data Dictionary'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Public Package Procedure'
        StyleName = 'Public Package Procedure'
        TokenType = 2
        Expression = 'DBMS_\w+?\.\w+'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 2'
        StyleName = 'String'
        TokenType = 4
        Expression = 'q'#39'<.*?(>'#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Reserv. name'
        StyleName = 'Reserved word'
        Expression = '\b(update|nowait)\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)'#39'(.|\'#39'\'#39')*?('#39'|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '--.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+\.?\d+e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-\|%\*]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Reserved words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ACCESS'
              'ADD'
              'ALL'
              'ALTER'
              'AND'
              'ANY'
              'AS'
              'ASC'
              'AUDIT'
              'BETWEEN'
              'BY'
              'CHAR'
              'CHECK'
              'CLUSTER'
              'COLUMN'
              'COMMENT'
              'COMPRESS'
              'CONNECT'
              'CONNECT_BY_ISCYCLE'
              'CONNECT_BY_ISLEAF'
              'CREATE'
              'CURRENT'
              'CURRVAL '
              'DATE'
              'DECIMAL'
              'DEFAULT'
              'DELETE'
              'DESC'
              'DISTINCT'
              'DROP'
              'ELSE'
              'EXCLUSIVE'
              'EXISTS'
              'FILE'
              'FLOAT'
              'FOR'
              'FROM'
              'GRANT'
              'GROUP'
              'HAVING'
              'IDENTIFIED'
              'IMMEDIATE'
              'IN'
              'INCREMENT'
              'INDEX'
              'INITIAL'
              'INSERT'
              'INTEGER'
              'INTERSECT'
              'INTO'
              'IS'
              'JOIN'
              'LEFT'
              'LEVEL'
              'LIKE'
              'LOCK'
              'LONG'
              'MAXEXTENTS'
              'MERGE'
              'MINUS'
              'MLSLABEL'
              'MODE'
              'MODIFY'
              'NEXTVAL'
              'NOAUDIT'
              'NOCOMPRESS'
              'NOT'
              'NOWAIT'
              'NULL'
              'NUMBER'
              'OBJECT_ID'
              'OBJECT_VALUE'
              'OF'
              'OFFLINE'
              'ON'
              'ONLINE'
              'OPTION'
              'OR'
              'ORA_ROWSCN'
              'ORDER'
              'PCTFREE'
              'PRIOR'
              'PRIVILEGES'
              'PUBLIC'
              'RAW'
              'RENAME'
              'RESOURCE'
              'REVOKE'
              'RIGHT'
              'ROW'
              'ROWID'
              'ROWNUM'
              'ROWS'
              'SELECT'
              'SESSION'
              'SET'
              'SHARE'
              'SIZE'
              'SMALLINT'
              'START'
              'SUCCESSFUL'
              'SYNONYM'
              'SYSDATE'
              'TABLE'
              'TABLESPACE'
              'THEN'
              'TO'
              'TRIGGER'
              'UID'
              'UNION'
              'UNIQUE'
              'UPDATE'
              'USER'
              'VALIDATE'
              'VALUES'
              'VARCHAR'
              'VARCHAR2'
              'VIEW'
              'WHENEVER'
              'WHERE'
              'WITH'
              'XMLDATA')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'PL/SQL Reserved words'
        StyleName = 'Reserved PL/SQL word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ALL'
              'ALTER'
              'AND'
              'ANY'
              'ARRAY'
              'AS'
              'ASC'
              'AT'
              'AUTHID'
              'AVG'
              'BEGIN'
              'BETWEEN'
              'BINARY_INTEGER'
              'BODY'
              'BOOLEAN'
              'BULK'
              'BY'
              'CASE'
              'CHAR'
              'CHAR_BASE'
              'CHECK'
              'CLOSE'
              'CLUSTER'
              'COALESCE'
              'COLLECT'
              'COMMENT'
              'COMMIT'
              'COMPRESS'
              'CONNECT'
              'CONSTANT'
              'CREATE'
              'CURRENT'
              'CURRVAL'
              'CURSOR'
              'DATE'
              'DAY'
              'DECIMAL'
              'DECLARE'
              'DEFAULT'
              'DELETE'
              'DELETING'
              'DESC'
              'DISTINCT'
              'DO'
              'DROP'
              'ELSE'
              'ELSIF'
              'END'
              'EXCEPTION'
              'EXCLUSIVE'
              'EXECUTE'
              'EXISTS'
              'EXIT'
              'EXTENDS'
              'EXTRACT'
              'FALSE'
              'FETCH'
              'FLOAT'
              'FOR'
              'FORALL'
              'FROM'
              'FUNCTION'
              'GOTO'
              'GROUP'
              'HAVING'
              'HEAP'
              'HOUR'
              'IF'
              'IMMEDIATE'
              'IN'
              'INDEX'
              'INDICATOR'
              'INSERT'
              'INSERTING'
              'INTEGER'
              'INTERFACE'
              'INTERSECT'
              'INTERVAL'
              'INTO'
              'IS'
              'ISOLATION'
              'JAVA'
              'LEVEL'
              'LIKE'
              'LIMITED'
              'LOCK'
              'LONG'
              'LOOP'
              'MAX'
              'MIN'
              'MINUS'
              'MINUTE'
              'MLSLABEL'
              'MOD'
              'MODE'
              'MONTH'
              'NATURAL'
              'NATURALN'
              'NEW'
              'NEXTVAL'
              'NOCOPY'
              'NOT'
              'NOWAIT'
              'NULL'
              'NULLIF'
              'NUMBER'
              'NUMBER_BASE'
              'OCIROWID'
              'OF'
              'ON'
              'OPAQUE'
              'OPEN'
              'OPERATOR'
              'OPTION'
              'OR'
              'ORDER'
              'ORGANIZATION'
              'OTHERS'
              'OUT'
              'PACKAGE'
              'PARTITION'
              'PCTFREE'
              'PLS_INTEGER'
              'POSITIVE'
              'POSITIVEN'
              'PRAGMA'
              'PRIOR'
              'PRIVATE'
              'PROCEDURE'
              'PUBLIC'
              'RAISE'
              'RANGE'
              'RAW'
              'REAL'
              'RECORD'
              'REF'
              'RELEASE'
              'RETURN'
              'REVERSE'
              'ROLLBACK'
              'ROW'
              'ROWID'
              'ROWNUM'
              'ROWTYPE'
              'SAVEPOINT'
              'SECOND'
              'SELECT'
              'SEPARATE'
              'SET'
              'SHARE'
              'SMALLINT'
              'SPACE'
              'SQL'
              'SQLCODE'
              'SQLERRM'
              'START'
              'STDDEV'
              'SUBTYPE'
              'SUCCESSFUL'
              'SUM'
              'SYNONYM'
              'SYSDATE'
              'TABLE'
              'THEN'
              'TIME'
              'TIMESTAMP'
              'TIMEZONE_ABBR'
              'TIMEZONE_HOUR'
              'TIMEZONE_MINUTE'
              'TIMEZONE_REGION'
              'TO'
              'TRIGGER'
              'TRUE'
              'TYPE'
              'UID'
              'UNION'
              'UNIQUE'
              'UPDATE'
              'UPDATEING'
              'USE'
              'USER'
              'VALIDATE'
              'VALUES'
              'VARCHAR'
              'VARCHAR2'
              'VARIANCE'
              'VIEW'
              'WHEN'
              'WHENEVER'
              'WHERE'
              'WHILE'
              'WITH'
              'WORK'
              'WRITE'
              'YEAR'
              'ZONE')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'SQL*Plus Meta Commands'
        StyleName = 'SQL*Plus Meta Commands'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '@'
              '@@'
              'acc'
              'accept'
              'connect'
              'def'
              'define'
              'desc'
              'describe'
              'exec'
              'execute'
              'prompt'
              'rem'
              'remark'
              'set'
              'spo'
              'spool'
              'start'
              'undef'
              'undefine')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'SQL Functions'
        StyleName = 'SQL Functions'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ABS'
              'ACOS'
              'ADD_MONTHS'
              'ASCII'
              'ASCIISTR'
              'ASIN'
              'ATAN'
              'ATAN2'
              'AVG'
              'AVG '
              'BFILENAME'
              'BIN_TO_NUM'
              'BITAND'
              'CARDINALITY'
              'CAST'
              'CEIL'
              'CHARTOROWID'
              'CHR'
              'COALESCE'
              'COLLECT'
              'COMPOSE'
              'CONCAT'
              'CONVERT'
              'CORR '
              'CORR_K'
              'CORR_S'
              'COS'
              'COSH'
              'COUNT '
              'COVAR_POP'
              'COVAR_SAMP '
              'CUME_DIST'
              'CURRENT_DATE'
              'CURRENT_TIMESTAMP'
              'CV'
              'DBTIMEZONE'
              'DECODE'
              'DECOMPOSE'
              'DENSE_RANK'
              'DEPTH'
              'DEREF'
              'DUMP'
              'EMPTY_BLOB, EMPTY_CLOB'
              'EXISTSNODE'
              'EXP'
              'EXTRACT'
              'EXTRACTVALUE'
              'FIRST'
              'FIRST_VALUE '
              'FLOOR'
              'FROM_TZ'
              'GREATEST'
              'GROUP_ID'
              'GROUPING'
              'GROUPING_ID'
              'HEXTORAW'
              'INITCAP'
              'INSTR'
              'ITERATION_NUMBER'
              'LAG'
              'LAST'
              'LAST_DAY'
              'LAST_VALUE '
              'LEAD'
              'LEAST'
              'LENGTH'
              'LN'
              'LNNVL'
              'LOCALTIMESTAMP'
              'LOG'
              'LOWER'
              'LPAD'
              'LTRIM'
              'MAKE_REF'
              'MAX '
              'MEDIAN'
              'MIN '
              'MOD'
              'MONTHS_BETWEEN'
              'NANVL'
              'NEW_TIME'
              'NEXT_DAY'
              'NLS_CHARSET_DECL_LEN'
              'NLS_CHARSET_ID'
              'NLS_CHARSET_NAME'
              'NLS_INITCAP'
              'NLS_LOWER'
              'NLS_UPPER'
              'NLSSORT'
              'NTILE'
              'NULLIF'
              'NUMTODSINTERVAL'
              'NUMTOYMINTERVAL'
              'NVL'
              'NVL2'
              'ORA_HASH'
              'PATH'
              'PERCENT_RANK'
              'PERCENTILE_CONT'
              'PERCENTILE_DISC'
              'POWER'
              'POWERMULTISET'
              'POWERMULTISET_BY_CARDINALITY'
              'PRESENTNNV'
              'PRESENTV'
              'PREVIOUS'
              'RANK'
              'RATIO_TO_REPORT'
              'RAWTOHEX'
              'RAWTONHEX'
              'REF'
              'REFTOHEX'
              'REGEXP_INSTR'
              'REGEXP_REPLACE'
              'REGEXP_SUBSTR'
              'REGR_AVGX'
              'REGR_AVGY'
              'REGR_COUNT'
              'REGR_INTERCEPT'
              'REGR_R2'
              'REGR_SLOPE'
              'REGR_SXY'
              'REGR_SYY'
              'REMAINDER'
              'ROUND'
              'ROUND '
              'ROW_NUMBER'
              'ROWIDTOCHAR'
              'ROWIDTONCHAR'
              'RPAD'
              'RTRIM'
              'SCN_TO_TIMESTAMP'
              'SESSIONTIMEZONE'
              'SET'
              'SIGN'
              'SIN'
              'SINH'
              'SOUNDEX'
              'SQRT'
              'STATS_BINOMIAL_TEST'
              'STATS_CROSSTAB'
              'STATS_F_TEST'
              'STATS_KS_TEST'
              'STATS_MODE'
              'STATS_MW_TEST'
              'STATS_ONE_WAY_ANOVA'
              'STATS_T_TEST_INDEP'
              'STATS_T_TEST_INDEPU'
              'STATS_T_TEST_ONE'
              'STATS_T_TEST_PAIRED'
              'STATS_WSR_TEST'
              'STDDEV '
              'STDDEV_POP '
              'STDDEV_SAMP '
              'SUBSTR'
              'SUM '
              'SYS_CONNECT_BY_PATH'
              'SYS_CONTEXT'
              'SYS_DBURIGEN'
              'SYS_EXTRACT_UTC'
              'SYS_GUID'
              'SYS_TYPEID'
              'SYS_XMLAGG'
              'SYS_XMLGEN'
              'SYSDATE'
              'SYSTIMESTAMP'
              'TAN'
              'TANH'
              'TIMESTAMP_TO_SCN'
              'TO_BINARY_DOUBLE'
              'TO_BINARY_FLOAT'
              'TO_CHAR '
              'TO_CLOB'
              'TO_DATE'
              'TO_DSINTERVAL'
              'TO_LOB'
              'TO_MULTI_BYTE'
              'TO_NCHAR '
              'TO_NCLOB'
              'TO_NUMBER'
              'TO_SINGLE_BYTE'
              'TO_TIMESTAMP'
              'TO_TIMESTAMP_TZ'
              'TO_YMINTERVAL'
              'TRANSLATE'
              'TREAT'
              'TRIM'
              'TRUNC '
              'TZ_OFFSET'
              'UID'
              'UNISTR'
              'UPDATEXML'
              'UPPER'
              'USER'
              'USERENV'
              'USING'
              'VALUE'
              'VAR_POP'
              'VAR_SAMP '
              'VARIANCE'
              'VSIZE'
              'WIDTH_BUCKET'
              'XMLAGG'
              'XMLCOLATTVAL'
              'XMLCONCAT'
              'XMLFOREST'
              'XMLSEQUENCE'
              'XMLTRANSFORM')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Default Oracle Packages'
        StyleName = 'Default Oracle Packages'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'outln_pkg'
              'plitblm'
              'raise_application_error'
              'sdo_cs'
              'sdo_geom'
              'sdo_lrs'
              'sdo_migrate'
              'sdo_tune'
              'set_transaction_use'
              'standard'
              'updating'
              'utl_coll'
              'utl_encode'
              'utl_file'
              'utl_http'
              'utl_inaddr'
              'utl_pg'
              'utl_raw'
              'utl_ref'
              'utl_smtp'
              'utl_tcp'
              'utl_url')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Predefined Exceptions'
        StyleName = 'Predefined Exceptions'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'access_into_null'
              'collection_is_null'
              'cursor_already_open'
              'dbms_lob.access_error'
              'dbms_lob.invalid_directory'
              'dbms_lob.noexist_directory'
              'dbms_lob.nopriv_directory'
              'dbms_lob.open_toomany'
              'dbms_lob.operation_failed'
              'dbms_lob.unopened_file'
              'dbms_sql.inconsistent_type'
              'dup_val_on_index'
              'invalid_cursor'
              'invalid_number'
              'login_denied'
              'no_data_found'
              'not_logged_on'
              'others'
              'program_error'
              'storage_error'
              'subscript_beyond_count'
              'subscript_outside_limit'
              'timeout_on_resource'
              'too_many_rows'
              'utl_file.internal_error'
              'utl_file.invalid_filehandle'
              'utl_file.invalid_mode'
              'utl_file.invalid_operation'
              'utl_file.invalid_path'
              'utl_file.read_error'
              'utl_file.write_error'
              'value_error'
              'zero_divide')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Datatypes'
        StyleName = 'Datatypes'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'BFILE'
              'BINARY_DOUBLE'
              'BINARY_FLOAT'
              'BINARY_INTEGER'
              'BLOB'
              'BOOLEAN'
              'BYTE'
              'CHAR'
              'CHARACTER'
              'CLOB'
              'DATE'
              'DEC'
              'DECIMAL'
              'DOUBLE '
              'FLOAT'
              'INT'
              'INTEGER'
              'INTERVAL'
              'LONG'
              'LONG RAW'
              'NATURAL'
              'NATURALN'
              'NCHAR'
              'NCLOB'
              'NUMBER'
              'NUMERIC'
              'NVARCHAR2'
              'PLS_INTEGER'
              'POSITIVE'
              'POSITIVEN'
              'PRECISION'
              'RAW'
              'REAL'
              'RECORD'
              'ROWID'
              'SIGNTYPE'
              'SMALLINT'
              'STRING'
              'TABLE'
              'TIMESTAMP'
              'UROWID'
              'VARCHAR'
              'VARCHAR2'
              'VARRAY')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Comment start'
        BlockName = 'Comment start'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '--  ...  --'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1021
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'package body'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'body')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              ''
              'package')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 2
        BlockEnd = 'package end'
        NameFmt = '%s2 %s1 %s0 '
        HighlightPos = cpAny
        TreeItemStyle = 'Big Bold (tree)'
        TreeItemImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'package end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'constant start'
        BlockName = 'package body'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'constant')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 4
          end>
        BlockOffset = 1
        BlockEnd = 'constant end'
        NotCollapsed = True
        NameFmt = '%s1 %s-1'
        GroupFmt = 'Constants'
        HighlightPos = cpAny
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 4
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'constant end'
        BlockName = 'constant start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'exception start'
        BlockName = 'block start'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'exception')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'exception end'
        NameFmt = '%s0 %s-2'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'exception end'
        BlockName = 'exception start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Case start'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'case')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Case end'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CancelNextRules = True
        DrawStaple = True
        IgnoreAsParent = False
        AutoCloseText = 'END CASE;'
      end
      item
        DisplayName = 'Case end'
        BlockName = 'Case start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'if start'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'if end'
        NameFmt = '%sz0'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CancelNextRules = True
        DrawStaple = True
        CollapseFmt = '%sz0'
        IgnoreAsParent = False
        AutoCloseText = 'END IF;'
      end
      item
        DisplayName = 'if end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'block start'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'begin')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'block end'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CancelNextRules = True
        DrawStaple = True
        IgnoreAsParent = False
        AutoCloseText = 'END ;'
      end
      item
        DisplayName = 'block end'
        BlockName = 'block start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function start'
        StyleName = 'Current function'
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockEnd = 'function end identifier'
        Highlight = True
        DynHighlight = dhRange
        HighlightPos = cpRange
        DrawStaple = True
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Function (tree)'
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function end identifier'
        BlockName = 'function start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        SameIdent = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function end'
        BlockName = 'function start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'function start'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '( DML'
        BlockName = 'DML start'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ') DML'
        DisplayInTree = False
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ') DML'
        BlockName = 'DML start'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'DML start'
        BlockName = 'DML start'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'delete'
              'insert'
              'merge'
              'open'
              'select'
              'update')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'DML end'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 6
        IgnoreAsParent = False
      end
      item
        DisplayName = 'DML end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              ';')
            TokenTypes = 8
          end>
        BlockEnd = 'DML start'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'For start'
        StyleName = 'Current block'
        StatesAdd = 1
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'for'
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Loop end'
        NameFmt = '%sz0'
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%sz0'
        IgnoreAsParent = False
        AutoCloseText = 'END LOOP;'
      end
      item
        DisplayName = 'Loop start'
        StyleName = 'Current block'
        StatesAbsent = 1
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Loop end 2'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CancelNextRules = True
        DrawStaple = True
        IgnoreAsParent = False
        AutoCloseText = 'END LOOP;'
      end
      item
        DisplayName = 'Reset "for start"'
        StatesRemove = 1
        StatesPresent = 1
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Loop end'
        BlockName = 'For start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Loop end 2'
        BlockName = 'Loop start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Function Separator'
        StyleName = 'Function separator'
        BlockName = 'package body'
        StrictParent = True
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = '()'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '( ... )'
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        BlockEnd = '('
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Type start'
        BlockName = 'package body'
        StrictParent = True
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'type')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'Type end'
        NameFmt = '%s1'
        GroupFmt = 'Types'
        HighlightPos = cpAny
        GrammaRuleName = 'type_declaration'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 3
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Type end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Data Dictionary'
        StyleName = 'Data Dictionary'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '_all_instantiation_ddl'
              '_all_repextensions'
              '_all_repsites_new'
              '_all_sqlset_statements_only'
              '_all_sqlset_statements_phv'
              '_all_sqlset_statistics_only'
              'adm_rlmgr_privileges'
              'alert_type'
              'all_all_tables'
              'all_apply'
              'all_apply_conflict_columns'
              'all_apply_dml_handlers'
              'all_apply_enqueue'
              'all_apply_error'
              'all_apply_execute'
              'all_apply_key_columns'
              'all_apply_parameters'
              'all_apply_progress'
              'all_apply_table_columns'
              'all_arguments'
              'all_associations'
              'all_audit_policies'
              'all_audit_policy_columns'
              'all_aw_ac'
              'all_aw_ac_10g'
              'all_aw_cube_agg_levels'
              'all_aw_cube_agg_measures'
              'all_aw_cube_agg_plans'
              'all_aw_cube_enabled_hiercombo'
              'all_aw_cube_enabled_views'
              'all_aw_dim_enabled_views'
              'all_aw_load_cube_dims'
              'all_aw_load_cube_filters'
              'all_aw_load_cube_measures'
              'all_aw_load_cube_parms'
              'all_aw_load_cubes'
              'all_aw_load_dim_filters'
              'all_aw_load_dim_parms'
              'all_aw_load_dimensions'
              'all_aw_obj'
              'all_aw_prop'
              'all_aw_prop_name'
              'all_aw_ps'
              'all_aws'
              'all_base_table_mviews'
              'all_capture'
              'all_capture_extra_attributes'
              'all_capture_parameters'
              'all_capture_prepared_database'
              'all_capture_prepared_schemas'
              'all_capture_prepared_tables'
              'all_catalog'
              'all_cluster_hash_expressions'
              'all_clusters'
              'all_col_comments'
              'all_col_privs'
              'all_col_privs_made'
              'all_col_privs_recd'
              'all_coll_types'
              'all_cons_columns'
              'all_cons_obj_columns'
              'all_constraints'
              'all_context'
              'all_db_links'
              'all_def_audit_opts'
              'all_dependencies'
              'all_dequeue_queues'
              'all_dim_attributes'
              'all_dim_child_of'
              'all_dim_hierarchies'
              'all_dim_join_key'
              'all_dim_level_key'
              'all_dim_levels'
              'all_dimensions'
              'all_directories'
              'all_encrypted_columns'
              'all_errors'
              'all_evaluation_context_tables'
              'all_evaluation_context_vars'
              'all_evaluation_contexts'
              'all_expfil_aset_functions'
              'all_expfil_attribute_sets'
              'all_expfil_attributes'
              'all_expfil_def_index_params'
              'all_expfil_expression_sets'
              'all_expfil_exprset_stats'
              'all_expfil_index_params'
              'all_expfil_indexes'
              'all_expfil_predtab_attributes'
              'all_external_locations'
              'all_external_tables'
              'all_file_group_export_info'
              'all_file_group_files'
              'all_file_group_tables'
              'all_file_group_tablespaces'
              'all_file_group_versions'
              'all_file_groups'
              'all_geometry_columns'
              'all_histograms'
              'all_ind_columns'
              'all_ind_expressions'
              'all_ind_partitions'
              'all_ind_statistics'
              'all_ind_subpartitions'
              'all_indexes'
              'all_indextype_arraytypes'
              'all_indextype_comments'
              'all_indextype_operators'
              'all_indextypes'
              'all_internal_triggers'
              'all_java_arguments'
              'all_java_classes'
              'all_java_derivations'
              'all_java_fields'
              'all_java_implements'
              'all_java_inners'
              'all_java_layouts'
              'all_java_methods'
              'all_java_ncomps'
              'all_java_resolvers'
              'all_java_throws'
              'all_jobs'
              'all_join_ind_columns'
              'all_libraries'
              'all_load_cube_segwidth'
              'all_lob_partitions'
              'all_lob_subpartitions'
              'all_lob_templates'
              'all_lobs'
              'all_log_group_columns'
              'all_log_groups'
              'all_method_params'
              'all_method_results'
              'all_mp_graph_workspaces'
              'all_mp_parent_workspaces'
              'all_mview_aggregates'
              'all_mview_analysis'
              'all_mview_comments'
              'all_mview_detail_relations'
              'all_mview_joins'
              'all_mview_keys'
              'all_mview_logs'
              'all_mview_refresh_times'
              'all_mviews'
              'all_nested_table_cols'
              'all_nested_tables'
              'all_obj_colattrs'
              'all_object_tables'
              'all_objects'
              'all_olap_alter_session'
              'all_olap_catalog_entity_uses'
              'all_olap_catalogs'
              'all_olap_columns'
              'all_olap_cube_dim_uses'
              'all_olap_cube_measure_dim_uses'
              'all_olap_cube_measure_maps'
              'all_olap_cube_measures'
              'all_olap_cubes'
              'all_olap_descriptor_types'
              'all_olap_descriptors'
              'all_olap_dim_attr_uses'
              'all_olap_dim_attributes'
              'all_olap_dim_hier_level_uses'
              'all_olap_dim_hierarchies'
              'all_olap_dim_level_attr_maps'
              'all_olap_dim_level_attributes'
              'all_olap_dim_levels'
              'all_olap_dimensions'
              'all_olap_entity_desc_uses'
              'all_olap_fact_level_uses'
              'all_olap_foreign_keys'
              'all_olap_function_arguments'
              'all_olap_function_parameters'
              'all_olap_function_usages'
              'all_olap_functions'
              'all_olap_join_key_column_uses'
              'all_olap_key_column_uses'
              'all_olap_keys'
              'all_olap_level_key_column_uses'
              'all_olap_tables'
              'all_olap1_cubes'
              'all_olap2_aggregation_uses'
              'all_olap2_aw_attributes'
              'all_olap2_aw_catalog_measures'
              'all_olap2_aw_catalogs'
              'all_olap2_aw_cube_agg_lvl'
              'all_olap2_aw_cube_agg_meas'
              'all_olap2_aw_cube_agg_op'
              'all_olap2_aw_cube_agg_specs'
              'all_olap2_aw_cube_dim_uses'
              'all_olap2_aw_cube_measures'
              'all_olap2_aw_cubes'
              'all_olap2_aw_dim_hier_lvl_ord'
              'all_olap2_aw_dim_levels'
              'all_olap2_aw_dimensions'
              'all_olap2_aw_phys_obj'
              'all_olap2_aw_phys_obj_prop'
              'all_olap2_aws'
              'all_olap2_awviewcols'
              'all_olap2_awviews'
              'all_olap2_catalog_entity_uses'
              'all_olap2_catalogs'
              'all_olap2_cube_dim_uses'
              'all_olap2_cube_meas_dim_uses'
              'all_olap2_cube_measure_maps'
              'all_olap2_cube_measures'
              'all_olap2_cubes'
              'all_olap2_dim_attr_uses'
              'all_olap2_dim_attributes'
              'all_olap2_dim_hier_level_uses'
              'all_olap2_dim_hierarchies'
              'all_olap2_dim_hiers'
              'all_olap2_dim_level_attr_maps'
              'all_olap2_dim_level_attributes'
              'all_olap2_dim_levels'
              'all_olap2_dim_levels_keymaps'
              'all_olap2_dimensions'
              'all_olap2_entity_desc_uses'
              'all_olap2_entity_ext_parms'
              'all_olap2_entity_parameters'
              'all_olap2_fact_level_uses'
              'all_olap2_fact_table_gid'
              'all_olap2_facttblfctmaps'
              'all_olap2_facttblkeymaps'
              'all_olap2_hier_custom_sort'
              'all_olap2_hierdim_keycol_map'
              'all_olap2_hierdims'
              'all_olap2_join_key_column_uses'
              'all_olap2_level_key_col_uses'
              'all_olap2_listdims'
              'all_olap2_mr_measdimview'
              'all_olap2_mv_cube_agg_levels'
              'all_olap2_mv_cube_agg_measures'
              'all_olap2_rufcttblkymaps'
              'all_olap9i1_hier_dimensions'
              'all_olap9i2_hier_dimensions'
              'all_olapmr_attributes'
              'all_olapmr_dim_attributes'
              'all_olapmr_dim_levels'
              'all_olapmr_dim_levels_keymaps'
              'all_olapmr_dimensions'
              'all_olapmr_facttblfctmaps'
              'all_olapmr_facttblkeymaps'
              'all_opancillary'
              'all_oparguments'
              'all_opbindings'
              'all_operator_comments'
              'all_operators'
              'all_outline_hints'
              'all_outlines'
              'all_part_col_statistics'
              'all_part_histograms'
              'all_part_indexes'
              'all_part_key_columns'
              'all_part_lobs'
              'all_part_tables'
              'all_partial_drop_tabs'
              'all_pending_conv_tables'
              'all_plsql_object_settings'
              'all_policies'
              'all_policy_contexts'
              'all_policy_groups'
              'all_procedures'
              'all_propagation'
              'all_published_columns'
              'all_queue_publishers'
              'all_queue_subscribers'
              'all_queue_tables'
              'all_queues'
              'all_refresh'
              'all_refresh_children'
              'all_refresh_dependencies'
              'all_refs'
              'all_registered_mviews'
              'all_registered_snapshots'
              'all_registry_banners'
              'all_repaudit_attribute'
              'all_repaudit_column'
              'all_repcat'
              'all_repcat_refresh_templates'
              'all_repcat_template_objects'
              'all_repcat_template_parms'
              'all_repcat_template_sites'
              'all_repcat_user_authorizations'
              'all_repcat_user_parm_values'
              'all_repcatlog'
              'all_repcolumn'
              'all_repcolumn_group'
              'all_repconflict'
              'all_repddl'
              'all_repflavor_columns'
              'all_repflavor_objects'
              'all_repflavors'
              'all_repgenerated'
              'all_repgenobjects'
              'all_repgroup'
              'all_repgroup_privileges'
              'all_repgrouped_column'
              'all_repkey_columns'
              'all_repobject'
              'all_repparameter_column'
              'all_reppriority'
              'all_reppriority_group'
              'all_repprop'
              'all_represol_stats_control'
              'all_represolution'
              'all_represolution_method'
              'all_represolution_statistics'
              'all_repschema'
              'all_repsites'
              'all_rewrite_equivalences'
              'all_rlmgr_comprcls_properties'
              'all_rlmgr_event_structs'
              'all_rlmgr_rule_class_status'
              'all_rlmgr_rule_classes'
              'all_rule_set_rules'
              'all_rule_sets'
              'all_rules'
              'all_rulesets'
              'all_scheduler_chain_rules'
              'all_scheduler_chain_steps'
              'all_scheduler_chains'
              'all_scheduler_global_attribute'
              'all_scheduler_job_args'
              'all_scheduler_job_classes'
              'all_scheduler_job_log'
              'all_scheduler_job_run_details'
              'all_scheduler_jobs'
              'all_scheduler_program_args'
              'all_scheduler_programs'
              'all_scheduler_running_chains'
              'all_scheduler_running_jobs'
              'all_scheduler_schedules'
              'all_scheduler_window_details'
              'all_scheduler_window_groups'
              'all_scheduler_window_log'
              'all_scheduler_windows'
              'all_scheduler_wingroup_members'
              'all_sdo_geom_metadata'
              'all_sdo_geor_sysdata'
              'all_sdo_index_info'
              'all_sdo_index_metadata'
              'all_sdo_lrs_metadata'
              'all_sdo_maps'
              'all_sdo_network_constraints'
              'all_sdo_network_metadata'
              'all_sdo_network_user_data'
              'all_sdo_styles'
              'all_sdo_themes'
              'all_sdo_topo_info'
              'all_sdo_topo_metadata'
              'all_sec_relevant_cols'
              'all_secondary_objects'
              'all_sequences'
              'all_services'
              'all_snapshot_logs'
              'all_snapshot_refresh_times'
              'all_snapshots'
              'all_source'
              'all_source_tables'
              'all_sqlj_type_attrs'
              'all_sqlj_type_methods'
              'all_sqlj_types'
              'all_sqlset'
              'all_sqlset_binds'
              'all_sqlset_plans'
              'all_sqlset_references'
              'all_sqlset_statements'
              'all_stored_settings'
              'all_streams_global_rules'
              'all_streams_message_consumers'
              'all_streams_message_rules'
              'all_streams_newly_supported'
              'all_streams_rules'
              'all_streams_schema_rules'
              'all_streams_table_rules'
              'all_streams_transform_function'
              'all_streams_unsupported'
              'all_subpart_col_statistics'
              'all_subpart_histograms'
              'all_subpart_key_columns'
              'all_subpartition_templates'
              'all_subscribed_columns'
              'all_subscribed_tables'
              'all_subscriptions'
              'all_sumdelta'
              'all_summaries'
              'all_summary_aggregates'
              'all_summary_detail_tables'
              'all_summary_joins'
              'all_summary_keys'
              'all_synonyms'
              'all_tab_col_statistics'
              'all_tab_cols'
              'all_tab_columns'
              'all_tab_comments'
              'all_tab_histograms'
              'all_tab_modifications'
              'all_tab_partitions'
              'all_tab_privs'
              'all_tab_privs_made'
              'all_tab_privs_recd'
              'all_tab_statistics'
              'all_tab_stats_history'
              'all_tab_subpartitions'
              'all_tables'
              'all_trigger_cols'
              'all_triggers'
              'all_type_attrs'
              'all_type_methods'
              'all_type_versions'
              'all_types'
              'all_unused_col_tabs'
              'all_updatable_columns'
              'all_users'
              'all_ustats'
              'all_varrays'
              'all_version_hview'
              'all_views'
              'all_warning_settings'
              'all_wm_cons_columns'
              'all_wm_constraints'
              'all_wm_ind_columns'
              'all_wm_ind_expressions'
              'all_wm_locked_tables'
              'all_wm_modified_tables'
              'all_wm_ric_info'
              'all_wm_tab_triggers'
              'all_wm_versioned_tables'
              'all_wm_vt_errors'
              'all_workspace_privs'
              'all_workspace_savepoints'
              'all_workspaces'
              'all_workspaces_internal'
              'all_xml_indexes'
              'all_xml_schemas'
              'all_xml_schemas2'
              'all_xml_tab_cols'
              'all_xml_tables'
              'all_xml_view_cols'
              'all_xml_views'
              'anonymous'
              'anydata'
              'anydataset'
              'anytype'
              'aq$_int_detail_respon_mqtab_f'
              'aq$_int_detail_respon_mqtab_g'
              'aq$_int_detail_respon_mqtab_h'
              'aq$_int_detail_respon_mqtab_i'
              'aq$_int_detail_respon_mqtab_n'
              'aq$_int_detail_respon_mqtab_s'
              'aq$_int_detail_respon_mqtab_t'
              'aq$int_detail_respon_mqtab'
              'aq$int_detail_respon_mqtab_r'
              'aq$int_detail_respon_mqtab_s'
              'aq$internet_users'
              'audit_actions'
              'ausleihe'
              'ausleihe_seq'
              'auswertung'
              'aut_seq'
              'autor'
              'autor_seq'
              'awrdrpt_text_type'
              'awrdrpt_text_type_table'
              'awrrpt_clb_ary'
              'awrrpt_html_type'
              'awrrpt_html_type_table'
              'awrrpt_num_ary'
              'awrrpt_row_type'
              'awrrpt_text_type'
              'awrrpt_text_type_table'
              'awrrpt_vch_ary'
              'awrsqrpt_text_type'
              'awrsqrpt_text_type_table'
              'bestellung'
              'bestellung_seq'
              'buch'
              'buch_pers_vw'
              'cat'
              'change_propagation_sets'
              'change_propagations'
              'change_sets'
              'change_sources'
              'change_tables'
              'circularstring'
              'clu'
              'cluster_rule_type'
              'cluster_type'
              'col'
              'cols'
              'column_privileges'
              'compoundcurve'
              'connectioninterface'
              'cs_srs'
              'ctx_classes'
              'ctx_cls'
              'ctx_ddl'
              'ctx_doc'
              'ctx_index_set_indexes'
              'ctx_index_sets'
              'ctx_object_attribute_lov'
              'ctx_object_attributes'
              'ctx_objects'
              'ctx_output'
              'ctx_parameters'
              'ctx_preference_values'
              'ctx_preferences'
              'ctx_query'
              'ctx_report'
              'ctx_section_groups'
              'ctx_sections'
              'ctx_sqes'
              'ctx_stoplists'
              'ctx_stopwords'
              'ctx_sub_lexers'
              'ctx_thes'
              'ctx_thes_phrases'
              'ctx_thesauri'
              'ctx_trace_values'
              'ctx_ulexer'
              'ctx_user_index_errors'
              'ctx_user_index_objects'
              'ctx_user_index_partitions'
              'ctx_user_index_set_indexes'
              'ctx_user_index_sets'
              'ctx_user_index_sub_lexer_vals'
              'ctx_user_index_sub_lexers'
              'ctx_user_index_values'
              'ctx_user_indexes'
              'ctx_user_pending'
              'ctx_user_preference_values'
              'ctx_user_preferences'
              'ctx_user_section_groups'
              'ctx_user_sections'
              'ctx_user_sqes'
              'ctx_user_stoplists'
              'ctx_user_stopwords'
              'ctx_user_sub_lexers'
              'ctx_user_thes_phrases'
              'ctx_user_thesauri'
              'ctxsys'
              'cursormanagerinterface'
              'curve'
              'curvepolygon'
              'cwm_classify'
              'cwm_exceptions'
              'cwm_olap_cube'
              'cwm_olap_dim_attribute'
              'cwm_olap_dimension'
              'cwm_olap_hierarchy'
              'cwm_olap_level'
              'cwm_olap_level_attribute'
              'cwm_olap_measure'
              'cwm_utility'
              'cwm2_olap_aw_awutil'
              'cwm2_olap_catalog'
              'cwm2_olap_classify'
              'cwm2_olap_cube'
              'cwm2_olap_delete'
              'cwm2_olap_dimension'
              'cwm2_olap_dimension_attribute'
              'cwm2_olap_exceptions'
              'cwm2_olap_export'
              'cwm2_olap_hierarchy'
              'cwm2_olap_level'
              'cwm2_olap_level_attribute'
              'cwm2_olap_manager'
              'cwm2_olap_measure'
              'cwm2_olap_metadata_refresh'
              'cwm2_olap_mr_check_privs'
              'cwm2_olap_mr_security_init'
              'cwm2_olap_mr_session_pop'
              'cwm2_olap_olapapi_enable'
              'cwm2_olap_pc_transform'
              'cwm2_olap_table_map'
              'cwm2_olap_utility'
              'cwm2_olap_validate'
              'cwm2_olap_verify_access'
              'cwm2_security'
              'database_compatible_level'
              'database_export_objects'
              'database_properties'
              'databaseinterface'
              'dataproviderinterface'
              'datapump_object_connect'
              'datapump_pathmap'
              'datapump_paths'
              'datapump_remap_objects'
              'datapump_table_data'
              'datatypeidconstants'
              'dba_2pc_neighbors'
              'dba_2pc_pending'
              'dba_advisor_actions'
              'dba_advisor_commands'
              'dba_advisor_def_parameters'
              'dba_advisor_definitions'
              'dba_advisor_directives'
              'dba_advisor_findings'
              'dba_advisor_journal'
              'dba_advisor_log'
              'dba_advisor_object_types'
              'dba_advisor_objects'
              'dba_advisor_parameters'
              'dba_advisor_parameters_proj'
              'dba_advisor_rationale'
              'dba_advisor_recommendations'
              'dba_advisor_sqla_rec_sum'
              'dba_advisor_sqla_wk_map'
              'dba_advisor_sqla_wk_stmts'
              'dba_advisor_sqlw_colvol'
              'dba_advisor_sqlw_journal'
              'dba_advisor_sqlw_parameters'
              'dba_advisor_sqlw_stmts'
              'dba_advisor_sqlw_sum'
              'dba_advisor_sqlw_tables'
              'dba_advisor_sqlw_tabvol'
              'dba_advisor_sqlw_templates'
              'dba_advisor_tasks'
              'dba_advisor_templates'
              'dba_advisor_usage'
              'dba_alert_arguments'
              'dba_alert_history'
              'dba_all_tables'
              'dba_application_roles'
              'dba_apply'
              'dba_apply_conflict_columns'
              'dba_apply_dml_handlers'
              'dba_apply_enqueue'
              'dba_apply_error'
              'dba_apply_execute'
              'dba_apply_instantiated_global'
              'dba_apply_instantiated_objects'
              'dba_apply_instantiated_schemas'
              'dba_apply_key_columns'
              'dba_apply_object_dependencies'
              'dba_apply_parameters'
              'dba_apply_progress'
              'dba_apply_spill_txn'
              'dba_apply_table_columns'
              'dba_apply_value_dependencies'
              'dba_aq_agent_privs'
              'dba_aq_agents'
              'dba_arguments'
              'dba_associations'
              'dba_audit_exists'
              'dba_audit_object'
              'dba_audit_policies'
              'dba_audit_policy_columns'
              'dba_audit_session'
              'dba_audit_statement'
              'dba_audit_trail'
              'dba_auto_segadv_ctl'
              'dba_auto_segadv_summary'
              'dba_aw_obj'
              'dba_aw_prop'
              'dba_aw_ps'
              'dba_aws'
              'dba_base_table_mviews'
              'dba_blockers'
              'dba_cacheable_objects'
              'dba_cacheable_objects_base'
              'dba_cacheable_tables'
              'dba_capture'
              'dba_capture_extra_attributes'
              'dba_capture_parameters'
              'dba_capture_prepared_database'
              'dba_capture_prepared_schemas'
              'dba_capture_prepared_tables'
              'dba_catalog'
              'dba_change_notification_regs'
              'dba_clu_columns'
              'dba_cluster_hash_expressions'
              'dba_clusters'
              'dba_col_comments'
              'dba_col_privs'
              'dba_coll_types'
              'dba_common_audit_trail'
              'dba_connect_role_grantees'
              'dba_cons_columns'
              'dba_cons_obj_columns'
              'dba_constraints'
              'dba_context'
              'dba_cpu_usage_statistics'
              'dba_data_files'
              'dba_datapump_jobs'
              'dba_datapump_sessions'
              'dba_db_links'
              'dba_ddl_locks'
              'dba_dependencies'
              'dba_dim_attributes'
              'dba_dim_child_of'
              'dba_dim_hierarchies'
              'dba_dim_join_key'
              'dba_dim_level_key'
              'dba_dim_levels'
              'dba_dimensions'
              'dba_directories'
              'dba_dml_locks'
              'dba_dmt_free_space'
              'dba_dmt_used_extents'
              'dba_enabled_aggregations'
              'dba_enabled_traces'
              'dba_encrypted_columns'
              'dba_epg_dad_authorization'
              'dba_errors'
              'dba_evaluation_context_tables'
              'dba_evaluation_context_vars'
              'dba_evaluation_contexts'
              'dba_exp_files'
              'dba_exp_objects'
              'dba_exp_version'
              'dba_export_objects'
              'dba_extents'
              'dba_external_locations'
              'dba_external_tables'
              'dba_feature_usage_statistics'
              'dba_fga_audit_trail'
              'dba_file_group_export_info'
              'dba_file_group_files'
              'dba_file_group_tables'
              'dba_file_group_tablespaces'
              'dba_file_group_versions'
              'dba_file_groups'
              'dba_free_space'
              'dba_free_space_coalesced'
              'dba_geometry_columns'
              'dba_global_context'
              'dba_high_water_mark_statistics'
              'dba_hist_active_sess_history'
              'dba_hist_baseline'
              'dba_hist_bg_event_summary'
              'dba_hist_buffer_pool_stat'
              'dba_hist_buffered_queues'
              'dba_hist_buffered_subscribers'
              'dba_hist_comp_iostat'
              'dba_hist_cr_block_server'
              'dba_hist_current_block_server'
              'dba_hist_database_instance'
              'dba_hist_datafile'
              'dba_hist_db_cache_advice'
              'dba_hist_dlm_misc'
              'dba_hist_enqueue_stat'
              'dba_hist_event_name'
              'dba_hist_filemetric_history'
              'dba_hist_filestatxs'
              'dba_hist_inst_cache_transfer'
              'dba_hist_instance_recovery'
              'dba_hist_java_pool_advice'
              'dba_hist_latch'
              'dba_hist_latch_children'
              'dba_hist_latch_misses_summary'
              'dba_hist_latch_name'
              'dba_hist_latch_parent'
              'dba_hist_librarycache'
              'dba_hist_log'
              'dba_hist_metric_name'
              'dba_hist_mttr_target_advice'
              'dba_hist_optimizer_env'
              'dba_hist_osstat'
              'dba_hist_osstat_name'
              'dba_hist_parameter'
              'dba_hist_parameter_name'
              'dba_hist_pga_target_advice'
              'dba_hist_pgastat'
              'dba_hist_process_mem_summary'
              'dba_hist_resource_limit'
              'dba_hist_rowcache_summary'
              'dba_hist_rule_set'
              'dba_hist_seg_stat'
              'dba_hist_seg_stat_obj'
              'dba_hist_service_name'
              'dba_hist_service_stat'
              'dba_hist_service_wait_class'
              'dba_hist_sess_time_stats'
              'dba_hist_sessmetric_history'
              'dba_hist_sga'
              'dba_hist_sga_target_advice'
              'dba_hist_sgastat'
              'dba_hist_shared_pool_advice'
              'dba_hist_snap_error'
              'dba_hist_snapshot'
              'dba_hist_sql_bind_metadata'
              'dba_hist_sql_plan'
              'dba_hist_sql_summary'
              'dba_hist_sql_workarea_hstgrm'
              'dba_hist_sqlbind'
              'dba_hist_sqlstat'
              'dba_hist_sqltext'
              'dba_hist_stat_name'
              'dba_hist_streams_apply_sum'
              'dba_hist_streams_capture'
              'dba_hist_streams_pool_advice'
              'dba_hist_sys_time_model'
              'dba_hist_sysmetric_history'
              'dba_hist_sysmetric_summary'
              'dba_hist_sysstat'
              'dba_hist_system_event'
              'dba_hist_tablespace_stat'
              'dba_hist_tbspc_space_usage'
              'dba_hist_tempfile'
              'dba_hist_tempstatxs'
              'dba_hist_thread'
              'dba_hist_undostat'
              'dba_hist_waitclassmet_history'
              'dba_hist_waitstat'
              'dba_hist_wr_control'
              'dba_histograms'
              'dba_ias_gen_stmts'
              'dba_ias_objects'
              'dba_ias_sites'
              'dba_ias_templates'
              'dba_ind_columns'
              'dba_ind_expressions'
              'dba_ind_partitions'
              'dba_ind_statistics'
              'dba_ind_subpartitions'
              'dba_indexes'
              'dba_indextype_arraytypes'
              'dba_indextype_comments'
              'dba_indextype_operators'
              'dba_indextypes'
              'dba_internal_triggers'
              'dba_java_arguments'
              'dba_java_classes'
              'dba_java_derivations'
              'dba_java_fields'
              'dba_java_implements'
              'dba_java_inners'
              'dba_java_layouts'
              'dba_java_methods'
              'dba_java_ncomps'
              'dba_java_policy'
              'dba_java_resolvers'
              'dba_java_throws'
              'dba_jobs'
              'dba_jobs_running'
              'dba_join_ind_columns'
              'dba_kgllock'
              'dba_libraries'
              'dba_lmt_free_space'
              'dba_lmt_used_extents'
              'dba_lob_partitions'
              'dba_lob_subpartitions'
              'dba_lob_templates'
              'dba_lobs'
              'dba_lock'
              'dba_lock_internal'
              'dba_locks'
              'dba_log_group_columns'
              'dba_log_groups'
              'dba_logmnr_log'
              'dba_logmnr_purged_log'
              'dba_logmnr_session'
              'dba_logstdby_events'
              'dba_logstdby_history'
              'dba_logstdby_log'
              'dba_logstdby_not_unique'
              'dba_logstdby_parameters'
              'dba_logstdby_progress'
              'dba_logstdby_skip'
              'dba_logstdby_skip_transaction'
              'dba_logstdby_unsupported'
              'dba_method_params'
              'dba_method_results'
              'dba_mview_aggregates'
              'dba_mview_analysis'
              'dba_mview_comments'
              'dba_mview_detail_relations'
              'dba_mview_joins'
              'dba_mview_keys'
              'dba_mview_log_filter_cols'
              'dba_mview_logs'
              'dba_mview_refresh_times'
              'dba_mviews'
              'dba_nested_table_cols'
              'dba_nested_tables'
              'dba_obj_audit_opts'
              'dba_obj_colattrs'
              'dba_object_size'
              'dba_object_tables'
              'dba_objects'
              'dba_olap_catalog_entity_uses'
              'dba_olap_catalogs'
              'dba_olap_columns'
              'dba_olap_cube_dim_uses'
              'dba_olap_cube_measure_dim_uses'
              'dba_olap_cube_measure_maps'
              'dba_olap_cube_measures'
              'dba_olap_cubes'
              'dba_olap_descriptor_types'
              'dba_olap_descriptors'
              'dba_olap_dim_attr_uses'
              'dba_olap_dim_attributes'
              'dba_olap_dim_hier_level_uses'
              'dba_olap_dim_hierarchies'
              'dba_olap_dim_level_attr_maps'
              'dba_olap_dim_level_attributes'
              'dba_olap_dim_levels'
              'dba_olap_dimensions'
              'dba_olap_entity_desc_uses'
              'dba_olap_fact_level_uses'
              'dba_olap_foreign_keys'
              'dba_olap_function_arguments'
              'dba_olap_function_parameters'
              'dba_olap_function_usages'
              'dba_olap_functions'
              'dba_olap_join_key_column_uses'
              'dba_olap_key_column_uses'
              'dba_olap_keys'
              'dba_olap_level_key_column_uses'
              'dba_olap_tables'
              'dba_olap1_cubes'
              'dba_olap2_aggregation_uses'
              'dba_olap2_awviewcols'
              'dba_olap2_awviews'
              'dba_olap2_catalog_entity_uses'
              'dba_olap2_catalogs'
              'dba_olap2_cube_dim_uses'
              'dba_olap2_cube_meas_dim_uses'
              'dba_olap2_cube_measure_maps'
              'dba_olap2_cube_measures'
              'dba_olap2_cubes'
              'dba_olap2_dim_attr_uses'
              'dba_olap2_dim_attributes'
              'dba_olap2_dim_hier_level_uses'
              'dba_olap2_dim_hierarchies'
              'dba_olap2_dim_hiers'
              'dba_olap2_dim_level_attr_maps'
              'dba_olap2_dim_level_attributes'
              'dba_olap2_dim_levels'
              'dba_olap2_dim_levels_keymaps'
              'dba_olap2_dimensions'
              'dba_olap2_entity_desc_uses'
              'dba_olap2_entity_ext_parms'
              'dba_olap2_entity_parameters'
              'dba_olap2_fact_level_uses'
              'dba_olap2_fact_table_gid'
              'dba_olap2_facttblfctmaps'
              'dba_olap2_facttblkeymaps'
              'dba_olap2_hier_custom_sort'
              'dba_olap2_hierdim_keycol_map'
              'dba_olap2_hierdims'
              'dba_olap2_join_key_column_uses'
              'dba_olap2_level_key_col_uses'
              'dba_olap2_listdims'
              'dba_olap2_mr_measdimview'
              'dba_olap2_rufcttblkymaps'
              'dba_olap9i1_hier_dimensions'
              'dba_olap9i2_hier_dimensions'
              'dba_olapmr_dim_levels_keymaps'
              'dba_olapmr_facttblfctmaps'
              'dba_olapmr_facttblkeymaps'
              'dba_opancillary'
              'dba_oparguments'
              'dba_opbindings'
              'dba_operator_comments'
              'dba_operators'
              'dba_optstat_operations'
              'dba_outline_hints'
              'dba_outlines'
              'dba_outstanding_alerts'
              'dba_part_col_statistics'
              'dba_part_histograms'
              'dba_part_indexes'
              'dba_part_key_columns'
              'dba_part_lobs'
              'dba_part_tables'
              'dba_partial_drop_tabs'
              'dba_pending_conv_tables'
              'dba_pending_transactions'
              'dba_plsql_object_settings'
              'dba_policies'
              'dba_policy_contexts'
              'dba_policy_groups'
              'dba_priv_audit_opts'
              'dba_procedures'
              'dba_profiles'
              'dba_propagation'
              'dba_proxies'
              'dba_published_columns'
              'dba_queue_publishers'
              'dba_queue_schedules'
              'dba_queue_subscribers'
              'dba_queue_tables'
              'dba_queues'
              'dba_rchild'
              'dba_recoverable_script'
              'dba_recoverable_script_blocks'
              'dba_recoverable_script_errors'
              'dba_recoverable_script_params'
              'dba_recyclebin'
              'dba_redefinition_errors'
              'dba_redefinition_objects'
              'dba_refresh'
              'dba_refresh_children'
              'dba_refs'
              'dba_registered_archived_log'
              'dba_registered_mview_groups'
              'dba_registered_mviews'
              'dba_registered_snapshot_groups'
              'dba_registered_snapshots'
              'dba_registry'
              'dba_registry_hierarchy'
              'dba_registry_history'
              'dba_registry_log'
              'dba_repaudit_attribute'
              'dba_repaudit_column'
              'dba_repcat'
              'dba_repcat_exceptions'
              'dba_repcat_refresh_templates'
              'dba_repcat_template_objects'
              'dba_repcat_template_parms'
              'dba_repcat_template_sites'
              'dba_repcat_user_authorizations'
              'dba_repcat_user_parm_values'
              'dba_repcatlog'
              'dba_repcolumn'
              'dba_repcolumn_group'
              'dba_repconflict'
              'dba_repddl'
              'dba_repextensions'
              'dba_repflavor_columns'
              'dba_repflavor_objects'
              'dba_repflavors'
              'dba_repgenerated'
              'dba_repgenobjects'
              'dba_repgroup'
              'dba_repgroup_privileges'
              'dba_repgrouped_column'
              'dba_repkey_columns'
              'dba_repobject'
              'dba_repparameter_column'
              'dba_reppriority'
              'dba_reppriority_group'
              'dba_repprop'
              'dba_represol_stats_control'
              'dba_represolution'
              'dba_represolution_method'
              'dba_represolution_statistics'
              'dba_repschema'
              'dba_repsites'
              'dba_repsites_new'
              'dba_resource_incarnations'
              'dba_resumable'
              'dba_rewrite_equivalences'
              'dba_rgroup'
              'dba_role_privs'
              'dba_roles'
              'dba_rollback_segs'
              'dba_rsrc_consumer_group_privs'
              'dba_rsrc_consumer_groups'
              'dba_rsrc_group_mappings'
              'dba_rsrc_manager_system_privs'
              'dba_rsrc_mapping_priority'
              'dba_rsrc_plan_directives'
              'dba_rsrc_plans'
              'dba_rule_set_rules'
              'dba_rule_sets'
              'dba_rules'
              'dba_rulesets'
              'dba_scheduler_chain_rules'
              'dba_scheduler_chain_steps'
              'dba_scheduler_chains'
              'dba_scheduler_global_attribute'
              'dba_scheduler_job_args'
              'dba_scheduler_job_classes'
              'dba_scheduler_job_log'
              'dba_scheduler_job_run_details'
              'dba_scheduler_jobs'
              'dba_scheduler_program_args'
              'dba_scheduler_programs'
              'dba_scheduler_running_chains'
              'dba_scheduler_running_jobs'
              'dba_scheduler_schedules'
              'dba_scheduler_window_details'
              'dba_scheduler_window_groups'
              'dba_scheduler_window_log'
              'dba_scheduler_windows'
              'dba_scheduler_wingroup_members'
              'dba_sdo_maps'
              'dba_sdo_styles'
              'dba_sdo_themes'
              'dba_sec_relevant_cols'
              'dba_secondary_objects'
              'dba_segments'
              'dba_segments_old'
              'dba_sequences'
              'dba_server_registry'
              'dba_services'
              'dba_snapshot_log_filter_cols'
              'dba_snapshot_logs'
              'dba_snapshot_refresh_times'
              'dba_snapshots'
              'dba_source'
              'dba_source_tables'
              'dba_sql_profiles'
              'dba_sqlj_type_attrs'
              'dba_sqlj_type_methods'
              'dba_sqlj_types'
              'dba_sqlset'
              'dba_sqlset_binds'
              'dba_sqlset_definitions'
              'dba_sqlset_plans'
              'dba_sqlset_references'
              'dba_sqlset_statements'
              'dba_sqltune_binds'
              'dba_sqltune_plans'
              'dba_sqltune_rationale_plan'
              'dba_sqltune_statistics'
              'dba_stmt_audit_opts'
              'dba_stored_settings'
              'dba_streams_add_column'
              'dba_streams_administrator'
              'dba_streams_delete_column'
              'dba_streams_global_rules'
              'dba_streams_message_consumers'
              'dba_streams_message_rules'
              'dba_streams_newly_supported'
              'dba_streams_rename_column'
              'dba_streams_rename_schema'
              'dba_streams_rename_table'
              'dba_streams_rules'
              'dba_streams_schema_rules'
              'dba_streams_table_rules'
              'dba_streams_transform_function'
              'dba_streams_transformations'
              'dba_streams_unsupported'
              'dba_subpart_col_statistics'
              'dba_subpart_histograms'
              'dba_subpart_key_columns'
              'dba_subpartition_templates'
              'dba_subscribed_columns'
              'dba_subscribed_tables'
              'dba_subscriptions'
              'dba_summaries'
              'dba_summary_aggregates'
              'dba_summary_detail_tables'
              'dba_summary_joins'
              'dba_summary_keys'
              'dba_synonyms'
              'dba_sys_privs'
              'dba_tab_col_statistics'
              'dba_tab_cols'
              'dba_tab_columns'
              'dba_tab_comments'
              'dba_tab_histograms'
              'dba_tab_partitions'
              'dba_tab_privs'
              'dba_tab_statistics'
              'dba_tab_stats_history'
              'dba_tab_subpartitions'
              'dba_tables'
              'dba_tablespace_groups'
              'dba_tablespace_usage_metrics'
              'dba_tablespaces'
              'dba_temp_files'
              'dba_template_refgroups'
              'dba_template_targets'
              'dba_thresholds'
              'dba_trigger_cols'
              'dba_triggers'
              'dba_ts_quotas'
              'dba_tsm_destination'
              'dba_tsm_history'
              'dba_tsm_source'
              'dba_tune_mview'
              'dba_type_attrs'
              'dba_type_methods'
              'dba_type_versions'
              'dba_types'
              'dba_undo_extents'
              'dba_unused_col_tabs'
              'dba_updatable_columns'
              'dba_users'
              'dba_ustats'
              'dba_varrays'
              'dba_views'
              'dba_waiters'
              'dba_warning_settings'
              'dba_wm_sys_privs'
              'dba_wm_versioned_tables'
              'dba_wm_vt_errors'
              'dba_workspace_privs'
              'dba_workspace_savepoints'
              'dba_workspace_sessions'
              'dba_workspaces'
              'dba_xml_indexes'
              'dba_xml_schemas'
              'dba_xml_tab_cols'
              'dba_xml_tables'
              'dba_xml_view_cols'
              'dba_xml_views'
              'dbms_advisor'
              'dbms_alert'
              'dbms_application_info'
              'dbms_apply_adm'
              'dbms_aq'
              'dbms_aq_exp_cmt_time_tables'
              'dbms_aq_exp_history_tables'
              'dbms_aq_exp_index_tables'
              'dbms_aq_exp_queue_tables'
              'dbms_aq_exp_queues'
              'dbms_aq_exp_signature_tables'
              'dbms_aq_exp_subscriber_tables'
              'dbms_aq_exp_timemgr_tables'
              'dbms_aq_exp_zecurity'
              'dbms_aq_imp_internal'
              'dbms_aq_imp_zecurity'
              'dbms_aq_sys_exp_actions'
              'dbms_aq_sys_exp_internal'
              'dbms_aq_sys_imp_internal'
              'dbms_aqadm'
              'dbms_aqadm_syscalls'
              'dbms_aqelm'
              'dbms_aqin'
              'dbms_aqjms'
              'dbms_aqjms_internal'
              'dbms_assert'
              'dbms_aw'
              'dbms_aw$_columnlist_t'
              'dbms_aw$_dimension_source_t'
              'dbms_aw$_dimension_sources_t'
              'dbms_aw_exp'
              'dbms_aw_xml'
              'dbms_awm'
              'dbms_capture_adm'
              'dbms_cdc_dputil'
              'dbms_cdc_expdp'
              'dbms_cdc_expvdp'
              'dbms_cdc_impdp'
              'dbms_cdc_ipublish'
              'dbms_cdc_isubscribe'
              'dbms_cdc_publish'
              'dbms_cdc_subscribe'
              'dbms_cdc_sys_ipublish'
              'dbms_change_notification'
              'dbms_crypto'
              'dbms_crypto_toolkit'
              'dbms_data_mining'
              'dbms_data_mining_transform'
              'dbms_datapump'
              'dbms_db_version'
              'dbms_dblink'
              'dbms_ddl'
              'dbms_ddl_internal'
              'dbms_debug'
              'dbms_debug_jdwp'
              'dbms_debug_jdwp_custom'
              'dbms_defer'
              'dbms_defer_query'
              'dbms_defer_sys'
              'dbms_defergen'
              'dbms_describe'
              'dbms_dimension'
              'dbms_distributed_trust_admin'
              'dbms_dm_model_imp'
              'dbms_epg'
              'dbms_errlog'
              'dbms_expfil'
              'dbms_fbt'
              'dbms_feature_usage_report'
              'dbms_fga'
              'dbms_file_group'
              'dbms_file_transfer'
              'dbms_flashback'
              'dbms_frequent_itemset'
              'dbms_hs'
              'dbms_ias_configure'
              'dbms_ias_inst'
              'dbms_ias_mt_inst'
              'dbms_ias_query'
              'dbms_ias_session'
              'dbms_ias_template'
              'dbms_index_utl'
              'dbms_internal_repcat'
              'dbms_java'
              'dbms_java_dump'
              'dbms_java_test'
              'dbms_job'
              'dbms_jvm_exp_perms'
              'dbms_lcr'
              'dbms_ldap'
              'dbms_ldap_utl'
              'dbms_lob'
              'dbms_lock'
              'dbms_logmnr_cdc_publish'
              'dbms_logmnr_cdc_subscribe'
              'dbms_logstdby'
              'dbms_metadata'
              'dbms_metadata_build'
              'dbms_metadata_dpbuild'
              'dbms_monitor'
              'dbms_mview'
              'dbms_obfuscation_toolkit'
              'dbms_odci'
              'dbms_odm'
              'dbms_offline_og'
              'dbms_offline_rgt'
              'dbms_offline_snapshot'
              'dbms_olap'
              'dbms_outln'
              'dbms_outln_edit'
              'dbms_output'
              'dbms_pclxutil'
              'dbms_pickler'
              'dbms_pipe'
              'dbms_predictive_analytics'
              'dbms_preprocessor'
              'dbms_profiler'
              'dbms_propagation_adm'
              'dbms_psp'
              'dbms_pswmg_import'
              'dbms_random'
              'dbms_rectifier_diff'
              'dbms_redefinition'
              'dbms_refresh'
              'dbms_registry'
              'dbms_repcat'
              'dbms_repcat_admin'
              'dbms_repcat_auth'
              'dbms_repcat_decl'
              'dbms_repcat_instantiate'
              'dbms_repcat_internal'
              'dbms_repcat_internal_package'
              'dbms_repcat_mig'
              'dbms_repcat_rgt'
              'dbms_repcat_validate'
              'dbms_reputil'
              'dbms_reputil2'
              'dbms_resource_manager'
              'dbms_resource_manager_privs'
              'dbms_resumable'
              'dbms_rlmgr'
              'dbms_rls'
              'dbms_rmgr_group_export'
              'dbms_rmgr_pact_export'
              'dbms_rmgr_plan_export'
              'dbms_rmin'
              'dbms_rowid'
              'dbms_rule'
              'dbms_rule_adm'
              'dbms_rule_compatible_90'
              'dbms_rule_exp_ec_internal'
              'dbms_rule_exp_ev_ctxs'
              'dbms_rule_exp_rl_internal'
              'dbms_rule_exp_rs_internal'
              'dbms_rule_exp_rule_sets'
              'dbms_rule_exp_rules'
              'dbms_rule_imp_obj'
              'dbms_ruleadm_internal'
              'dbms_sched_chain_export'
              'dbms_sched_class_export'
              'dbms_sched_export_callouts'
              'dbms_sched_job_export'
              'dbms_sched_program_export'
              'dbms_sched_schedule_export'
              'dbms_sched_window_export'
              'dbms_sched_wingrp_export'
              'dbms_scheduler'
              'dbms_server_alert'
              'dbms_server_alert_export'
              'dbms_server_trace'
              'dbms_service'
              'dbms_session'
              'dbms_snapshot'
              'dbms_space'
              'dbms_space_admin'
              'dbms_sql'
              'dbms_sqlhash'
              'dbms_sqlplus_script'
              'dbms_sqltune'
              'dbms_standard'
              'dbms_stat_funcs'
              'dbms_stat_funcs_aux'
              'dbms_stats'
              'dbms_storage_map'
              'dbms_streams'
              'dbms_streams_adm'
              'dbms_streams_auth'
              'dbms_streams_lcr_int'
              'dbms_streams_messaging'
              'dbms_streams_rpc'
              'dbms_streams_tablespace_adm'
              'dbms_sum_rweq_export'
              'dbms_sum_rweq_export_internal'
              'dbms_summary'
              'dbms_tde_toolkit'
              'dbms_trace'
              'dbms_transaction'
              'dbms_transaction_internal_sys'
              'dbms_transform'
              'dbms_transform_eximp'
              'dbms_tsm_prvt'
              'dbms_type_utility'
              'dbms_types'
              'dbms_undo_adv'
              'dbms_utility'
              'dbms_warning'
              'dbms_wm'
              'dbms_workload_repository'
              'dbms_xdb'
              'dbms_xdb_version'
              'dbms_xdbutil_int'
              'dbms_xdbz'
              'dbms_xdbz0'
              'dbms_xmldom'
              'dbms_xmlgen'
              'dbms_xmlindex'
              'dbms_xmlparser'
              'dbms_xmlquery'
              'dbms_xmlsave'
              'dbms_xmlschema'
              'dbms_xmlstore'
              'dbms_xplan'
              'dbms_xslprocessor'
              'dbms_xsoq'
              'dbms_xsoq_odbo'
              'dbms_xsoq_util'
              'dbms_zhelp'
              'dbms_zhelp_ir'
              'dbmshsxp'
              'dbmshsxp_sql_profile_attr'
              'dbmsobjgwrapper'
              'dbmsoutput_linesarray'
              'dbmszexp_syspkggrnt'
              'dbsnmp'
              'dburitype'
              'debug_test'
              'defcall'
              'defcalldest'
              'defdefaultdest'
              'deferrcount'
              'deferror'
              'definitionmanagerinterface'
              'deflob'
              'defpropagator'
              'defschedule'
              'deftran'
              'deftrandest'
              'dict'
              'dict_columns'
              'dictionary'
              'dip'
              'dm_abn_detail'
              'dm_abn_details'
              'dm_centroid'
              'dm_centroids'
              'dm_child'
              'dm_children'
              'dm_cluster'
              'dm_clusters'
              'dm_conditional'
              'dm_conditionals'
              'dm_histogram_bin'
              'dm_histograms'
              'dm_items'
              'dm_itemset'
              'dm_itemsets'
              'dm_model_setting'
              'dm_model_settings'
              'dm_model_signature'
              'dm_model_signature_attribute'
              'dm_nb_detail'
              'dm_nb_details'
              'dm_nested_categorical'
              'dm_nested_categoricals'
              'dm_nested_numerical'
              'dm_nested_numericals'
              'dm_nmf_attribute'
              'dm_nmf_attribute_set'
              'dm_nmf_feature'
              'dm_nmf_feature_set'
              'dm_predicate'
              'dm_predicates'
              'dm_ranked_attribute'
              'dm_ranked_attributes'
              'dm_rule'
              'dm_rules'
              'dm_svm_attribute'
              'dm_svm_attribute_set'
              'dm_svm_linear_coeff'
              'dm_svm_linear_coeff_set'
              'dm_user_models'
              'dmbgos'
              'dmp_sys'
              'dmsys'
              'drvodm'
              'dual'
              'errorlist'
              'exf$attribute'
              'exf$attribute_list'
              'exf$indexoper'
              'exf$table_alias'
              'exf$xpath_tag'
              'exf$xpath_tags'
              'exfsys'
              'explainmvarraytype'
              'explainmvmessage'
              'flashback_transaction_query'
              'ftpuritype'
              'functionidconstants'
              'genbaseonlydefinitionstruct'
              'genbooleansequence'
              'gencomparisonruleenum'
              'gencompoundcursorblocksequence'
              'gencompoundcursorblockstruct'
              'genconnectioninterface'
              'genconnectionparameterinfosequ'
              'genconnectionparameterinfostru'
              'genconnectionparametertypeenum'
              'genconnectionstruct'
              'genconstantlistdefinitionstruc'
              'genconstantlistvaluesunion'
              'gencursorblock2sequence'
              'gencursorblock2struct'
              'gencursorblocksequence'
              'gencursorblockstruct'
              'gencursormanagerinterface'
              'gencursormanagersequence'
              'gencursorspecifiersequence'
              'gencursorspecifiersequencesequ'
              'gencursorspecifierstruct'
              'gencursorvalue2union'
              'gencursorvalue2unionsequence'
              'gencursorvalues2union'
              'gencursorvaluesunion'
              'gencursorvalueunion'
              'gencursorvalueunionsequence'
              'gendata2sequenceunion'
              'gendata2union'
              'gendata2unionsequence'
              'gendatabaseinterface'
              'gendatablock2sequence'
              'gendatablock2struct'
              'gendatablocksequence'
              'gendatablockstruct'
              'gendataproviderinterface'
              'gendatasequenceunion'
              'gendatatypeidconstants'
              'gendataunion'
              'gendataunionsequence'
              'gendatesequence'
              'gendefinitionmanagerinterface'
              'gendefinitionpost92sequence'
              'gendefinitionpost92union'
              'gendefinitionsequence'
              'gendefinitionunion'
              'gendependencyblocksequence'
              'gendependencyblocksequencesequ'
              'gendependencyblockstruct'
              'gendependencyblockunion'
              'gendomainenum'
              'gendoublesequence'
              'gendynamicdefinitionstruct'
              'generrorclassenum'
              'generrordescriptionsequence'
              'generrordescriptionstruct'
              'generrortypeenum'
              'genexpressexception'
              'genfloatsequence'
              'genincludeddependencyblockstru'
              'genindexblockstruct'
              'geninterfacestub'
              'geninterfacestubsequence'
              'geninterruptableinterface'
              'geninvalidindexspecificationex'
              'geninvalidmetadataexception'
              'genjoindefinitionstruct'
              'genlonglongsequence'
              'genlongsequence'
              'genmdmclassconstants'
              'genmdmobjectidconstants'
              'genmdmpropertyidconstants'
              'genmetadatadefinitionstruct'
              'genmetadatapropertybagsequence'
              'genmetadatapropertybagunion'
              'genmetadatapropertysequence'
              'genmetadatapropertystruct'
              'genmetadatapropertyvaluesunion'
              'genmetadataproviderinterface'
              'genmultiplierblockstruct'
              'genoctetsequence'
              'genolapiexception'
              'genparentstartendblock2sequenc'
              'genparentstartendblock2union'
              'genparentstartendblocksequence'
              'genparentstartendblockunion'
              'genpersistentsourceidsequence'
              'genpersistentsourceidstruct'
              'genpropertysequence'
              'genpropertystruct'
              'genrangedefinitionstruct'
              'genrawsequence'
              'genrecursivejoindefinitionstru'
              'genremoteapiversionmismatchexc'
              'genremoteauthenticationexcepti'
              'genremoteobjectclosedexception'
              'genremotespecificationupdatene'
              'genremotetaskinterruptedexcept'
              'genserverinterface'
              'genserverstruct'
              'genshortsequence'
              'genshortsequencesequence'
              'genstringsequence'
              'genunmatchedinputsexception'
              'genvaluecursorblocksequence'
              'genvaluecursorblockstruct'
              'genvaluedefinitionstruct'
              'genversioninfostruct'
              'genwstringsequence'
              'geometry'
              'geometrycollection'
              'get_error$'
              'global_context'
              'global_name'
              'gv$_lock'
              'gv$access'
              'gv$active_instances'
              'gv$active_services'
              'gv$active_sess_pool_mth'
              'gv$active_session_history'
              'gv$advisor_progress'
              'gv$alert_types'
              'gv$aq'
              'gv$aq1'
              'gv$archive'
              'gv$archive_dest'
              'gv$archive_dest_status'
              'gv$archive_gap'
              'gv$archive_processes'
              'gv$archived_log'
              'gv$asm_alias'
              'gv$asm_client'
              'gv$asm_disk'
              'gv$asm_disk_stat'
              'gv$asm_diskgroup'
              'gv$asm_diskgroup_stat'
              'gv$asm_file'
              'gv$asm_operation'
              'gv$asm_template'
              'gv$aw_aggregate_op'
              'gv$aw_allocate_op'
              'gv$aw_calc'
              'gv$aw_longops'
              'gv$aw_olap'
              'gv$aw_session_info'
              'gv$backup'
              'gv$backup_async_io'
              'gv$backup_corruption'
              'gv$backup_datafile'
              'gv$backup_device'
              'gv$backup_piece'
              'gv$backup_redolog'
              'gv$backup_set'
              'gv$backup_spfile'
              'gv$backup_sync_io'
              'gv$bgprocess'
              'gv$bh'
              'gv$blocking_quiesce'
              'gv$bsp'
              'gv$buffer_pool'
              'gv$buffer_pool_statistics'
              'gv$buffered_publishers'
              'gv$buffered_queues'
              'gv$buffered_subscribers'
              'gv$circuit'
              'gv$class_cache_transfer'
              'gv$class_ping'
              'gv$client_stats'
              'gv$cluster_interconnects'
              'gv$configured_interconnects'
              'gv$context'
              'gv$controlfile'
              'gv$controlfile_record_section'
              'gv$copy_corruption'
              'gv$cr_block_server'
              'gv$current_block_server'
              'gv$database'
              'gv$database_block_corruption'
              'gv$database_incarnation'
              'gv$datafile'
              'gv$datafile_copy'
              'gv$datafile_header'
              'gv$dataguard_config'
              'gv$dataguard_status'
              'gv$datapump_job'
              'gv$datapump_session'
              'gv$db_cache_advice'
              'gv$db_object_cache'
              'gv$db_pipes'
              'gv$dbfile'
              'gv$dblink'
              'gv$deleted_object'
              'gv$dispatcher'
              'gv$dispatcher_config'
              'gv$dispatcher_rate'
              'gv$dlm_all_locks'
              'gv$dlm_convert_local'
              'gv$dlm_convert_remote'
              'gv$dlm_latch'
              'gv$dlm_locks'
              'gv$dlm_misc'
              'gv$dlm_ress'
              'gv$dlm_traffic_controller'
              'gv$enabledprivs'
              'gv$enqueue_lock'
              'gv$enqueue_stat'
              'gv$enqueue_statistics'
              'gv$event_histogram'
              'gv$event_name'
              'gv$eventmetric'
              'gv$execution'
              'gv$fast_start_servers'
              'gv$fast_start_transactions'
              'gv$file_cache_transfer'
              'gv$file_histogram'
              'gv$file_ping'
              'gv$filemetric'
              'gv$filemetric_history'
              'gv$filespace_usage'
              'gv$filestat'
              'gv$fixed_table'
              'gv$fixed_view_definition'
              'gv$flashback_database_log'
              'gv$flashback_database_logfile'
              'gv$flashback_database_stat'
              'gv$gc_element'
              'gv$gc_elements_with_collisions'
              'gv$gcshvmaster_info'
              'gv$gcspfmaster_info'
              'gv$ges_blocking_enqueue'
              'gv$ges_enqueue'
              'gv$global_blocked_locks'
              'gv$global_transaction'
              'gv$globalcontext'
              'gv$hs_agent'
              'gv$hs_parameter'
              'gv$hs_session'
              'gv$hvmaster_info'
              'gv$indexed_fixed_column'
              'gv$instance'
              'gv$instance_cache_transfer'
              'gv$instance_log_group'
              'gv$instance_recovery'
              'gv$java_library_cache_memory'
              'gv$java_pool_advice'
              'gv$javapool'
              'gv$latch'
              'gv$latch_children'
              'gv$latch_misses'
              'gv$latch_parent'
              'gv$latchholder'
              'gv$latchname'
              'gv$library_cache_memory'
              'gv$librarycache'
              'gv$license'
              'gv$loadistat'
              'gv$loadpstat'
              'gv$lock'
              'gv$lock_activity'
              'gv$lock_element'
              'gv$lock_type'
              'gv$locked_object'
              'gv$locks_with_collisions'
              'gv$log'
              'gv$log_history'
              'gv$logfile'
              'gv$loghist'
              'gv$logmnr_callback'
              'gv$logmnr_contents'
              'gv$logmnr_dictionary'
              'gv$logmnr_dictionary_load'
              'gv$logmnr_latch'
              'gv$logmnr_logfile'
              'gv$logmnr_logs'
              'gv$logmnr_parameters'
              'gv$logmnr_process'
              'gv$logmnr_region'
              'gv$logmnr_session'
              'gv$logmnr_stats'
              'gv$logmnr_transaction'
              'gv$logstdby'
              'gv$logstdby_process'
              'gv$logstdby_progress'
              'gv$logstdby_state'
              'gv$logstdby_stats'
              'gv$logstdby_transaction'
              'gv$managed_standby'
              'gv$map_comp_list'
              'gv$map_element'
              'gv$map_ext_element'
              'gv$map_file'
              'gv$map_file_extent'
              'gv$map_file_io_stack'
              'gv$map_library'
              'gv$map_subelement'
              'gv$max_active_sess_target_mth'
              'gv$metric'
              'gv$metric_history'
              'gv$metricgroup'
              'gv$metricname'
              'gv$mttr_target_advice'
              'gv$mutex_sleep'
              'gv$mutex_sleep_history'
              'gv$mvrefresh'
              'gv$mystat'
              'gv$nls_parameters'
              'gv$nls_valid_values'
              'gv$object_dependency'
              'gv$obsolete_parameter'
              'gv$offline_range'
              'gv$open_cursor'
              'gv$option'
              'gv$osstat'
              'gv$parallel_degree_limit_mth'
              'gv$parameter'
              'gv$parameter_valid_values'
              'gv$parameter2'
              'gv$pga_target_advice'
              'gv$pga_target_advice_histogram'
              'gv$pgastat'
              'gv$pq_sesstat'
              'gv$pq_slave'
              'gv$pq_sysstat'
              'gv$pq_tqstat'
              'gv$process'
              'gv$process_memory'
              'gv$process_memory_detail'
              'gv$process_memory_detail_prog'
              'gv$propagation_receiver'
              'gv$propagation_sender'
              'gv$proxy_archivedlog'
              'gv$proxy_datafile'
              'gv$pwfile_users'
              'gv$px_buffer_advice'
              'gv$px_process'
              'gv$px_process_sysstat'
              'gv$px_session'
              'gv$px_sesstat'
              'gv$queue'
              'gv$queueing_mth'
              'gv$recover_file'
              'gv$recovery_file_status'
              'gv$recovery_log'
              'gv$recovery_progress'
              'gv$recovery_status'
              'gv$replprop'
              'gv$replqueue'
              'gv$reqdist'
              'gv$reserved_words'
              'gv$resource'
              'gv$resource_limit'
              'gv$restore_point'
              'gv$resumable'
              'gv$rfs_thread'
              'gv$rman_configuration'
              'gv$rman_output'
              'gv$rollstat'
              'gv$rowcache'
              'gv$rowcache_parent'
              'gv$rowcache_subordinate'
              'gv$rsrc_cons_group_history'
              'gv$rsrc_consumer_group'
              'gv$rsrc_consumer_group_cpu_mth'
              'gv$rsrc_plan'
              'gv$rsrc_plan_cpu_mth'
              'gv$rsrc_plan_history'
              'gv$rsrc_session_info'
              'gv$rule'
              'gv$rule_set'
              'gv$rule_set_aggregate_stats'
              'gv$scheduler_running_jobs'
              'gv$segment_statistics'
              'gv$segstat'
              'gv$segstat_name'
              'gv$serv_mod_act_stats'
              'gv$service_event'
              'gv$service_stats'
              'gv$service_wait_class'
              'gv$servicemetric'
              'gv$servicemetric_history'
              'gv$services'
              'gv$ses_optimizer_env'
              'gv$sess_io'
              'gv$sess_time_model'
              'gv$session'
              'gv$session_connect_info'
              'gv$session_cursor_cache'
              'gv$session_event'
              'gv$session_longops'
              'gv$session_object_cache'
              'gv$session_wait'
              'gv$session_wait_class'
              'gv$session_wait_history'
              'gv$sessmetric'
              'gv$sesstat'
              'gv$sga'
              'gv$sga_current_resize_ops'
              'gv$sga_dynamic_components'
              'gv$sga_dynamic_free_memory'
              'gv$sga_resize_ops'
              'gv$sga_target_advice'
              'gv$sgainfo'
              'gv$sgastat'
              'gv$shared_pool_advice'
              'gv$shared_pool_reserved'
              'gv$shared_server'
              'gv$shared_server_monitor'
              'gv$sort_segment'
              'gv$sort_usage'
              'gv$spparameter'
              'gv$sql'
              'gv$sql_bind_capture'
              'gv$sql_bind_data'
              'gv$sql_bind_metadata'
              'gv$sql_cursor'
              'gv$sql_join_filter'
              'gv$sql_optimizer_env'
              'gv$sql_plan'
              'gv$sql_plan_statistics'
              'gv$sql_plan_statistics_all'
              'gv$sql_redirection'
              'gv$sql_shared_cursor'
              'gv$sql_shared_memory'
              'gv$sql_workarea'
              'gv$sql_workarea_active'
              'gv$sql_workarea_histogram'
              'gv$sqlarea'
              'gv$sqlarea_plan_hash'
              'gv$sqlstats'
              'gv$sqltext'
              'gv$sqltext_with_newlines'
              'gv$standby_apply_snapshot'
              'gv$standby_log'
              'gv$statistics_level'
              'gv$statname'
              'gv$streams_apply_coordinator'
              'gv$streams_apply_reader'
              'gv$streams_apply_server'
              'gv$streams_capture'
              'gv$streams_pool_advice'
              'gv$streams_transaction'
              'gv$subcache'
              'gv$sys_optimizer_env'
              'gv$sys_time_model'
              'gv$sysaux_occupants'
              'gv$sysmetric'
              'gv$sysmetric_history'
              'gv$sysmetric_summary'
              'gv$sysstat'
              'gv$system_cursor_cache'
              'gv$system_event'
              'gv$system_parameter'
              'gv$system_parameter2'
              'gv$system_wait_class'
              'gv$tablespace'
              'gv$temp_cache_transfer'
              'gv$temp_extent_map'
              'gv$temp_extent_pool'
              'gv$temp_histogram'
              'gv$temp_ping'
              'gv$temp_space_header'
              'gv$tempfile'
              'gv$temporary_lobs'
              'gv$tempseg_usage'
              'gv$tempstat'
              'gv$thread'
              'gv$threshold_types'
              'gv$timer'
              'gv$timezone_file'
              'gv$timezone_names'
              'gv$transaction'
              'gv$transaction_enqueue'
              'gv$tsm_sessions'
              'gv$type_size'
              'gv$undostat'
              'gv$version'
              'gv$vpd_policy'
              'gv$waitclassmetric'
              'gv$waitclassmetric_history'
              'gv$waitstat'
              'gv$wallet'
              'gv$xml_audit_trail'
              'gv_ksmhp'
              'gv_olapi_iface_object_history'
              'gv_olapi_iface_op_history'
              'gv_olapi_memory_op_history'
              'gv_olapi_session_history'
              'her_seq'
              'herausgeber'
              'herausgeber_seq'
              'hs_all_caps'
              'hs_all_dd'
              'hs_all_inits'
              'hs_base_caps'
              'hs_base_dd'
              'hs_class_caps'
              'hs_class_dd'
              'hs_class_init'
              'hs_fds_class'
              'hs_fds_class_date'
              'hs_fds_inst'
              'hs_inst_caps'
              'hs_inst_dd'
              'hs_inst_init'
              'htf'
              'htmldb_system'
              'htp'
              'httpuritype'
              'ind'
              'index_histogram'
              'index_stats'
              'int_detail_respon_mqtab'
              'interruptableinterface'
              'java_xa'
              'javasnm'
              'ku$_auddef_t'
              'ku$_audit_default_list_t'
              'ku$_audit_list_t'
              'ku$_audobj_t'
              'ku$_chunk_list_t'
              'ku$_chunk_t'
              'ku$_ddl'
              'ku$_ddls'
              'ku$_dumpfile'
              'ku$_dumpfile_info'
              'ku$_dumpfile_item'
              'ku$_dumpfile1010'
              'ku$_dumpfile1020'
              'ku$_dumpfileset'
              'ku$_dumpfileset1010'
              'ku$_dumpfileset1020'
              'ku$_errorline'
              'ku$_errorlines'
              'ku$_java_t'
              'ku$_jobdesc'
              'ku$_jobdesc1010'
              'ku$_jobdesc1020'
              'ku$_jobstatus'
              'ku$_jobstatus1010'
              'ku$_jobstatus1020'
              'ku$_logentry'
              'ku$_logentry1010'
              'ku$_logentry1020'
              'ku$_logline'
              'ku$_logline1010'
              'ku$_logline1020'
              'ku$_multi_ddl'
              'ku$_multi_ddls'
              'ku$_objnumpair'
              'ku$_objnumpairlist'
              'ku$_objnumset'
              'ku$_paramvalue'
              'ku$_paramvalue1010'
              'ku$_paramvalue1020'
              'ku$_paramvalues'
              'ku$_paramvalues1010'
              'ku$_paramvalues1020'
              'ku$_parsed_item'
              'ku$_parsed_items'
              'ku$_procobj_line'
              'ku$_procobj_lines'
              'ku$_procobj_loc'
              'ku$_procobj_locs'
              'ku$_source_list_t'
              'ku$_source_t'
              'ku$_status'
              'ku$_status1010'
              'ku$_status1020'
              'ku$_submitresult'
              'ku$_submitresults'
              'ku$_taction_list_t'
              'ku$_taction_t'
              'ku$_vcnt'
              'ku$_workerstatus'
              'ku$_workerstatus1010'
              'ku$_workerstatus1020'
              'ku$_workerstatuslist'
              'ku$_workerstatuslist1010'
              'ku$_workerstatuslist1020'
              'kupcc'
              'leser'
              'leser_seq'
              'linestring'
              'loader_col_flags'
              'loader_col_info'
              'loader_col_type'
              'loader_constraint_info'
              'loader_dir_objs'
              'loader_file_ts'
              'loader_full_attr_name'
              'loader_intcol_info'
              'loader_lob_flags'
              'loader_nested_varrays'
              'loader_oid_info'
              'loader_param_info'
              'loader_part_info'
              'loader_ref_info'
              'loader_skip_unusable_indexes'
              'loader_tab_info'
              'loader_trigger_info'
              'loglist'
              'map_object'
              'md'
              'md_lrs'
              'mddata'
              'mdmclassconstants'
              'mdmobjectidconstants'
              'mdmpropertyidconstants'
              'mdsys'
              'metadataproviderinterface'
              'mgmt$alert_current'
              'mgmt$alert_history'
              'mgmt$availability_current'
              'mgmt$availability_history'
              'mgmt$blackout_history'
              'mgmt$cluster_interconnects'
              'mgmt$csa_clients'
              'mgmt$csa_host_cookies'
              'mgmt$csa_host_cpus'
              'mgmt$csa_host_custom'
              'mgmt$csa_host_iocards'
              'mgmt$csa_host_nics'
              'mgmt$csa_host_os_components'
              'mgmt$csa_host_os_filesystems'
              'mgmt$csa_host_os_properties'
              'mgmt$csa_host_sw'
              'mgmt$db_controlfiles'
              'mgmt$db_datafiles'
              'mgmt$db_dbninstanceinfo'
              'mgmt$db_featureusage'
              'mgmt$db_init_params'
              'mgmt$db_license'
              'mgmt$db_redologs'
              'mgmt$db_rollback_segs'
              'mgmt$db_sga'
              'mgmt$db_tablespaces'
              'mgmt$delta_component_details'
              'mgmt$delta_components'
              'mgmt$delta_fs_mount'
              'mgmt$delta_hardware'
              'mgmt$delta_host_config'
              'mgmt$delta_init'
              'mgmt$delta_oneoff_patches'
              'mgmt$delta_oracle_home'
              'mgmt$delta_os_comp_details'
              'mgmt$delta_os_components'
              'mgmt$delta_os_kernel_params'
              'mgmt$delta_patchset_details'
              'mgmt$delta_patchsets'
              'mgmt$delta_tablespaces'
              'mgmt$delta_vendor_sw'
              'mgmt$delta_view'
              'mgmt$delta_view_details'
              'mgmt$ecm_current_snapshots'
              'mgmt$ecm_visible_snapshots'
              'mgmt$group_derived_memberships'
              'mgmt$group_flat_memberships'
              'mgmt$group_members'
              'mgmt$ha_backup'
              'mgmt$ha_files'
              'mgmt$ha_info'
              'mgmt$ha_init_params'
              'mgmt$ha_mttr'
              'mgmt$ha_rman_config'
              'mgmt$hw_nic'
              'mgmt$interface_stats'
              'mgmt$metric_collection'
              'mgmt$metric_current'
              'mgmt$metric_daily'
              'mgmt$metric_details'
              'mgmt$metric_hourly'
              'mgmt$missing_targets'
              'mgmt$missing_targets_in_groups'
              'mgmt$os_components'
              'mgmt$os_fs_mount'
              'mgmt$os_hw_summary'
              'mgmt$os_kernel_params'
              'mgmt$os_patches'
              'mgmt$os_summary'
              'mgmt$racdb_interconnects'
              'mgmt$software_comp_patchset'
              'mgmt$software_component_oneoff'
              'mgmt$software_components'
              'mgmt$software_dependencies'
              'mgmt$software_homes'
              'mgmt$software_oneoff_patches'
              'mgmt$software_others'
              'mgmt$software_patches_in_homes'
              'mgmt$software_patchsets'
              'mgmt$target'
              'mgmt$target_components'
              'mgmt$target_composite'
              'mgmt$target_properties'
              'mgmt$target_type'
              'mgmt_target_blackouts'
              'mgmt_view'
              'migrate'
              'mrv_olap_cwm1_aggop'
              'mrv_olap_cwm1_aggord'
              'mrv_olap1_facttblfctmaps'
              'mrv_olap1_facttblkeymaps'
              'mrv_olap1_pop_cubes'
              'mrv_olap1_pop_dimensions'
              'mrv_olap2_aggregation_uses'
              'mrv_olap2_aw_attributes'
              'mrv_olap2_aw_cube_agg_lvl'
              'mrv_olap2_aw_cube_agg_meas'
              'mrv_olap2_aw_cube_agg_op'
              'mrv_olap2_aw_cube_agg_specs'
              'mrv_olap2_aw_cube_dim_uses'
              'mrv_olap2_aw_cube_measures'
              'mrv_olap2_aw_cubes'
              'mrv_olap2_aw_dim_hier_lvl_ord'
              'mrv_olap2_aw_dim_levels'
              'mrv_olap2_aw_dimensions'
              'mrv_olap2_aw_map_attr_use'
              'mrv_olap2_aw_map_dim_use'
              'mrv_olap2_aw_map_meas_use'
              'mrv_olap2_aw_phys_obj'
              'mrv_olap2_aw_phys_obj_prop'
              'mrv_olap2_aws'
              'mrv_olap2_awviewcols'
              'mrv_olap2_awviews'
              'mrv_olap2_catalog_entity_uses'
              'mrv_olap2_catalogs'
              'mrv_olap2_cube_measures'
              'mrv_olap2_descriptors'
              'mrv_olap2_dim_attributes'
              'mrv_olap2_dim_hier_level_uses'
              'mrv_olap2_dim_hiers'
              'mrv_olap2_dim_level_attr_maps'
              'mrv_olap2_entity_desc_uses'
              'mrv_olap2_entity_ext_parms'
              'mrv_olap2_entity_parameters'
              'mrv_olap2_facttblfctmaps'
              'mrv_olap2_facttblkeymaps'
              'mrv_olap2_hier_custom_sort'
              'mrv_olap2_hierdim_keycol_map'
              'mrv_olap2_hierdims'
              'mrv_olap2_hierdims_cc'
              'mrv_olap2_join_key_col_uses'
              'mrv_olap2_listdims'
              'mrv_olap2_listdims_cc'
              'mrv_olap2_pop_cubes'
              'mrv_olap2_pop_dimensions'
              'msg_handler'
              'multicurve'
              'multilinestring'
              'multipoint'
              'multipolygon'
              'multisurface'
              'my_sdo_index_metadata'
              'nls_database_parameters'
              'nls_instance_parameters'
              'nls_session_parameters'
              'o_q_detail_request_container'
              'o_q_detail_response_container'
              'o_q_info_request_container'
              'o_q_info_response_container'
              'o_q_information'
              'o_q_information_identifier'
              'o_q_information_result'
              'o_q_information_result_ident'
              'o_q_information_result_url'
              'o_q_information_result_value'
              'o_syst_protocol'
              'obj'
              'odciconst'
              'odm_abn_model'
              'odm_association_rule_model'
              'odm_attribute_importance_model'
              'odm_clustering_util'
              'odm_model_util'
              'odm_naive_bayes_model'
              'odm_oc_clustering_model'
              'odm_util'
              'ogis_geometry_columns'
              'ogis_spatial_reference_systems'
              'ol$'
              'ol$hints'
              'ol$nodes'
              'olap_api_session_init'
              'olap_oledb_actions'
              'olap_oledb_cubes'
              'olap_oledb_dimensions'
              'olap_oledb_functions'
              'olap_oledb_hierarchies'
              'olap_oledb_keywords'
              'olap_oledb_levels'
              'olap_oledb_mdproperties'
              'olap_oledb_mdprops'
              'olap_oledb_mdpropvals'
              'olap_oledb_measdims_pvt'
              'olap_oledb_measures'
              'olap_oledb_properties'
              'olap_oledb_sets'
              'olap_srf_t'
              'olap_sys_aw_access_cube_view'
              'olap_sys_aw_access_dim_view'
              'olap_sys_aw_enable_access_view'
              'olapdimview'
              'olapfactview'
              'olapi_history'
              'olapi_history_seq'
              'olapi_iface_object_history'
              'olapi_iface_op_history'
              'olapi_mdx_rowset_impl_t'
              'olapi_memory_heap_history'
              'olapi_memory_op_history'
              'olapi_session_history'
              'olapihandshake2'
              'olapsys'
              'ora_dm_tree_nodes'
              'ora_kglr7_db_links'
              'ora_kglr7_dependencies'
              'ora_kglr7_idl_char'
              'ora_kglr7_idl_sb4'
              'ora_kglr7_idl_ub1'
              'ora_kglr7_idl_ub2'
              'ora_mining_number_nt'
              'ora_mining_varchar2_nt'
              'ordaudio'
              'orddoc'
              'ordimage'
              'ordimagesignature'
              'ordplugins'
              'ordsys'
              'ordvideo'
              'outline'
              'outln'
              'outln_pkg'
              'owa'
              'owa_cache'
              'owa_cookie'
              'owa_custom'
              'owa_global'
              'owa_image'
              'owa_init'
              'owa_match'
              'owa_opt_lock'
              'owa_pattern'
              'owa_sec'
              'owa_text'
              'owa_util'
              'parameteridconstants'
              'pas_projekt'
              'pas_psn'
              'path_view'
              'pbsde'
              'pers_zuord_vw'
              'person'
              'person_seq'
              'personen_zuordnung'
              'pkg_syst_analyze'
              'pkg_syst_compile'
              'pkg_syst_execute'
              'pkg_syst_file'
              'pkg_syst_jobs'
              'pkg_syst_lock'
              'pkg_syst_mail'
              'pkg_syst_message'
              'pkg_syst_move'
              'pkg_syst_parameter'
              'pkg_syst_parameter_tools'
              'pkg_syst_process_state'
              'pkg_syst_protocol'
              'pkg_syst_range'
              'pkg_syst_range_parameter'
              'pkg_syst_range_user'
              'pkg_syst_rebuild'
              'pkg_syst_statement'
              'pkg_syst_statement_user'
              'pkg_syst_string_tools'
              'pkg_syst_timer'
              'pkg_syst_tools'
              'pkg_syst_tools_user'
              'plan_table'
              'plitblm'
              'point'
              'polygon'
              'product_component_version'
              'product_profile'
              'product_user_profile'
              'prot_sbusin_jms_protocol'
              'prot_sbusout_jms_protocol'
              'proxy_roles'
              'proxy_users'
              'proxy_users_and_roles'
              'prvt_sam'
              'public'
              'public_dependency'
              'queue_privileges'
              'recyclebin'
              'repcat_repcolumn_base'
              'resource_cost'
              'resource_view'
              'rewritearraytype'
              'rewritemessage'
              'rlm$eventids'
              'rlm$table_alias'
              'role_role_privs'
              'role_sys_privs'
              'role_tab_privs'
              'role_wm_privs'
              'schema_export_objects'
              'scott'
              'sdo'
              'sdo_3gl'
              'sdo_addr_array'
              'sdo_admin'
              'sdo_angle_units'
              'sdo_area_units'
              'sdo_available_non_elem_ops'
              'sdo_available_ops'
              'sdo_cart_text'
              'sdo_catalog'
              'sdo_coord_axes'
              'sdo_coord_axis_names'
              'sdo_coord_op_methods'
              'sdo_coord_op_param_use'
              'sdo_coord_op_param_vals'
              'sdo_coord_op_params'
              'sdo_coord_op_paths'
              'sdo_coord_ops'
              'sdo_coord_ref_sys'
              'sdo_coord_ref_system'
              'sdo_coord_sys'
              'sdo_crs_compound'
              'sdo_crs_engineering'
              'sdo_crs_geocentric'
              'sdo_crs_geographic2d'
              'sdo_crs_geographic3d'
              'sdo_crs_projected'
              'sdo_crs_vertical'
              'sdo_cs'
              'sdo_datum_engineering'
              'sdo_datum_geodetic'
              'sdo_datum_vertical'
              'sdo_datums'
              'sdo_datums_old_format'
              'sdo_datums_old_snapshot'
              'sdo_dim_array'
              'sdo_dim_element'
              'sdo_dist_units'
              'sdo_edge_array'
              'sdo_elem_info_array'
              'sdo_ellipsoids'
              'sdo_ellipsoids_old_format'
              'sdo_ellipsoids_old_snapshot'
              'sdo_gcdr'
              'sdo_geo_addr'
              'sdo_geom'
              'sdo_geometry'
              'sdo_geor'
              'sdo_geor_colormap'
              'sdo_geor_grayscale'
              'sdo_geor_histogram'
              'sdo_geor_int'
              'sdo_geor_metadata'
              'sdo_geor_srs'
              'sdo_geor_utl'
              'sdo_georaster'
              'sdo_georx'
              'sdo_index_metadata'
              'sdo_keywordarray'
              'sdo_link_t'
              'sdo_list_type'
              'sdo_lrs'
              'sdo_mbr'
              'sdo_migrate'
              'sdo_net'
              'sdo_net_mem'
              'sdo_network_manager_t'
              'sdo_network_t'
              'sdo_node_t'
              'sdo_number_array'
              'sdo_ordinate_array'
              'sdo_path_t'
              'sdo_point_type'
              'sdo_preferred_ops_system'
              'sdo_preferred_ops_user'
              'sdo_pridx'
              'sdo_prime_meridians'
              'sdo_projections_old_format'
              'sdo_projections_old_snapshot'
              'sdo_raster'
              'sdo_rasterset'
              'sdo_rdf'
              'sdo_rdf_alias'
              'sdo_rdf_aliases'
              'sdo_rdf_inference'
              'sdo_rdf_internal'
              'sdo_rdf_models'
              'sdo_rdf_rulebases'
              'sdo_rdf_triple'
              'sdo_rdf_triple_s'
              'sdo_regaggr'
              'sdo_regaggrset'
              'sdo_region'
              'sdo_regionset'
              'sdo_relate_mask'
              'sdo_relatemask_table'
              'sdo_router_partition'
              'sdo_rowidpair'
              'sdo_rowidset'
              'sdo_rtree_admin'
              'sdo_sam'
              'sdo_srid_chain'
              'sdo_srid_list'
              'sdo_string_array'
              'sdo_tfm_chain'
              'sdo_tgl_object'
              'sdo_tgl_object_array'
              'sdo_topo'
              'sdo_topo_data$'
              'sdo_topo_geometry'
              'sdo_topo_geometry_layer'
              'sdo_topo_geometry_layer_array'
              'sdo_topo_map'
              'sdo_topo_nstd_tbl'
              'sdo_topo_object'
              'sdo_topo_object_array'
              'sdo_topo_transact_data$'
              'sdo_transient_rule'
              'sdo_transient_rule_set'
              'sdo_tune'
              'sdo_txn_idx_deletes'
              'sdo_txn_idx_exp_upd_rgn'
              'sdo_txn_idx_inserts'
              'sdo_units_of_measure'
              'sdo_util'
              'sdo_vpoint_type'
              'sdo_xml_schemas'
              'sdoaggrtype'
              'seq'
              'seq_sbusin_jms_protocol'
              'seq_sbusout_jms_protocol'
              'seq_sys_syst_protocol_summary'
              'serverinterface'
              'session_context'
              'session_privs'
              'session_roles'
              'setemviewusercontext'
              'si_appendclrhstgr'
              'si_averagecolor'
              'si_chgcontent'
              'si_color'
              'si_colorhistogram'
              'si_convertformat'
              'si_featurelist'
              'si_informtn_schema'
              'si_positionalcolor'
              'si_setavgclrftr'
              'si_setclrhstgrftr'
              'si_setpstnlclrftr'
              'si_settextureftr'
              'si_stillimage'
              'si_texture'
              'sm$version'
              'sql_bind'
              'sql_bind_set'
              'sql_binds'
              'sql_objects'
              'sql_plan_row_type'
              'sql_plan_stat_row_type'
              'sql_plan_table_type'
              'sqlbaseonlydefinitionstruct'
              'sqlbooleansequence'
              'sqlcomparisonruleenum'
              'sqlcompoundcursorblocksequence'
              'sqlcompoundcursorblockstruct'
              'sqlconnectionparameterinfoseq'
              'sqlconnectionparameterinfosequ'
              'sqlconnectionparameterinfostru'
              'sqlconnectionparametertypeenum'
              'sqlconnectionstruct'
              'sqlconstantlistdefinitionstruc'
              'sqlconstantlistvaluesunion'
              'sqlcursorblockstruct'
              'sqlcursorspecifiersequ'
              'sqlcursorspecifiersequence'
              'sqlcursorspecifierstruct'
              'sqlcursorvaluesunion'
              'sqlcursorvalueunion'
              'sqlcursorvalueunionsequence'
              'sqldatablocksequence'
              'sqldatablockstruct'
              'sqldatasequenceunion'
              'sqldataunion'
              'sqldataunionsequence'
              'sqldefinitionsequence'
              'sqldefinitionunion'
              'sqldependencyblockseq'
              'sqldependencyblocksequence'
              'sqldependencyblocksequenceseq'
              'sqldependencyblocksequencesequ'
              'sqldependencyblockstruct'
              'sqldependencyblockunion'
              'sqldomainenum'
              'sqldoublesequence'
              'sqldynamicdefinitionstruct'
              'sqlerrorclassenum'
              'sqlerrordescriptionsequence'
              'sqlerrordescriptionstruct'
              'sqlerrortypeenum'
              'sqlexpressexception'
              'sqlfloatsequence'
              'sqlincludeddependencyblockstru'
              'sqlindexblockstruct'
              'sqlinvalidindexspecificationex'
              'sqljoindefinitionstruct'
              'sqllonglongsequence'
              'sqllongsequence'
              'sqlmetadatadefinitionstruct'
              'sqlmetadatapropertybagseq'
              'sqlmetadatapropertybagsequence'
              'sqlmetadatapropertybagunion'
              'sqlmetadatapropertysequence'
              'sqlmetadatapropertystruct'
              'sqlmetadatapropertyvaluesunion'
              'sqlmultiplierblockstruct'
              'sqloctetsequence'
              'sqlolapiexception'
              'sqlparentstartendblocksequence'
              'sqlparentstartendblockunion'
              'sqlpersistentsourceidsequence'
              'sqlpersistentsourceidstruct'
              'sqlprof_attr'
              'sqlpropertysequence'
              'sqlpropertystruct'
              'sqlrangedefinitionstruct'
              'sqlremoteapiversionmismatchexc'
              'sqlremoteauthenticationexcepti'
              'sqlremoteobjectclosedexception'
              'sqlremotespecificationupdatene'
              'sqlremotetaskinterruptedexcept'
              'sqlserverstruct'
              'sqlset'
              'sqlset_row'
              'sqlshortsequ'
              'sqlshortsequence'
              'sqlstringsequence'
              'sqlunmatchedinputsexception'
              'sqlvaluecursorblocksequence'
              'sqlvaluecursorblockstruct'
              'sqlvaluedefinitionstruct'
              'sqlversioninfostruct'
              'sqlwstringseq'
              'sqlwstringsequence'
              'statement_repository'
              'stmt_audit_option_map'
              'surface'
              'syn'
              'sys'
              'sys_iot_over_51936'
              'sys_syst_protocol_summary'
              'sysman'
              'syst_dbms_lock_allocation'
              'syst_message'
              'syst_param_parameter'
              'syst_param_value'
              'syst_process_state'
              'syst_process_state_detail'
              'syst_protocol'
              'syst_rang_range'
              'syst_rang_value'
              'syst_statement_object'
              'syst_statement_statement'
              'system'
              'system_privilege_map'
              'systools'
              't_q_information'
              't_q_information_identifier'
              't_q_information_result'
              't_q_information_result_ident'
              't_q_information_result_value'
              't_syst_date_list'
              't_syst_number_list'
              't_syst_protocol'
              't_syst_string_list'
              'tab'
              'table_export_objects'
              'table_privilege_map'
              'table_privileges'
              'tablespace_export_objects'
              'tabs'
              'temp$lob'
              'temp_buch_insert'
              'temp_buch_update'
              'temp_person_insert'
              'temp_verlag_insert'
              'tfm_plan'
              'tmp_coord_ops'
              'transportable_export_objects'
              'trusted_servers'
              'tsmsys'
              'ueb_seq'
              'uebersetzer'
              'uebersetzer_seq'
              'update_buch'
              'urifactory'
              'uritype'
              'user_advisor_actions'
              'user_advisor_directives'
              'user_advisor_findings'
              'user_advisor_journal'
              'user_advisor_log'
              'user_advisor_objects'
              'user_advisor_parameters'
              'user_advisor_rationale'
              'user_advisor_recommendations'
              'user_advisor_sqla_rec_sum'
              'user_advisor_sqla_wk_map'
              'user_advisor_sqla_wk_stmts'
              'user_advisor_sqlw_colvol'
              'user_advisor_sqlw_journal'
              'user_advisor_sqlw_parameters'
              'user_advisor_sqlw_stmts'
              'user_advisor_sqlw_sum'
              'user_advisor_sqlw_tables'
              'user_advisor_sqlw_tabvol'
              'user_advisor_sqlw_templates'
              'user_advisor_tasks'
              'user_advisor_templates'
              'user_all_tables'
              'user_application_roles'
              'user_aq_agent_privs'
              'user_arguments'
              'user_associations'
              'user_attribute_transformations'
              'user_audit_object'
              'user_audit_policies'
              'user_audit_policy_columns'
              'user_audit_session'
              'user_audit_statement'
              'user_audit_trail'
              'user_aw_obj'
              'user_aw_prop'
              'user_aw_ps'
              'user_aws'
              'user_base_table_mviews'
              'user_catalog'
              'user_change_notification_regs'
              'user_clu_columns'
              'user_cluster_hash_expressions'
              'user_clusters'
              'user_col_comments'
              'user_col_privs'
              'user_col_privs_made'
              'user_col_privs_recd'
              'user_coll_types'
              'user_cons_columns'
              'user_cons_obj_columns'
              'user_constraints'
              'user_datapump_jobs'
              'user_db_links'
              'user_dependencies'
              'user_dim_attributes'
              'user_dim_child_of'
              'user_dim_hierarchies'
              'user_dim_join_key'
              'user_dim_level_key'
              'user_dim_levels'
              'user_dimensions'
              'user_encrypted_columns'
              'user_epg_dad_authorization'
              'user_errors'
              'user_evaluation_context_tables'
              'user_evaluation_context_vars'
              'user_evaluation_contexts'
              'user_expfil_aset_functions'
              'user_expfil_attribute_sets'
              'user_expfil_attributes'
              'user_expfil_def_index_params'
              'user_expfil_expression_sets'
              'user_expfil_exprset_stats'
              'user_expfil_index_params'
              'user_expfil_indexes'
              'user_expfil_predtab_attributes'
              'user_expfil_privileges'
              'user_extents'
              'user_external_locations'
              'user_external_tables'
              'user_file_group_export_info'
              'user_file_group_files'
              'user_file_group_tables'
              'user_file_group_tablespaces'
              'user_file_group_versions'
              'user_file_groups'
              'user_free_space'
              'user_geometry_columns'
              'user_histograms'
              'user_ind_columns'
              'user_ind_expressions'
              'user_ind_partitions'
              'user_ind_statistics'
              'user_ind_subpartitions'
              'user_indexes'
              'user_indextype_arraytypes'
              'user_indextype_comments'
              'user_indextype_operators'
              'user_indextypes'
              'user_internal_triggers'
              'user_java_arguments'
              'user_java_classes'
              'user_java_derivations'
              'user_java_fields'
              'user_java_implements'
              'user_java_inners'
              'user_java_layouts'
              'user_java_methods'
              'user_java_ncomps'
              'user_java_policy'
              'user_java_resolvers'
              'user_java_throws'
              'user_jobs'
              'user_join_ind_columns'
              'user_libraries'
              'user_lob_partitions'
              'user_lob_subpartitions'
              'user_lob_templates'
              'user_lobs'
              'user_log_group_columns'
              'user_log_groups'
              'user_method_params'
              'user_method_results'
              'user_mp_graph_workspaces'
              'user_mp_parent_workspaces'
              'user_mview_aggregates'
              'user_mview_analysis'
              'user_mview_comments'
              'user_mview_detail_relations'
              'user_mview_joins'
              'user_mview_keys'
              'user_mview_logs'
              'user_mview_refresh_times'
              'user_mviews'
              'user_nested_table_cols'
              'user_nested_tables'
              'user_obj_audit_opts'
              'user_obj_colattrs'
              'user_object_size'
              'user_object_tables'
              'user_objects'
              'user_opancillary'
              'user_oparguments'
              'user_opbindings'
              'user_operator_comments'
              'user_operators'
              'user_outline_hints'
              'user_outlines'
              'user_part_col_statistics'
              'user_part_histograms'
              'user_part_indexes'
              'user_part_key_columns'
              'user_part_lobs'
              'user_part_tables'
              'user_partial_drop_tabs'
              'user_password_limits'
              'user_pending_conv_tables'
              'user_plsql_object_settings'
              'user_policies'
              'user_policy_contexts'
              'user_policy_groups'
              'user_procedures'
              'user_proxies'
              'user_published_columns'
              'user_queue_publishers'
              'user_queue_schedules'
              'user_queue_subscribers'
              'user_queue_tables'
              'user_queues'
              'user_recyclebin'
              'user_refresh'
              'user_refresh_children'
              'user_refs'
              'user_registered_mviews'
              'user_registered_snapshots'
              'user_registry'
              'user_repaudit_attribute'
              'user_repaudit_column'
              'user_repcat'
              'user_repcat_refresh_templates'
              'user_repcat_template_objects'
              'user_repcat_template_parms'
              'user_repcat_template_sites'
              'user_repcat_user_authorization'
              'user_repcat_user_parm_values'
              'user_repcatlog'
              'user_repcolumn'
              'user_repcolumn_group'
              'user_repconflict'
              'user_repddl'
              'user_repflavor_columns'
              'user_repflavor_objects'
              'user_repflavors'
              'user_repgenerated'
              'user_repgenobjects'
              'user_repgroup'
              'user_repgroup_privileges'
              'user_repgrouped_column'
              'user_repkey_columns'
              'user_repobject'
              'user_repparameter_column'
              'user_reppriority'
              'user_reppriority_group'
              'user_repprop'
              'user_represol_stats_control'
              'user_represolution'
              'user_represolution_method'
              'user_represolution_statistics'
              'user_repschema'
              'user_repsites'
              'user_resource_limits'
              'user_resumable'
              'user_rewrite_equivalences'
              'user_rlm4j_event_structs'
              'user_rlm4j_rule_classes'
              'user_rlmgr_comprcls_properties'
              'user_rlmgr_event_structs'
              'user_rlmgr_privileges'
              'user_rlmgr_rule_class_status'
              'user_rlmgr_rule_classes'
              'user_role_privs'
              'user_rsrc_consumer_group_privs'
              'user_rsrc_manager_system_privs'
              'user_rule_set_rules'
              'user_rule_sets'
              'user_rules'
              'user_rulesets'
              'user_scheduler_chain_rules'
              'user_scheduler_chain_steps'
              'user_scheduler_chains'
              'user_scheduler_job_args'
              'user_scheduler_job_log'
              'user_scheduler_job_run_details'
              'user_scheduler_jobs'
              'user_scheduler_program_args'
              'user_scheduler_programs'
              'user_scheduler_running_chains'
              'user_scheduler_running_jobs'
              'user_scheduler_schedules'
              'user_sdo_geom_metadata'
              'user_sdo_geor_sysdata'
              'user_sdo_index_info'
              'user_sdo_index_metadata'
              'user_sdo_lrs_metadata'
              'user_sdo_maps'
              'user_sdo_network_constraints'
              'user_sdo_network_metadata'
              'user_sdo_network_user_data'
              'user_sdo_styles'
              'user_sdo_themes'
              'user_sdo_topo_info'
              'user_sdo_topo_metadata'
              'user_sec_relevant_cols'
              'user_secondary_objects'
              'user_segments'
              'user_sequences'
              'user_snapshot_logs'
              'user_snapshot_refresh_times'
              'user_snapshots'
              'user_source'
              'user_source_tables'
              'user_sqlj_type_attrs'
              'user_sqlj_type_methods'
              'user_sqlj_types'
              'user_sqlset'
              'user_sqlset_binds'
              'user_sqlset_definitions'
              'user_sqlset_plans'
              'user_sqlset_references'
              'user_sqlset_statements'
              'user_sqltune_binds'
              'user_sqltune_plans'
              'user_sqltune_rationale_plan'
              'user_sqltune_statistics'
              'user_stored_settings'
              'user_subpart_col_statistics'
              'user_subpart_histograms'
              'user_subpart_key_columns'
              'user_subpartition_templates'
              'user_subscribed_columns'
              'user_subscribed_tables'
              'user_subscriptions'
              'user_summaries'
              'user_summary_aggregates'
              'user_summary_detail_tables'
              'user_summary_joins'
              'user_summary_keys'
              'user_synonyms'
              'user_sys_privs'
              'user_tab_col_statistics'
              'user_tab_cols'
              'user_tab_columns'
              'user_tab_comments'
              'user_tab_histograms'
              'user_tab_modifications'
              'user_tab_partitions'
              'user_tab_privs'
              'user_tab_privs_made'
              'user_tab_privs_recd'
              'user_tab_statistics'
              'user_tab_stats_history'
              'user_tab_subpartitions'
              'user_tables'
              'user_tablespaces'
              'user_transformations'
              'user_trigger_cols'
              'user_triggers'
              'user_ts_quotas'
              'user_tune_mview'
              'user_type_attrs'
              'user_type_methods'
              'user_type_versions'
              'user_types'
              'user_unused_col_tabs'
              'user_updatable_columns'
              'user_users'
              'user_ustats'
              'user_varrays'
              'user_views'
              'user_warning_settings'
              'user_wm_cons_columns'
              'user_wm_constraints'
              'user_wm_ind_columns'
              'user_wm_ind_expressions'
              'user_wm_locked_tables'
              'user_wm_modified_tables'
              'user_wm_privs'
              'user_wm_ric_info'
              'user_wm_tab_triggers'
              'user_wm_versioned_tables'
              'user_wm_vt_errors'
              'user_workspace_privs'
              'user_workspace_savepoints'
              'user_workspaces'
              'user_xml_column_names'
              'user_xml_indexes'
              'user_xml_schemas'
              'user_xml_tab_cols'
              'user_xml_tables'
              'user_xml_view_cols'
              'user_xml_views'
              'utl_all_ind_comps'
              'utl_coll'
              'utl_compress'
              'utl_encode'
              'utl_file'
              'utl_gdk'
              'utl_http'
              'utl_i18n'
              'utl_inaddr'
              'utl_lms'
              'utl_match'
              'utl_nla'
              'utl_nla_array_dbl'
              'utl_nla_array_flt'
              'utl_nla_array_int'
              'utl_raw'
              'utl_ref'
              'utl_smtp'
              'utl_tcp'
              'utl_url'
              'v$_lock'
              'v$access'
              'v$active_instances'
              'v$active_services'
              'v$active_sess_pool_mth'
              'v$active_session_history'
              'v$advisor_progress'
              'v$alert_types'
              'v$aq'
              'v$aq1'
              'v$archive'
              'v$archive_dest'
              'v$archive_dest_status'
              'v$archive_gap'
              'v$archive_processes'
              'v$archived_log'
              'v$asm_alias'
              'v$asm_client'
              'v$asm_disk'
              'v$asm_disk_stat'
              'v$asm_diskgroup'
              'v$asm_diskgroup_stat'
              'v$asm_file'
              'v$asm_operation'
              'v$asm_template'
              'v$aw_aggregate_op'
              'v$aw_allocate_op'
              'v$aw_calc'
              'v$aw_longops'
              'v$aw_olap'
              'v$aw_session_info'
              'v$backup'
              'v$backup_archivelog_details'
              'v$backup_archivelog_summary'
              'v$backup_async_io'
              'v$backup_controlfile_details'
              'v$backup_controlfile_summary'
              'v$backup_copy_details'
              'v$backup_copy_summary'
              'v$backup_corruption'
              'v$backup_datafile'
              'v$backup_datafile_details'
              'v$backup_datafile_summary'
              'v$backup_device'
              'v$backup_files'
              'v$backup_piece'
              'v$backup_piece_details'
              'v$backup_redolog'
              'v$backup_set'
              'v$backup_set_details'
              'v$backup_set_summary'
              'v$backup_spfile'
              'v$backup_spfile_details'
              'v$backup_spfile_summary'
              'v$backup_sync_io'
              'v$bgprocess'
              'v$bh'
              'v$block_change_tracking'
              'v$blocking_quiesce'
              'v$bsp'
              'v$buffer_pool'
              'v$buffer_pool_statistics'
              'v$buffered_publishers'
              'v$buffered_queues'
              'v$buffered_subscribers'
              'v$circuit'
              'v$class_cache_transfer'
              'v$class_ping'
              'v$client_stats'
              'v$cluster_interconnects'
              'v$configured_interconnects'
              'v$context'
              'v$controlfile'
              'v$controlfile_record_section'
              'v$copy_corruption'
              'v$cr_block_server'
              'v$current_block_server'
              'v$database'
              'v$database_block_corruption'
              'v$database_incarnation'
              'v$datafile'
              'v$datafile_copy'
              'v$datafile_header'
              'v$dataguard_config'
              'v$dataguard_stats'
              'v$dataguard_status'
              'v$datapump_job'
              'v$datapump_session'
              'v$db_cache_advice'
              'v$db_object_cache'
              'v$db_pipes'
              'v$db_transportable_platform'
              'v$dbfile'
              'v$dblink'
              'v$deleted_object'
              'v$dispatcher'
              'v$dispatcher_config'
              'v$dispatcher_rate'
              'v$dlm_all_locks'
              'v$dlm_convert_local'
              'v$dlm_convert_remote'
              'v$dlm_latch'
              'v$dlm_locks'
              'v$dlm_misc'
              'v$dlm_ress'
              'v$dlm_traffic_controller'
              'v$enabledprivs'
              'v$enqueue_lock'
              'v$enqueue_stat'
              'v$enqueue_statistics'
              'v$event_histogram'
              'v$event_name'
              'v$eventmetric'
              'v$execution'
              'v$fast_start_servers'
              'v$fast_start_transactions'
              'v$file_cache_transfer'
              'v$file_histogram'
              'v$file_ping'
              'v$filemetric'
              'v$filemetric_history'
              'v$filespace_usage'
              'v$filestat'
              'v$fixed_table'
              'v$fixed_view_definition'
              'v$flash_recovery_area_usage'
              'v$flashback_database_log'
              'v$flashback_database_logfile'
              'v$flashback_database_stat'
              'v$gc_element'
              'v$gc_elements_with_collisions'
              'v$gcshvmaster_info'
              'v$gcspfmaster_info'
              'v$ges_blocking_enqueue'
              'v$ges_enqueue'
              'v$global_blocked_locks'
              'v$global_transaction'
              'v$globalcontext'
              'v$hs_agent'
              'v$hs_parameter'
              'v$hs_session'
              'v$hvmaster_info'
              'v$indexed_fixed_column'
              'v$instance'
              'v$instance_cache_transfer'
              'v$instance_log_group'
              'v$instance_recovery'
              'v$java_library_cache_memory'
              'v$java_pool_advice'
              'v$javapool'
              'v$latch'
              'v$latch_children'
              'v$latch_misses'
              'v$latch_parent'
              'v$latchholder'
              'v$latchname'
              'v$library_cache_memory'
              'v$librarycache'
              'v$license'
              'v$loadistat'
              'v$loadpstat'
              'v$lock'
              'v$lock_activity'
              'v$lock_element'
              'v$lock_type'
              'v$locked_object'
              'v$locks_with_collisions'
              'v$log'
              'v$log_history'
              'v$logfile'
              'v$loghist'
              'v$logmnr_callback'
              'v$logmnr_contents'
              'v$logmnr_dictionary'
              'v$logmnr_dictionary_load'
              'v$logmnr_latch'
              'v$logmnr_logfile'
              'v$logmnr_logs'
              'v$logmnr_parameters'
              'v$logmnr_process'
              'v$logmnr_region'
              'v$logmnr_session'
              'v$logmnr_stats'
              'v$logmnr_transaction'
              'v$logstdby'
              'v$logstdby_process'
              'v$logstdby_progress'
              'v$logstdby_state'
              'v$logstdby_stats'
              'v$logstdby_transaction'
              'v$managed_standby'
              'v$map_comp_list'
              'v$map_element'
              'v$map_ext_element'
              'v$map_file'
              'v$map_file_extent'
              'v$map_file_io_stack'
              'v$map_library'
              'v$map_subelement'
              'v$max_active_sess_target_mth'
              'v$metric'
              'v$metric_history'
              'v$metricgroup'
              'v$metricname'
              'v$mttr_target_advice'
              'v$mutex_sleep'
              'v$mutex_sleep_history'
              'v$mvrefresh'
              'v$mystat'
              'v$nls_parameters'
              'v$nls_valid_values'
              'v$object_dependency'
              'v$object_usage'
              'v$obsolete_parameter'
              'v$offline_range'
              'v$open_cursor'
              'v$option'
              'v$osstat'
              'v$parallel_degree_limit_mth'
              'v$parameter'
              'v$parameter_valid_values'
              'v$parameter2'
              'v$pga_target_advice'
              'v$pga_target_advice_histogram'
              'v$pgastat'
              'v$pq_sesstat'
              'v$pq_slave'
              'v$pq_sysstat'
              'v$pq_tqstat'
              'v$process'
              'v$process_memory'
              'v$process_memory_detail'
              'v$process_memory_detail_prog'
              'v$propagation_receiver'
              'v$propagation_sender'
              'v$proxy_archivedlog'
              'v$proxy_archivelog_details'
              'v$proxy_archivelog_summary'
              'v$proxy_copy_details'
              'v$proxy_copy_summary'
              'v$proxy_datafile'
              'v$pwfile_users'
              'v$px_buffer_advice'
              'v$px_process'
              'v$px_process_sysstat'
              'v$px_session'
              'v$px_sesstat'
              'v$queue'
              'v$queueing_mth'
              'v$recover_file'
              'v$recovery_file_dest'
              'v$recovery_file_status'
              'v$recovery_log'
              'v$recovery_progress'
              'v$recovery_status'
              'v$replprop'
              'v$replqueue'
              'v$reqdist'
              'v$reserved_words'
              'v$resource'
              'v$resource_limit'
              'v$restore_point'
              'v$resumable'
              'v$rfs_thread'
              'v$rman_backup_job_details'
              'v$rman_backup_subjob_details'
              'v$rman_backup_type'
              'v$rman_configuration'
              'v$rman_output'
              'v$rman_status'
              'v$rollname'
              'v$rollstat'
              'v$rowcache'
              'v$rowcache_parent'
              'v$rowcache_subordinate'
              'v$rsrc_cons_group_history'
              'v$rsrc_consumer_group'
              'v$rsrc_consumer_group_cpu_mth'
              'v$rsrc_plan'
              'v$rsrc_plan_cpu_mth'
              'v$rsrc_plan_history'
              'v$rsrc_session_info'
              'v$rule'
              'v$rule_set'
              'v$rule_set_aggregate_stats'
              'v$scheduler_running_jobs'
              'v$segment_statistics'
              'v$segstat'
              'v$segstat_name'
              'v$serv_mod_act_stats'
              'v$service_event'
              'v$service_stats'
              'v$service_wait_class'
              'v$servicemetric'
              'v$servicemetric_history'
              'v$services'
              'v$ses_optimizer_env'
              'v$sess_io'
              'v$sess_time_model'
              'v$session'
              'v$session_connect_info'
              'v$session_cursor_cache'
              'v$session_event'
              'v$session_fix_control'
              'v$session_longops'
              'v$session_object_cache'
              'v$session_wait'
              'v$session_wait_class'
              'v$session_wait_history'
              'v$sessmetric'
              'v$sesstat'
              'v$sga'
              'v$sga_current_resize_ops'
              'v$sga_dynamic_components'
              'v$sga_dynamic_free_memory'
              'v$sga_resize_ops'
              'v$sga_target_advice'
              'v$sgainfo'
              'v$sgastat'
              'v$shared_pool_advice'
              'v$shared_pool_reserved'
              'v$shared_server'
              'v$shared_server_monitor'
              'v$sort_segment'
              'v$sort_usage'
              'v$spparameter'
              'v$sql'
              'v$sql_bind_capture'
              'v$sql_bind_data'
              'v$sql_bind_metadata'
              'v$sql_cursor'
              'v$sql_join_filter'
              'v$sql_optimizer_env'
              'v$sql_plan'
              'v$sql_plan_statistics'
              'v$sql_plan_statistics_all'
              'v$sql_redirection'
              'v$sql_shared_cursor'
              'v$sql_shared_memory'
              'v$sql_workarea'
              'v$sql_workarea_active'
              'v$sql_workarea_histogram'
              'v$sqlarea'
              'v$sqlarea_plan_hash'
              'v$sqlstats'
              'v$sqltext'
              'v$sqltext_with_newlines'
              'v$standby_apply_snapshot'
              'v$standby_log'
              'v$statistics_level'
              'v$statname'
              'v$streams_apply_coordinator'
              'v$streams_apply_reader'
              'v$streams_apply_server'
              'v$streams_capture'
              'v$streams_pool_advice'
              'v$streams_transaction'
              'v$subcache'
              'v$sys_optimizer_env'
              'v$sys_time_model'
              'v$sysaux_occupants'
              'v$sysmetric'
              'v$sysmetric_history'
              'v$sysmetric_summary'
              'v$sysstat'
              'v$system_cursor_cache'
              'v$system_event'
              'v$system_fix_control'
              'v$system_parameter'
              'v$system_parameter2'
              'v$system_wait_class'
              'v$tablespace'
              'v$temp_cache_transfer'
              'v$temp_extent_map'
              'v$temp_extent_pool'
              'v$temp_histogram'
              'v$temp_ping'
              'v$temp_space_header'
              'v$tempfile'
              'v$temporary_lobs'
              'v$tempseg_usage'
              'v$tempstat'
              'v$thread'
              'v$threshold_types'
              'v$timer'
              'v$timezone_file'
              'v$timezone_names'
              'v$transaction'
              'v$transaction_enqueue'
              'v$transportable_platform'
              'v$tsm_sessions'
              'v$type_size'
              'v$undostat'
              'v$unusable_backupfile_details'
              'v$version'
              'v$vpd_policy'
              'v$waitclassmetric'
              'v$waitclassmetric_history'
              'v$waitstat'
              'v$wallet'
              'v$xml_audit_trail'
              'v_olapi_iface_object_history'
              'v_olapi_iface_op_history'
              'v_olapi_memory_op_history'
              'v_olapi_session_history'
              'verlag'
              'verlag_seq'
              'vorschlagsliste'
              'vorschlagsliste_seq'
              'wm$all_nextver_view'
              'wm$all_version_hview_wdepth'
              'wm$base_hierarchy_view'
              'wm$base_nextver_view'
              'wm$base_version_view'
              'wm$conf_base_hierarchy_view'
              'wm$conf_base_nextver_view'
              'wm$conf1_hierarchy_view'
              'wm$conf1_nextver_view'
              'wm$conf2_hierarchy_view'
              'wm$conf2_nextver_view'
              'wm$curconflict_hierarchy_view'
              'wm$curconflict_nextvers_view'
              'wm$curconflict_parvers_view'
              'wm$current_child_nextvers_view'
              'wm$current_child_versions_view'
              'wm$current_cons_nextvers_view'
              'wm$current_cons_versions_view'
              'wm$current_hierarchy_view'
              'wm$current_nextvers_view'
              'wm$current_parvers_view'
              'wm$current_savepoints_view'
              'wm$current_ver_view'
              'wm$current_workspace_view'
              'wm$diff1_hierarchy_view'
              'wm$diff1_nextver_view'
              'wm$diff2_hierarchy_view'
              'wm$diff2_nextver_view'
              'wm$mw_nextvers_view'
              'wm$mw_versions_view'
              'wm$mw_versions_view_9i'
              'wm$parconflict_hierarchy_view'
              'wm$parconflict_nextvers_view'
              'wm$parconflict_parvers_view'
              'wm$parent_hierarchy_view'
              'wm$parent_workspace_view'
              'wm$parvers_view'
              'wm$table_nextvers_view'
              'wm$table_parvers_view'
              'wm$table_versions_in_live_view'
              'wm$table_ws_parvers_view'
              'wm$ver_bef_inst_nextvers_view'
              'wm$ver_bef_inst_parvers_view'
              'wm$versions_in_live_view'
              'wm_compress_batch_sizes'
              'wm_compressible_tables'
              'wm_events_info'
              'wm_installation'
              'wm_period'
              'wm_replication_info'
              'wmsys'
              'wpg_docload'
              'xdb'
              'xdb$string_list_t'
              'xdb_pvtrig_pkg'
              'xdb_rvtrig_pkg'
              'xdburitype'
              'xmldom'
              'xmlformat'
              'xmlparser'
              'xmlsequencetype'
              'xmltype'
              'xslprocessor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'declare start'
        ConditionList = <
          item
            TagList.Strings = (
              'declare')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'declare end'
        HighlightPos = cpAny
        CancelNextRules = True
        DrawStaple = True
        IgnoreAsParent = False
        AutoCloseText = 'BEGIN'#13#10'  '#13#10'END ;'
      end
      item
        DisplayName = 'declare end'
        BlockName = 'declare start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            IgnoreCase = True
          end>
        BlockEnd = 'declare start'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'DDL start'
        BlockName = 'DDL start'
        StrictParent = True
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              'OR'
              'PACKAGE')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'ALTER'
              'CREATE'
              'DROP'
              'REMAME'
              'TRUNCATE')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'DDL end'
        NameFmt = '%s0 %s-1 %s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 6
        IgnoreAsParent = False
      end
      item
        DisplayName = 'DDL end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        BlockEnd = 'DDL start'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* This calculates a nextdate for a defined interval.'
      
        '   The function works similar to the functionality in DBMS_JOB *' +
        '/'
      'FUNCTION calc_next_date (i_interval IN VARCHAR2,'
      
        '                         i_default  IN DATE DEFAULT SYSDATE) RET' +
        'URN DATE IS'
      '  v_date DATE;'
      '  v_statement VARCHAR2(5000);'
      'BEGIN'
      '  IF i_interval IS NULL THEN'
      
        '    RETURN (i_default);-- if no interval defined return the defa' +
        'ult value'
      '  ELSE'
      '    v_statement := '#39'SELECT '#39'||i_interval||'#39' FROM DUAL'#39';'
      '    execute immediate v_statement into v_date;'
      '    RETURN (v_date);'
      '  END IF;'
      'EXCEPTION'
      
        '  WHEN OTHERS THEN  -- if any error occurs, return the default v' +
        'alue'
      '    RETURN (i_default);'
      'END calc_next_date;')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const')
    Gramma.Gramma = 
      'Complex_name =  <Identifier> | Complex_name "." <Identifier>;'#13#10'P' +
      'ackage_declaration = '#39'package'#39' ('#39'body'#39')? Complex_name ('#39'is'#39' | '#39'a' +
      's'#39');'#13#10'type_declaration = '#39'type'#39' ('#39'body'#39')? Complex_name ('#39'is'#39' | '#39 +
      'as'#39');'#13#10
    MarkedBlockStyle = 'Marked block'
    CurrentLineStyle = 'Current Line'
    DefaultStyleName = 'Default'
    Extentions = 'sql pck'
    LexerName = 'PL/SQL'
    FullRefreshSize = 5000
    LineComment = '--'
    AlwaysSyncBlockAnal = True
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal56: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16772341
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Search Match'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindow
        Font.Height = -16
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clBlack
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clLime
      end
      item
        DisplayName = 'Function background'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16774389
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current block bound'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'OP Keywords'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = 
          '#if only one " string to end '#13#10'#of line will be highlighted, '#13#10'#' +
          'otherwise after closing it '#13#10'#string will not be highlighted '#13#10'"' +
          '.*?("|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'end'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = 'end\b'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '#first charecter can'#39't be digit'#13#10'[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'#13#10' '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '#any sequence of digits'#13#10'\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '#all chars after '#39' to end of line'#13#10#39'.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '#Hex is started with $ sign'#13#10'\$[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment in JSP'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-&%\$\{\}!]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'addressof'
              'alias'
              'and'
              'appactivate'
              'as'
              'beep'
              'binary'
              'boolean'
              'byref'
              'byte'
              'byval'
              'call'
              'case'
              'catch'
              'chdir'
              'chdrive'
              'choose'
              'class'
              'close'
              'const'
              'currency'
              'date'
              'decimal'
              'declare'
              'deletesetting'
              'dim'
              'do'
              'doevents'
              'double'
              'each'
              'else'
              'elseif'
              'empty'
              'end'
              'enum'
              'eqv'
              'erase'
              'error'
              'event'
              'exit'
              'False'
              'filecopy'
              'finally'
              'for'
              'friend'
              'function'
              'get'
              'gosub'
              'goto'
              'if'
              'imp'
              'implements'
              'in'
              'input'
              'integer'
              'is'
              'kill'
              'let'
              'lib'
              'like'
              'line'
              'load'
              'lock'
              'long'
              'loop'
              'lset'
              'new'
              'next'
              'not'
              'null'
              'object'
              'on'
              'optional'
              'or'
              'paramarray'
              'private'
              'property'
              'public'
              'return'
              'select'
              'set'
              'single'
              'static'
              'step'
              'stop'
              'string'
              'sub'
              'switch'
              'then'
              'to'
              'True'
              'try'
              'type'
              'typeof'
              'unlock'
              'until'
              'variant'
              'wend'
              'while'
              'with'
              'withevents'
              'write'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Sub begin line break'
        StyleName = 'Function separator'
        BlockName = 'function'
        NotParent = True
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Sub end line break'
        StyleName = 'Function separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        LinePos = lbBottom
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Sub end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function'
        StyleName = 'Function background'
        ConditionList = <
          item
            TagList.Strings = (
              'function'
              'sub')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Sub end'
        Highlight = True
        NameFmt = '%s0 %s-1'
        DynHighlight = dhRange
        HighlightPos = cpBound
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Reserved word'
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block bound'
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'if'
              'property'
              'select'
              'type'
              'with')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s1 ...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        SameIdent = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 509
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Dim decl'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'dim')
            TokenTypes = 4
            IgnoreCase = True
          end>
        NotCollapsed = True
        GroupFmt = 'Variables'
        HighlightPos = cpBound
        NoEndRule = True
        TreeItemImage = 4
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Current block bound'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'OP Keywords'
        StyleName = 'OP Keywords'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'imports'
              'Inherits'
              'Overloads'
              'Overrides'
              'private'
              'property'
              'protected'
              'public')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      #39' Syntax highlighting'
      'Function PrintNumber'
      '  Dim Number'
      '  Dim X      34.4e+5'
      ''
      '  Number = 123456'
      '  Response.Write "The number is " & number'
      '             '
      '  For I = 0 To Number'
      '    X = X + &h4c'
      '    X = X - &o8'
      '    X = X + 1.0'
      '  Next'
      ''
      '  I = I + @;  '
      'End Function')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    Gramma.Gramma = 
      'Skip = <Comment>;'#13#10#13#10'// Used'#13#10'NameDetector = <Identifier> Braket' +
      '? '#39'.'#39';'#13#10#13#10'FuncCall = <Identifier> Braket;'#13#10#13#10'Braket = Braket1 | ' +
      'Braket2;'#13#10#13#10'Braket1 = LeftBraket1 '#39')'#39';'#13#10#13#10'LeftBraket1 = LeftBrak' +
      'et1 <Unknown> |'#13#10'             '#39'('#39';'#13#10'             '#13#10'Braket2 = Lef' +
      'tBraket2 '#39']'#39';'#13#10#13#10'LeftBraket2 = LeftBraket2 <Unknown> |'#13#10'        ' +
      '     '#39'['#39';'
    MarkedBlockStyle = 'Marked block'
    CurrentLineStyle = 'Current Line'
    Extentions = 'bas vb vbs'
    LexerName = 'Visual Basic Script'
    LineComment = #39
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal38: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String RE'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 9199360
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)" (\\\\|\\"|.)*? ("|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 2'
        StyleName = 'String'
        TokenType = 4
        Expression = #39' (\\'#39'|.)*? ('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String Regex'
        StyleName = 'String RE'
        TokenType = 4
        Expression = '#before / must be =,('#13#10'(?<=[=\(&]\s*) / (\\/|.)*? (/[gim]*|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^~!]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'break'
              'case'
              'catch'
              'class'
              'const'
              'continue'
              'debugger'
              'default'
              'delete'
              'do'
              'else'
              'enum'
              'export'
              'extends'
              'false'
              'finally'
              'for'
              'function'
              'if'
              'import'
              'in'
              'new'
              'null'
              'return'
              'super'
              'switch'
              'this'
              'throw'
              'true'
              'try'
              'typeof'
              'var'
              'void'
              'while'
              'with')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'for/if'
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'for'
              'if')
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%sz0'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'name: function'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              ':')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NameFmt = 'function %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        CollapseFmt = 'function %s0'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
          end>
        BlockEnd = 'function end'
        EndOfTextClose = True
        NameFmt = '%s0~s[)]'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '%s0~s[)]'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function end'
        BlockName = 'function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'var'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'var')
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <
      item
        Name = 'switchs'
        Description = 'switch statement'
        Code.Strings = (
          'switch (|)'
          '{'
          '  case : ;'
          '  break;'
          '  case : ;'
          '  break;'
          '}')
      end
      item
        Name = 'switche'
        Description = 'switch statement (with default)'
        Code.Strings = (
          'switch (|)'
          '{'
          '  case : ;'
          '  break;'
          '  case : ;'
          '  break;'
          '  default: ;'
          '}')
      end
      item
        Name = 'fors'
        Description = 'for (no opening/closing braces)'
        Code.Strings = (
          'for (|; ;)')
      end
      item
        Name = 'forb'
        Description = 'for statement'
        Code.Strings = (
          'for (|; ;)'
          '{'
          ''
          '}')
      end
      item
        Name = 'for'
        Description = 'for statement'
        Code.Strings = (
          'for (int i = 0; i <|; i++)'
          '{'
          '}')
      end
      item
        Name = 'funcp'
        Description = 'function declaration with parenthesis'
        Code.Strings = (
          'function |()'
          '{'
          ''
          '}')
      end
      item
        Name = 'func'
        Description = 'function declaration'
        Code.Strings = (
          'function | {'
          ''
          '}')
      end
      item
        Name = 'ifs'
        Description = 'if (no opening/closing braces)'
        Code.Strings = (
          'if (|)')
      end
      item
        Name = 'ifb'
        Description = 'if statement'
        Code.Strings = (
          'if (|)'
          '{'
          ''
          '}')
      end
      item
        Name = 'ife'
        Description = 'if (no opening/closing braces) else (no opening/closing braces)'
        Code.Strings = (
          'if (|)'
          ''
          'else')
      end
      item
        Name = 'ifeb'
        Description = 'if else'
        Code.Strings = (
          'if (|)'
          '{'
          ''
          '}'
          'else'
          '{'
          ''
          '}')
      end
      item
        Name = 'trye'
        Description = 'try catch'
        Code.Strings = (
          'try'
          '{'
          '  |'
          '}'
          'catch()'
          '{'
          '}')
      end
      item
        Name = 'trycf'
        Description = 'try catch finally'
        Code.Strings = (
          'try'
          '{'
          '  |'
          '}'
          'catch()'
          '{'
          '}'
          'finally'
          '{'
          '}')
      end
      item
        Name = 'whileb'
        Description = 'while statement'
        Code.Strings = (
          'while (|)'
          '{'
          ''
          '}')
      end
      item
        Name = 'whiles'
        Description = 'while (no opening/closing braces)'
        Code.Strings = (
          'while (|)')
      end
      item
        Name = 'dow'
        Description = 'do while statement'
        Code.Strings = (
          'do'
          '  |'
          'while ();')
      end
      item
        Name = 'forin'
        Description = 'for in statement'
        Code.Strings = (
          'for (| in)')
      end>
    SubAnalyzers = <>
    SampleText.Strings = (
      '// example function'
      'function Init() {'
      #9'addMenuItem('#39'Txt'#39', '#39'Ctrl+\'#39#39');'
      #9'addMenuItem('#39'Txt2'#39', '#39'Ctrl+Alt+\'#39#39');'
      #9'addMenuItem('#39'Txt3'#39', '#39'Ctrl+Alt+;'#39');'
      '}'
      ''
      'var s_regex = /^<\/?\w[\w\:\-]*.*?>/gi;'
      '    not_regex = 1 / 2 + (1+2) / 3;'
      '    '
      'findNewEditPoint: function(inc, offset) {'
      #9'return -1'
      '}'
      '    '
      'function SetEnabled(A,count)'
      '{'
      '  for(i= 0; i< count;i++)'
      '    A(i).Enabled = !A(i).Enabled;'
      '}'
      ''
      'function render(){'
      #9#9'$('#39'#basket'#39').html('#39#39');'
      #9#9'for(id in basket){'
      #9#9#9'if(basket[id].q>0){'
      #9#9#9#9'var cl;'
      #9#9#9#9'var goods=basket[id];'
      #9#9#9#9'basketForPHP4 += id+'#39'|'#39'+goods.q+'#39';'#39';'
      #9#9#9#9'b=b+" \'
      #9#9#9#9#9'<div class='#39'"+cl+"'#39'> \'
      #9#9#9#9#9#9'<td width='#39'166'#39' valign='#39'top'#39'> \'
      #9#9#9#9#9#9#9'"+goods.n+'#39'"...'#39';'
      ''
      #9#9#9#9's=s+parseInt(goods.q)*parseInt(goods.c);'
      
        #9#9#9#9'$.cookie('#39'basketForPHP4'#39', $.toJSON(basketForPHP4),{path: '#39'/'#39 +
        '});'
      #9#9#9'} else{'
      #9#9#9#9'delete basket[id];'
      #9#9#9'}'
      #9#9'}'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'js'
    LexerName = 'JavaScript'
    Notes.Strings = (
      'Fixed by Alex, uvviewsoft.com'
      ' -tree: added if/for/var'
      ' -tree: func params shown'
      ' -strings '#39'..'#39
      ' -strings multiline ".."'
      ' -strings /../')
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal60: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Current function'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16772332
        FormatType = ftBackGround
        MultiLineBorder = True
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^~!]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'boolean'
              'break'
              'byte'
              'case'
              'catch'
              'char'
              'class'
              'const'
              'continue'
              'default'
              'do'
              'double'
              'else'
              'extends'
              'false'
              'final'
              'finally'
              'float'
              'for'
              'goto'
              'if'
              'implements'
              'import'
              'instanceof'
              'int'
              'interface'
              'long'
              'native'
              'new'
              'null'
              'package'
              'private'
              'protected'
              'public'
              'return'
              'short'
              'static'
              'string'
              'super'
              'switch'
              'synchronized'
              'this'
              'throw'
              'throws'
              'transient'
              'true'
              'try'
              'void'
              'volatile'
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function begin'
        StyleName = 'Current function'
        BlockName = 'class start'
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockEnd = 'function end'
        Highlight = True
        NameFmt = '%s-1'
        RefToCondEnd = True
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '%s0 %s-1() { ... }'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function end'
        BlockName = 'function begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class start'
        ConditionList = <
          item
            TagList.Strings = (
              '{'
              'extends')
            TokenTypes = 12
            IgnoreCase = True
          end
          item
            CondType = tcSkip
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
          end>
        BlockEnd = 'End'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpBound
        CancelNextRules = True
        CollapseFmt = '%s0 %s-1 { ... }'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        IdentIndex = 1
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '/* ... */'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* Java syntax highlighting */'
      'import java.util.*;'
      ''
      '/** Example class */'
      'public class Sample {'
      '  public static void main(String[] args) {'
      '    int i = 0;'
      '    for(i = 0; i < 10; i++)'
      '      System.out.println("Hello world");'
      '  }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'keyword')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'as'
    LexerName = 'ActionScript'
    LineComment = '//'
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal36: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Text'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clInfoBk
        MultiLineBorder = True
      end
      item
        DisplayName = 'Tag bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Tag param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tag properties'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Unknown tag content'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
      end
      item
        DisplayName = 'Tag Key'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Bound'
        Enabled = False
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
        MultiLineBorder = True
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (attribute)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 14155775
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (tag)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Current Block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15400927
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Current Tag'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clSilver
      end
      item
        DisplayName = 'ASP back'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clCream
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?ms)<!--.*?(-->|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment end'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '# for use in <SCRIPT>'#13#10'-->'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '<'
        StyleName = 'Tag bound'
        TokenType = 10
        Expression = '<[/!\-%\?]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '>'
        StyleName = 'Tag bound'
        TokenType = 11
        Expression = '[%\?/]?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 7
        Expression = '\#[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag param'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        TokenType = 4
        Expression = '(?s) ("|'#39') .*? (\1|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag ident'
        StyleName = 'Default'
        BlockName = 'Tag begin'
        TokenType = 2
        Expression = '[^\s=>]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '='
        StyleName = 'Tag bound'
        BlockName = 'Tag begin'
        TokenType = 3
        Expression = '='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Unknow tag content'
        StyleName = 'Unknown tag content'
        BlockName = 'Tag begin'
        Expression = '[^>]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '&...'
        StyleName = 'Tag Key'
        TokenType = 9
        Expression = '&\w+;'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text'
        StyleName = 'Text'
        TokenType = 9
        Expression = '[^<&]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Tag keys'
        StyleName = 'Tag Key'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '<'
              '</')
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag property'
        StyleName = 'Tag properties'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag property value'
        StyleName = 'Tag param'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag begin'
        StyleName = 'Current Tag'
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Simple tag block'
        ConditionList = <
          item
            TagList.Strings = (
              'br'
              'hr'
              'image'
              'img'
              'link')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 1024
          end>
        BlockEnd = 'Simple tag block end'
        HighlightPos = cpBound
        TreeItemStyle = 'Tree item (tag)'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Simple tag block end'
        BlockName = 'Simple tag block'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag block begin'
        StyleName = 'Current Block'
        ConditionList = <
          item
            TagList.Strings = (
              'br'
              'hr'
              'image'
              'img'
              'link')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<'
              '<!')
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag block end'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '< %s0 >'
        TreeItemStyle = 'Tree item (tag)'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '</')
            TokenTypes = 1024
          end>
        SameIdent = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Comment begin'
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '<!--  ...  -->'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag attribute'
        BlockName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s0 %s-1 %s-2'
        HighlightPos = cpBound
        NoEndRule = True
        TreeItemStyle = 'Tree item (attribute)'
        IgnoreAsParent = False
      end>
    CodeTemplates = <
      item
        Name = 'htm'
        Code.Strings = (
          '<html>'
          '  <head>'
          '    <title><caret></title>'
          '  </head>'
          '  <body>'
          '    '
          '  </body>'
          '</html>')
        Advanced = True
      end
      item
        Name = 'body'
        Code.Strings = (
          '<body bgcolor=<caret> text= link= alink= vlink=>'
          ''
          '</body>')
        Advanced = True
      end
      item
        Name = 'head'
        Code.Strings = (
          '<head>'
          '  <title><caret></title>'
          '  <meta http-equiv="Content-Language" content="en">'
          
            '  <meta http-equiv="Content-Type" content="text/html; charset=wi' +
            'ndows-1251">'
          '  <meta name="author" content="">'
          '  <meta name="generator" content="">'
          '  <meta name="keywords" content="">'
          '  <meta name="description" content="">'
          '  <link rel="stylesheet" type="text/css" href="">'
          '  <link rel="shortcut icon" type="image/x-icon" href="">'
          '</head>')
        Advanced = True
      end
      item
        Name = 'linki'
        Description = 'link to image'
        Code.Strings = (
          '<link rel="shortcut icon" type="image/x-icon" href="<caret>">')
        Advanced = True
      end
      item
        Name = 'link'
        Description = 'hyperlink'
        Code.Strings = (
          '<link rel="stylesheet" type="text/css" href="<caret>">')
        Advanced = True
      end
      item
        Name = 'meta'
        Code.Strings = (
          '<meta http-equiv="Content-Language" content="en">'
          
            '<meta http-equiv="Content-Type" content="text/html; charset=wind' +
            'ows-1251">'
          '<meta name="author" content="<caret>">'
          '<meta name="generator" content="">'
          '<meta Name="keywords" Content="">'
          '<meta Name="description" Content="">')
        Advanced = True
      end
      item
        Name = 'html'
        Code.Strings = (
          '<!DOCTYPE HTML PUBLIC  "-//W3C//DTD HTML 4.0  Transitional//EN"'
          '"http://www.w3.org/TR/REC-html40/loose.dtd">'
          '<html>'
          '  <head>'
          '    <title><caret></title>'
          '    <meta http-equiv="Content-Language" content="en">'
          
            '    <meta http-equiv="Content-Type" content="text/html; charset=' +
            'windows-1251">'
          '    <meta name="author" content="">'
          '    <meta name="generator" content="">'
          '    <meta name="keywords" content="">'
          '    <meta name="description" content="">'
          '    <link rel="stylesheet" type="text/css" href="">'
          '    <link rel="shortcut icon" type="image/x-icon" href="">'
          '  </head>'
          '  <body>'
          ''
          '  </body>'
          '</html>')
        Advanced = True
      end
      item
        Name = '--'
        Code.Strings = (
          '<!-- <caret> -->')
        Advanced = True
      end
      item
        Name = '!doct'
        Description = 'dtd html'
        Code.Strings = (
          '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"'
          '"http://www.w3.org/TR/REC-html40/loose.dtd">'
          '<caret>')
        Advanced = True
      end
      item
        Name = '!doctx'
        Description = 'dtd xhtml'
        Code.Strings = (
          '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"'
          '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'
          '<caret>')
        Advanced = True
      end
      item
        Name = 'a'
        Code.Strings = (
          '<a href="<caret>"></a>')
        Advanced = True
      end
      item
        Name = 'an'
        Description = 'link in new window'
        Code.Strings = (
          '<a target="_blank" href="<caret>"></a>')
        Advanced = True
      end
      item
        Name = 'form'
        Code.Strings = (
          '<form action="<caret>" method="post">'
          '</form>')
        Advanced = True
      end
      item
        Name = 'formi'
        Description = 'form with input tags'
        Code.Strings = (
          '<form action="<caret>" method=get>'
          '  <input name="" type=text>'
          '  <input type=submit>'
          '  <input type=reset>'
          '</form>')
        Advanced = True
      end
      item
        Name = 'input'
        Code.Strings = (
          '<input name="<caret>" type="text">')
        Advanced = True
      end
      item
        Name = 'frameset'
        Code.Strings = (
          '<frameset cols="30%,*">'
          '  <frame name="" src="<caret>.html">'
          '  <frame name="" src=".html">'
          '</frameset>')
        Advanced = True
      end
      item
        Name = 'img'
        Code.Strings = (
          '<img src="<caret>" alt="">')
        Advanced = True
      end
      item
        Name = 'js'
        Code.Strings = (
          
            '<script src="<caret>.js" type="text/javascript" language="javasc' +
            'ript"></script>')
        Advanced = True
      end
      item
        Name = 'script'
        Code.Strings = (
          '<script language="JavaScript" type="text/javascript">'
          '<!--'
          '  <caret>'
          '//-->'
          '</script>')
        Advanced = True
      end
      item
        Name = 'style'
        Code.Strings = (
          '<style type="text/css">'
          '<!--'
          '  <caret>'
          '//-->'
          '</style>')
        Advanced = True
      end
      item
        Name = 'table'
        Code.Strings = (
          '<table cellspacing=0 cellpadding=0 width="100%">'
          '  <tr>'
          '    <td><caret></td>'
          '  </tr>'
          '</table>')
        Advanced = True
      end
      item
        Name = 'tableh'
        Description = 'table with header'
        Code.Strings = (
          
            '<table align="left" border=0 cellspacing=0 cellpadding=0 width="' +
            '100%">'
          '  <tr align="left" valign="middle">'
          '    <th><caret></th>'
          '    <th></th>'
          '  <tr align="left" valign=middle">'
          '    <td></td>'
          '    <td></td>'
          '</table>')
        Advanced = True
      end
      item
        Name = 'tr'
        Code.Strings = (
          '<tr>'
          '  <td><caret></td>'
          '</tr>')
        Advanced = True
      end
      item
        Name = 'td'
        Code.Strings = (
          '<td><caret></td>')
        Advanced = True
      end
      item
        Name = 'ul'
        Code.Strings = (
          '<ul type=square>'
          '  <li><caret>'
          '</ul>')
        Advanced = True
      end
      item
        Name = 'ol'
        Code.Strings = (
          '<ol>'
          '  <li><caret>'
          '</ol>')
        Advanced = True
      end
      item
        Name = 'xml'
        Code.Strings = (
          '<?xml version="1.0" encoding="windows-1251"?>'
          '<caret>')
        Advanced = True
      end
      item
        Name = 'xmlcss'
        Code.Strings = (
          '<?xml version="1.0" encoding="windows-1251"?>'
          '<?xml-stylesheet type="text/css" href="<caret>"?>')
        Advanced = True
      end
      item
        Name = 'perl'
        Description = 'perl header'
        Code.Strings = (
          '#!/usr/bin/perl'
          '<caret>')
        Advanced = True
      end
      item
        Name = 'wml'
        Code.Strings = (
          '<?xml version="1.0"?>'
          
            '<!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.2//EN" "http://www.' +
            'wapforum.org/DTD/wml_1.2.xml">'
          '<caret>')
        Advanced = True
      end
      item
        Name = 'if_else'
        Code.Strings = (
          'if (<caret>){'
          ''
          '}'
          'else{'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'function'
        Code.Strings = (
          'function <caret>(){'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'sub'
        Code.Strings = (
          'sub <caret> {'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'for'
        Code.Strings = (
          'for ($<caret>i = 0; $i < $n; $i++){'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'while'
        Code.Strings = (
          'while (<caret>){'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'do'
        Code.Strings = (
          'do{'
          ''
          '}'
          'while (<caret>);')
        Advanced = True
      end
      item
        Name = 'switch'
        Code.Strings = (
          'switch ($<caret>i){'
          '  case 0:'
          ''
          '    break;'
          '  case 1:'
          ''
          '    break;'
          '  case 2:'
          ''
          '    break;'
          '}')
        Advanced = True
      end
      item
        Name = 'print'
        Description = 'function print'
        Code.Strings = (
          'print "<caret>";')
        Advanced = True
      end
      item
        Name = 'echo'
        Code.Strings = (
          'echo "<caret>";')
        Advanced = True
      end
      item
        Name = 'mail'
        Description = 'function mail'
        Code.Strings = (
          'mail($<caret>email, $subject, $message, "From: $from_email");')
        Advanced = True
      end
      item
        Name = 'setcookie'
        Code.Strings = (
          'setcookie ("<caret>TestCookie", $value,time()+3600);')
        Advanced = True
      end
      item
        Name = 'mysql_con'
        Code.Strings = (
          
            '$link = mysql_connect("<caret>mysql_host", "mysql_login", "mysql' +
            '_password")'
          '  or die ("Could not connect to MySQL");'
          ''
          'mysql_select_db("my_database")'
          '  or die ("Could not select database");')
        Advanced = True
      end
      item
        Name = 'mysql_query'
        Code.Strings = (
          '$query = "<caret>SELECT * FROM my_table";'
          '$result = mysql_query($query)'
          '  or die("Query failed");'
          ''
          '// Output in HTML'
          ''
          'print "<table>\n";'
          'while ($line = mysql_fetch_array($result))'
          '{'
          '  print "\t<tr>\n";'
          '  while (list($col_name, $col_value) = each($line))'
          '  {'
          '    print "\t\t<td>$col_value</td>\n";'
          '  }'
          '  print "\t</tr>\n";'
          '}'
          'print "</table>\n";')
        Advanced = True
      end
      item
        Name = 'header'
        Code.Strings = (
          'Header("Content-type: <caret>image/png");')
        Advanced = True
      end
      item
        Name = 'location'
        Code.Strings = (
          'Header("Location: http://<caret>");')
        Advanced = True
      end
      item
        Name = 'fwrite'
        Description = 'function fwrite'
        Code.Strings = (
          '$fp = fopen("<caret>file.txt", "w+");'
          'fwrite($fp, "Test");'
          'fclose($fp);')
        Advanced = True
      end>
    SubAnalyzers = <
      item
        DisplayName = 'Style sheet'
        AlwaysEnabled = True
        StartExpression = '(?si)<style[^>]*> '#13#10
        EndExpression = '</style>'#13#10
        SyntAnalyzer = SyntAnalyzer10
      end
      item
        DisplayName = 'VB script'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*vbscript[^>]*>\s*(<!--)?'#13#10
        EndExpression = '(?i)(-->)?\s*</script>'#13#10
        SyntAnalyzer = SyntAnal56
      end
      item
        DisplayName = 'Java script'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*javascript[^>]*>\s*(<!--)?'#13#10
        EndExpression = '(?i)(//)?(-->)?\s*</script>'#13#10
        SyntAnalyzer = SyntAnal38
      end
      item
        DisplayName = 'Default script'
        StartExpression = '<\s*script\s*>'
        EndExpression = '</\s*script\s*>'
        SyntAnalyzer = SyntAnal38
      end
      item
        DisplayName = 'ASP'
        StyleName = 'ASP back'
        AlwaysEnabled = True
        StartExpression = '<%[^@]'#13#10
        EndExpression = '%>'#13#10
        SyntAnalyzer = SyntAnal56
      end
      item
        DisplayName = 'PHP'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*php[^>]*>\s*(<!--)?'#13#10
        EndExpression = '(?i)(-->)?\s*</script>'#13#10
        SyntAnalyzer = SyntAnal84
      end
      item
        DisplayName = 'PHP 2'
        AlwaysEnabled = True
        StartExpression = '(?i)<\?(php)?'#13#10
        EndExpression = '\?>'#13#10
        SyntAnalyzer = SyntAnal84
      end>
    SampleText.Strings = (
      '<html>'
      '<head>'
      '<title>HTML page</title>'
      '</head>'
      '<body>'
      ''
      '<h2>Hello</h2>'
      '<ul>'
      '<li> Test'
      '<li> Test'
      '<li> Test'
      '</ul>'
      '</body>'
      '</html>')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Text'
      'Open Tag'
      'Close Tag')
    MarkedBlockStyle = 'Marked block'
    Extentions = 
      'htm html htt hta htx htc htd shtml phtml xhtml asp aspx ascx asm' +
      'x jsp tpl hhc cfm dtd'
    LexerName = 'HTML documents'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal40: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Text'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clInfoBk
        MultiLineBorder = True
      end
      item
        DisplayName = 'Tag bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tag param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tag properties'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Unknown tag content'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
      end
      item
        DisplayName = 'Tag Key'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Bound'
        Enabled = False
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
        MultiLineBorder = True
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (attribute)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 14155775
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (tag)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'CF keys'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'CFQuery in tree'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Times New Roman'
        Font.Style = [fsBold, fsUnderline]
        BgColor = clYellow
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'CF ident'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'CF Symbol'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'CF string'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftColor
      end
      item
        DisplayName = 'Query reserved'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Query param,output'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = cl3DDkShadow
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsUnderline]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?ms)<!--.*?(-->|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment end'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '# for use in <SCRIPT>'#13#10'-->'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Query Symbol'
        StyleName = 'CF Symbol'
        BlockName = 'CF query open'
        TokenType = 13
        Expression = '[/,\.;:\(\)=\+\-\*\#]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Query Symbol <>'
        StyleName = 'CF Symbol'
        TokenType = 13
        Expression = '<\x20 | \x20>'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '<'
        StyleName = 'Tag bound'
        TokenType = 10
        Expression = '<[/!\-]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '>'
        StyleName = 'Tag bound'
        TokenType = 11
        Expression = '>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 7
        Expression = '\#[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag param'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        TokenType = 4
        Expression = '(?s)".*?("|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag ident'
        BlockName = 'Tag begin'
        TokenType = 2
        Expression = '[^\s=>]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '='
        StyleName = 'Tag bound'
        BlockName = 'Tag begin'
        TokenType = 3
        Expression = '='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Unknow tag content'
        StyleName = 'Unknown tag content'
        BlockName = 'Tag begin'
        Expression = '[^>]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '&...'
        StyleName = 'Tag Key'
        TokenType = 9
        Expression = '&\w+;'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Query String'
        StyleName = 'Tag properties'
        BlockName = 'CF query open'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Query ident'
        StyleName = 'CF ident'
        BlockName = 'CF query open'
        TokenType = 12
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Query Float'
        StyleName = 'Number'
        BlockName = 'CF query open'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Query int'
        StyleName = 'Number'
        BlockName = 'CF query open'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '#param'
        StyleName = 'Query param,output'
        TokenType = 9
        Expression = '\#[\w_\.]*\#'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text'
        StyleName = 'Text'
        TokenType = 9
        Expression = '[^<&\#]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Tag keys'
        StyleName = 'Tag Key'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '<'
              '</')
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'CF keys'
        StyleName = 'CF keys'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'cf*')
            CondType = tcMask
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<'
              '</')
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag property'
        StyleName = 'Tag properties'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag property value'
        StyleName = 'Tag param'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Simple tag block'
        StyleName = 'Comment'
        ConditionList = <
          item
            TagList.Strings = (
              'br'
              'cfparam'
              'hr'
              'image'
              'img'
              'link')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 1024
          end>
        BlockEnd = 'Simple tag block end'
        DynHighlight = dhRange
        HighlightPos = cpBound
        CancelNextRules = True
        TreeItemStyle = 'Tree item (tag)'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Simple tag block end'
        BlockName = 'Simple tag block'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'CF query open'
        ConditionList = <
          item
            TagList.Strings = (
              'cfquery')
            CondType = tcMask
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 1024
          end>
        BlockEnd = 'CF query close'
        HighlightPos = cpBound
        CancelNextRules = True
        TreeItemStyle = 'CFQuery in tree'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'CF query close'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '</')
            TokenTypes = 1024
          end>
        SameIdent = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag block begin'
        ConditionList = <
          item
            TagList.Strings = (
              'br'
              'cfparam'
              'hr'
              'image'
              'img'
              'link')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<'
              '<!')
            TokenTypes = 1024
          end>
        BlockOffset = 1
        BlockEnd = 'Tag block end'
        HighlightPos = cpBound
        CollapseFmt = '< %s0 >'
        TreeItemStyle = 'Tree item (tag)'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '</')
            TokenTypes = 1024
          end>
        BlockOffset = -1
        SameIdent = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Comment begin'
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '<!--  ...  -->'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag attribute'
        BlockName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s0 %s-1 %s-2'
        HighlightPos = cpBound
        NoEndRule = True
        TreeItemStyle = 'Tree item (attribute)'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Query keys'
        StyleName = 'Query reserved'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'and'
              'by'
              'from'
              'having'
              'or'
              'order'
              'select'
              'where')
            TokenTypes = 4096
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <
      item
        DisplayName = 'Style sheet'
        AlwaysEnabled = True
        StartExpression = '(?si)<style[^>]*> '#13#10
        EndExpression = '</style>'#13#10
        SyntAnalyzer = SyntAnalyzer10
      end
      item
        DisplayName = 'VB script'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*vbscript[^>]*>\s*(<!--)?'#13#10
        EndExpression = '(?i)(-->)?\s*</script>'#13#10
        SyntAnalyzer = SyntAnalyzer3
      end
      item
        DisplayName = 'Java script 1'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*javascript[^>]*>\s*(<!--)?'#13#10
        EndExpression = '(?i)(//)?(-->)?\s*</script>'#13#10
      end
      item
        DisplayName = 'ASP'
        AlwaysEnabled = True
        StartExpression = '<%'#13#10'#(?i)<%@[^>]*?vbscript[^>]*>'#13#10'#\s*<%'#13#10
        EndExpression = '%>'#13#10
        SyntAnalyzer = SyntAnalyzer3
      end
      item
        DisplayName = 'PHP'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*php[^>]*>\s*(<!--)?'#13#10
        EndExpression = '(?i)(-->)?\s*</script>'#13#10
        SyntAnalyzer = SyntAnal84
      end
      item
        DisplayName = 'PHP 2'
        AlwaysEnabled = True
        StartExpression = '(?i)<\?(php)?'#13#10
        EndExpression = '\?>'#13#10
        SyntAnalyzer = SyntAnal84
      end
      item
        DisplayName = 'Java script'
        AlwaysEnabled = True
        StartExpression = '(?si)<script>'#13#10
        EndExpression = '(?i)(//)?(-->)?\s*</script>'#13#10
      end>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Text'
      'Open Tag'
      'Close Tag'
      'CF ident'
      'CF symbol')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'cfm cfc cfml'
    LexerName = 'ColdFusion'
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnalyzer10: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Style'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Value'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clWhite
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Color'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = '{}'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Param'
        StyleName = 'Param'
        BlockName = 'Style begin'
        TokenType = 2
        Expression = '[\w\.-]+ (?=\s*\:)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 5
        Expression = '[;:,%\(\)\[\]@=/\*]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Color'
        StyleName = 'Color'
        BlockName = 'Style begin'
        TokenType = 6
        Expression = '\#[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String in URL'
        StyleName = 'String'
        Expression = '(?<=URL\s*\() .*? (?=\))'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39') .*? (\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Number'
        StyleName = 'Number'
        TokenType = 7
        Expression = '-?\d+(\.\d+)?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Value'
        StyleName = 'Value'
        BlockName = 'Style begin'
        TokenType = 2
        Expression = '[\w:\#\.\-]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Style'
        StyleName = 'Style'
        TokenType = 2
        Expression = '[\w:\#\.\-]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Style begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'Style end'
        Highlight = True
        InvertColors = True
        NameFmt = '%sl1'
        DynHighlight = dhRange
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Style end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Param'
        Enabled = False
        StyleName = 'Value'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              ':')
            CondType = tcNotEqual
            TokenTypes = 520
          end
          item
            TokenTypes = 16
          end>
        IdentIndex = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Param to tree'
        ConditionList = <
          item
            TagList.Strings = (
              ':')
            TokenTypes = 544
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'Param end'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Param end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';'
              '}')
            TokenTypes = 40
          end>
        BlockOffset = 1
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* Comment */'
      'body { '
      '  font-family: Tahoma, Verdana, Arial, sans-serif; '
      '  font-size: 8pt '
      '}'
      '.name, .name2 { '
      '  font-size: 18pt; '
      '  color: #000099;'
      '  width: 100%; '
      '  background: url("../img.gif") no-repeat;'
      '  back2: url('#39'../img.gif'#39');'
      '  back3: url(../img.gif)'
      '}'
      '#footer {color: #AA00BB;}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Delimiter'
      'Color'
      'Number')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'css'
    LexerName = 'Style sheets'
    Notes.Strings = (
      'Fixed by Alex, uvviewsoft.com')
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal22: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Text'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BorderColorLeft = clGray
        BorderColorTop = clGray
        BorderColorRight = clGray
        BorderColorBottom = clGray
        MultiLineBorder = True
      end
      item
        DisplayName = 'Tag bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'CDATA'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tag Key'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'ERROR content'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tag ident'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tag param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clSkyBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tag properties'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clSkyBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Current tag'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15987699
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current Block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15400927
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'DTD element type'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'DTD bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -19
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Tree item (attribute)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 14155775
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (tag)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'PI'
        TokenType = 12
        Expression = '(?s)<\?.*?(\?>|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)<!--.*?(-->|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CDATA start'
        StyleName = 'CDATA'
        TokenType = 11
        Expression = '<!\[CDATA\['#13#10'#(?s)<!\[CDATA\[.*?(\]\]>|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CDATA Text'
        StyleName = 'Text'
        BlockName = 'CDATA begin'
        Expression = '(?s)[^\]]*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CDATA end'
        StyleName = 'Tag bound'
        BlockName = 'CDATA begin'
        TokenType = 14
        Expression = '\]\]>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '<'
        StyleName = 'Tag bound'
        TokenType = 9
        Expression = '<[/!\-\:\?]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '>'
        StyleName = 'Tag bound'
        TokenType = 10
        Expression = '[/\?]?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'DTD Element type'
        StyleName = 'DTD element type'
        BlockName = 'DTD element start'
        TokenType = 2
        Expression = '(?s)\((\(.*?\)|.)*?\)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'DTD bounds: [ ] '
        StyleName = 'DTD bound'
        BlockName = 'DOCTYPE begin'
        Expression = '[\[\]]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag param'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        TokenType = 4
        Expression = '(?s)".*?"'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '='
        StyleName = 'Tag bound'
        TokenType = 3
        Expression = '='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag ident'
        StyleName = 'Tag ident'
        BlockName = 'Tag begin'
        TokenType = 2
        Expression = '[^>=\?\s/]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Error content'
        StyleName = 'ERROR content'
        BlockName = 'Tag begin'
        Expression = '[^>\s]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '&...'
        StyleName = 'Tag Key'
        TokenType = 4
        Expression = '&\w+;'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text'
        StyleName = 'Text'
        BlockName = 'CDATA begin'
        NotParent = True
        TokenType = 4
        Expression = '[^<&]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Tag begin'
        StyleName = 'Current tag'
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockEnd = 'Tag end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhRangeNoBound
        HighlightPos = cpRange
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'DTD element start'
        ConditionList = <
          item
            TagList.Strings = (
              'DOCTYPE')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<!')
            TokenTypes = 512
          end>
        BlockOffset = 1
        BlockEnd = 'DTD element end'
        NameFmt = '%s-1'
        HighlightPos = cpBound
        CollapseFmt = '< %s0 %s-1 >'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'DTD element end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'DOCTYPE begin'
        ConditionList = <
          item
            TagList.Strings = (
              'DOCTYPE')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<!')
            TokenTypes = 512
          end>
        BlockOffset = 1
        BlockEnd = 'DOCTYPE end'
        NameFmt = 'Document structure'
        HighlightPos = cpBound
        CollapseFmt = 'Document structure'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'DOCTYPE end'
        BlockName = 'DOCTYPE begin'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '>')
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag keys'
        StyleName = 'Tag Key'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 512
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag block begin'
        StyleName = 'Current Block'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 512
          end>
        BlockEnd = 'Tag block end'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = ' %s0 >'
        TreeItemStyle = 'Tree item (tag)'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseOpened
        AutoCloseText = '</%s0>'
      end
      item
        DisplayName = 'Tag block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '</')
            TokenTypes = 512
          end>
        SameIdent = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End of simple tag'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '/>')
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag block begin'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Comment begin'
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'CDATA end'
        BlockName = 'CDATA begin'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 16384
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'CDATA begin'
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        BlockEnd = 'CDATA end'
        NameFmt = '%s-1'
        HighlightPos = cpBound
        CollapseFmt = 'CDATA'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag attribute'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 16
          end
          item
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NameFmt = '%s0 %s-1 %s-2'
        RefToCondEnd = True
        HighlightPos = cpBound
        NoEndRule = True
        TreeItemStyle = 'Tree item (attribute)'
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '<?xml version="1.0" encoding="ISO-8859-1" ?>'
      ''
      '<!DOCTYPE web-app ['
      
        '  <!ELEMENT web-app (icon?, display-name?, description?, distrib' +
        'utable?,'
      '  context-param*, filter*, filter-mapping*, listener*, servlet*,'
      
        '  servlet-mapping*, session-config?, mime-mapping*, welcome-file' +
        '-list?,'
      
        '  error-page*, taglib*, resource-env-ref*, resource-ref*, securi' +
        'ty-constraint*,'
      
        '  login-config?, security-role*, env-entry*, ejb-ref*,  ejb-loca' +
        'l-ref*)>'
      '  <!ELEMENT auth-constraint (description?, role-name*)>'
      '  <!ELEMENT auth-method (#PCDATA)>'
      
        '  <!ELEMENT context-param (param-name, param-value, description?' +
        ')>'
      '  <!ELEMENT description (#PCDATA)>'
      '  <!ELEMENT display-name (#PCDATA)>'
      '  <!ELEMENT distributable EMPTY>'
      '  <!ELEMENT ejb-link (#PCDATA)>'
      
        '  <!ELEMENT ejb-local-ref (description?, ejb-ref-name, ejb-ref-t' +
        'ype,local-home, local, ejb-link?)>'
      
        '  <!ELEMENT ejb-ref (description?, ejb-ref-name, ejb-ref-type,ho' +
        'me, remote, ejb-link?)>'
      '  <!ELEMENT ejb-ref-name (#PCDATA)>'
      '  <!ELEMENT ejb-ref-type (#PCDATA)>'
      
        '  <!ELEMENT env-entry (description?, env-entry-name, env-entry-v' +
        'alue?,env-entry-type)>'
      '  <!ELEMENT env-entry-name (#PCDATA)>'
      '  <!ELEMENT env-entry-type (#PCDATA)>'
      '  <!ELEMENT env-entry-value (#PCDATA)>'
      '  <!ELEMENT error-code (#PCDATA)>'
      
        '  <!ELEMENT error-page ((error-code | exception-type), location)' +
        '>'
      '  <!ELEMENT exception-type (#PCDATA)>'
      '  <!ELEMENT extension (#PCDATA)>'
      
        '  <!ELEMENT filter (icon?, filter-name, display-name?, descripti' +
        'on?,filter-class, init-param*)>'
      '  <!ELEMENT filter-class (#PCDATA)>'
      
        '  <!ELEMENT filter-mapping (filter-name, (url-pattern | servlet-' +
        'name))>'
      '  <!ELEMENT filter-name (#PCDATA)>'
      '  <!ELEMENT form-error-page (#PCDATA)>'
      
        '  <!ELEMENT form-login-config (form-login-page, form-error-page)' +
        '>'
      '  <!ELEMENT form-login-page (#PCDATA)>'
      '  <!ELEMENT home (#PCDATA)>'
      '  <!ELEMENT http-method (#PCDATA)>'
      '  <!ELEMENT icon (small-icon?, large-icon?)>'
      '  <!ELEMENT init-param (param-name, param-value, description?)>'
      '  <!ELEMENT jsp-file (#PCDATA)>'
      '  <!ELEMENT large-icon (#PCDATA)>'
      '  <!ELEMENT listener (listener-class)>'
      '  <!ELEMENT listener-class (#PCDATA)>'
      '  <!ELEMENT load-on-startup (#PCDATA)>'
      '  <!ELEMENT local (#PCDATA)>'
      '  <!ELEMENT local-home (#PCDATA)>'
      '  <!ELEMENT location (#PCDATA)>'
      
        '  <!ELEMENT login-config (auth-method?, realm-name?, form-login-' +
        'config?)>'
      '  <!ELEMENT mime-mapping (extension, mime-type)>'
      '  <!ELEMENT mime-type (#PCDATA)>'
      '  <!ELEMENT param-name (#PCDATA)>'
      '  <!ELEMENT param-value (#PCDATA)>'
      '  <!ELEMENT realm-name (#PCDATA)>'
      '  <!ELEMENT remote (#PCDATA)>'
      '  <!ELEMENT res-auth (#PCDATA)>'
      '  <!ELEMENT res-ref-name (#PCDATA)>'
      '  <!ELEMENT res-sharing-scope (#PCDATA)>'
      '  <!ELEMENT res-type (#PCDATA)>'
      
        '  <!ELEMENT resource-env-ref (description?, resource-env-ref-nam' +
        'e,resource-env-ref-type)>'
      '  <!ELEMENT resource-env-ref-name (#PCDATA)>'
      '  <!ELEMENT resource-env-ref-type (#PCDATA)>'
      
        '  <!ELEMENT resource-ref (description?, res-ref-name, res-type, ' +
        'res-auth,res-sharing-scope?)>'
      '  <!ELEMENT role-link (#PCDATA)>'
      '  <!ELEMENT role-name (#PCDATA)>'
      '  <!ELEMENT run-as (description?, role-name)>'
      
        '  <!ELEMENT security-constraint (display-name?, web-resource-col' +
        'lection+,auth-constraint?, user-data-constraint?)>'
      '  <!ELEMENT security-role (description?, role-name)>'
      
        '  <!ELEMENT security-role-ref (description?, role-name, role-lin' +
        'k?)>'
      
        '  <!ELEMENT servlet (icon?, servlet-name, display-name?, descrip' +
        'tion?,'
      
        '    (servlet-class|jsp-file), init-param*, load-on-startup?, run' +
        '-as?, security-role-ref*)>'
      '  <!ELEMENT servlet-class (#PCDATA)>'
      '  <!ELEMENT servlet-mapping (servlet-name, url-pattern)>'
      '  <!ELEMENT servlet-name (#PCDATA)>'
      '  <!ELEMENT session-config (session-timeout?)>'
      '  <!ELEMENT session-timeout (#PCDATA)>'
      '  <!ELEMENT small-icon (#PCDATA)>'
      '  <!ELEMENT taglib (taglib-uri, taglib-location)>'
      '  <!ELEMENT taglib-location (#PCDATA)>'
      '  <!ELEMENT taglib-uri (#PCDATA)>'
      '  <!ELEMENT transport-guarantee (#PCDATA)>'
      '  <!ELEMENT url-pattern (#PCDATA)>'
      
        '  <!ELEMENT user-data-constraint (description?, transport-guaran' +
        'tee)>'
      
        '  <!ELEMENT web-resource-collection (web-resource-name, descript' +
        'ion?,url-pattern*, http-method*)>'
      '  <!ELEMENT web-resource-name (#PCDATA)>'
      '  <!ELEMENT welcome-file (#PCDATA)>'
      '  <!ELEMENT welcome-file-list (welcome-file+)>'
      '  <!ATTLIST auth-constraint id ID #IMPLIED>'
      '  <!ATTLIST auth-method id ID #IMPLIED>'
      '  <!ATTLIST context-param id ID #IMPLIED>'
      '  <!ATTLIST description id ID #IMPLIED>'
      '  <!ATTLIST display-name id ID #IMPLIED>'
      '  <!ATTLIST distributable id ID #IMPLIED>'
      '  <!ATTLIST ejb-link id ID #IMPLIED>'
      '  <!ATTLIST ejb-local-ref id ID #IMPLIED>'
      '  <!ATTLIST ejb-ref id ID #IMPLIED>'
      '  <!ATTLIST ejb-ref-name id ID #IMPLIED>'
      '  <!ATTLIST ejb-ref-type id ID #IMPLIED>'
      '  <!ATTLIST env-entry id ID #IMPLIED>'
      '  <!ATTLIST env-entry-name id ID #IMPLIED>'
      '  <!ATTLIST env-entry-type id ID #IMPLIED>'
      '  <!ATTLIST env-entry-value id ID #IMPLIED>'
      '  <!ATTLIST error-code id ID #IMPLIED>'
      '  <!ATTLIST error-page id ID #IMPLIED>'
      '  <!ATTLIST exception-type id ID #IMPLIED>'
      '  <!ATTLIST extension id ID #IMPLIED>'
      '  <!ATTLIST filter id ID #IMPLIED>'
      '  <!ATTLIST filter-class id ID #IMPLIED>'
      '  <!ATTLIST filter-mapping id ID #IMPLIED>'
      '  <!ATTLIST filter-name id ID #IMPLIED>'
      '  <!ATTLIST form-error-page id ID #IMPLIED>'
      '  <!ATTLIST form-login-config id ID #IMPLIED>'
      '  <!ATTLIST form-login-page id ID #IMPLIED>'
      '  <!ATTLIST home id ID #IMPLIED>'
      '  <!ATTLIST http-method id ID #IMPLIED>'
      '  <!ATTLIST icon id ID #IMPLIED>'
      '  <!ATTLIST init-param id ID #IMPLIED>'
      '  <!ATTLIST jsp-file id ID #IMPLIED>'
      '  <!ATTLIST large-icon id ID #IMPLIED>'
      '  <!ATTLIST listener id ID #IMPLIED>'
      '  <!ATTLIST listener-class id ID #IMPLIED>'
      '  <!ATTLIST load-on-startup id ID #IMPLIED>'
      '  <!ATTLIST local id ID #IMPLIED>'
      '  <!ATTLIST local-home id ID #IMPLIED>'
      '  <!ATTLIST location id ID #IMPLIED>'
      '  <!ATTLIST login-config id ID #IMPLIED>'
      '  <!ATTLIST mime-mapping id ID #IMPLIED>'
      '  <!ATTLIST mime-type id ID #IMPLIED>'
      '  <!ATTLIST param-name id ID #IMPLIED>'
      '  <!ATTLIST param-value id ID #IMPLIED>'
      '  <!ATTLIST realm-name id ID #IMPLIED>'
      '  <!ATTLIST remote id ID #IMPLIED>'
      '  <!ATTLIST res-auth id ID #IMPLIED>'
      '  <!ATTLIST res-ref-name id ID #IMPLIED>'
      '  <!ATTLIST res-sharing-scope id ID #IMPLIED>'
      '  <!ATTLIST res-type id ID #IMPLIED>'
      '  <!ATTLIST resource-env-ref id ID #IMPLIED>'
      '  <!ATTLIST resource-env-ref-name id ID #IMPLIED>'
      '  <!ATTLIST resource-env-ref-type id ID #IMPLIED>'
      '  <!ATTLIST resource-ref id ID #IMPLIED>'
      '  <!ATTLIST role-link id ID #IMPLIED>'
      '  <!ATTLIST role-name id ID #IMPLIED>'
      '  <!ATTLIST run-as id ID #IMPLIED>'
      '  <!ATTLIST security-constraint id ID #IMPLIED>'
      '  <!ATTLIST security-role id ID #IMPLIED>'
      '  <!ATTLIST security-role-ref id ID #IMPLIED>'
      '  <!ATTLIST servlet id ID #IMPLIED>'
      '  <!ATTLIST servlet-class id ID #IMPLIED>'
      '  <!ATTLIST servlet-mapping id ID #IMPLIED>'
      '  <!ATTLIST servlet-name id ID #IMPLIED>'
      '  <!ATTLIST session-config id ID #IMPLIED>'
      '  <!ATTLIST session-timeout id ID #IMPLIED>'
      '  <!ATTLIST small-icon id ID #IMPLIED>'
      '  <!ATTLIST taglib id ID #IMPLIED>'
      '  <!ATTLIST taglib-location id ID #IMPLIED>'
      '  <!ATTLIST taglib-uri id ID #IMPLIED>'
      '  <!ATTLIST transport-guarantee id ID #IMPLIED>'
      '  <!ATTLIST url-pattern id ID #IMPLIED>'
      '  <!ATTLIST url-pattern beep ID #IMPLIED>'
      '  <!ATTLIST user-data-constraint id ID #IMPLIED>'
      '  <!ATTLIST web-app id ID #IMPLIED>'
      '  <!ATTLIST web-resource-collection id ID #IMPLIED>'
      '  <!ATTLIST web-resource-name id ID #IMPLIED>'
      '  <!ATTLIST welcome-file id ID #IMPLIED>'
      '  <!ATTLIST welcome-file-list id ID #IMPLIED>'
      ']>'
      ''
      '<web-app>'
      '    <display-name abc="123" '
      '    def="true"></display-name>'
      '    <description></description>'
      '    <filter-mapping>'
      '        <filter-name></filter-name>'
      '        <url-pattern></url-pattern>'
      '    </filter-mapping>'
      '</web-app>'
      '')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Tag Open'
      'Tag Close'
      'CDATA'
      'PI'
      'Attrib. value'
      'CDATA end')
    MarkedBlockStyle = 'Marked block'
    Extentions = 
      'xml xsl xslt mmpa mmpr sti bdsproj xsd rss wml svg xul xsd axl r' +
      'df xaml vcproj dproj'
    LexerName = 'XML'
    Charset = DEFAULT_CHARSET
    Left = 140
    Top = 160
  end
  object SyntAnal76: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Section'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Parameter'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Value'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Number'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^[;\#].*$'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Section'
        StyleName = 'Section'
        TokenType = 8
        Expression = '(?s)^\[.*?\]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Parameter'
        StyleName = 'Parameter'
        TokenType = 2
        Expression = '^[^=\n\r]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Equal sign'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '='
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '[\d]+\.?[\d]+e[\+\-]?[\d]+|[\d]+\.[\d]+$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '-?[\d]+$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Value'
        StyleName = 'Value'
        TokenType = 4
        Expression = '.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Section begin'
        ConditionList = <
          item
            TokenTypes = 256
          end>
        EndOfTextClose = True
        NameFmt = '%s0'
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        SelfClose = True
        TreeItemStyle = 'Section'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Item begin'
        Enabled = False
        ConditionList = <
          item
            TokenTypes = 112
          end
          item
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s0 = %s-2'
        RefToCondEnd = True
        HighlightPos = cpBound
        NoEndRule = True
        TreeItemStyle = 'Value'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Item any'
        ConditionList = <
          item
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <
      item
        Name = 'HKCU'
        Description = 'HKEY_CURRENT_USER'
        Code.Strings = (
          '[HKEY_CURRENT_USER\<caret>]')
        Advanced = True
      end
      item
        Name = 'HKCR'
        Description = 'HKEY_CLASSES_ROOT'
        Code.Strings = (
          '[HKEY_CLASSES_ROOT\<caret>]')
        Advanced = True
      end
      item
        Name = 'HKU'
        Description = 'HKEY_USERS'
        Code.Strings = (
          '[HKEY_USERS\<caret>]')
        Advanced = True
      end
      item
        Name = 'HKCC'
        Description = 'HKEY_CURRENT_CONFIG'
        Code.Strings = (
          '[HKEY_CURRENT_CONFIG\<caret>]')
        Advanced = True
      end
      item
        Name = 'HKLM'
        Description = 'HKEY_LOCAL_MACHINE'
        Code.Strings = (
          '[HKEY_LOCAL_MACHINE\<caret>]')
        Advanced = True
      end
      item
        Name = 'HKDD'
        Description = 'HKEY_DYN_DATA'
        Code.Strings = (
          '[HKEY_DYN_DATA\<caret>]')
        Advanced = True
      end
      item
        Name = 'REGEDIT5'
        Description = 'Header for Windows XP'
        Code.Strings = (
          'Windows Registry Editor Version 5.00')
      end
      item
        Name = 'REGEDIT4'
        Description = 'Header for Windows 98'
        Code.Strings = (
          'REGEDIT4')
      end>
    SubAnalyzers = <>
    SampleText.Strings = (
      '[TT]'
      'tt=2'
      'tt=3'
      ''
      '[TT2]'
      'ttt=2'
      'ttt=3')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Parameter'
      'Symbol'
      'Value'
      'Integer const'
      'Float const'
      'Hex const'
      'Section')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'ini dsk dti dof inf lng srv reg sas cfg'
    LexerName = 'Ini files'
    LineComment = ';'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal82: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Label'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Key words'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Commands'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
      end
      item
        DisplayName = 'Params'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Echo'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'QuotationMarks'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Int'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^rem .*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^\:\:.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Label'
        StyleName = 'Label'
        TokenType = 3
        Expression = '^\s*:\S+|(?<=goto\s+)\S+'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        Expression = '("?%(\w*|\d*)?%"?)|"?%\d+"?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IP-Address'
        StyleName = 'QuotationMarks'
        Expression = '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 2
        Expression = '[\+\-\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\#]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'echostd'
        StyleName = 'Echo'
        Expression = '(?<=@?echo)\s+".*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Echo'
        StyleName = 'Key words'
        TokenType = 5
        Expression = '@?echo(\soff)?\S*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'echo text'
        StyleName = 'Echo'
        BlockName = 'echo start'
        StrictParent = True
        TokenType = 4
        Expression = '[^<>\|\n]*[\n]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'QuotationMarks'
        StyleName = 'QuotationMarks'
        Expression = '".*?"'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Int'
        StyleName = 'Int'
        Expression = '\b\d+\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Command'
        StyleName = 'Params'
        TokenType = 2
        Expression = '\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Key words'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'Arp'
              'Assoc'
              'At'
              'Atmadm'
              'Attrib'
              'Bootcfg'
              'Break'
              'Cacls'
              'call'
              'cd'
              'Change'
              'Chcp'
              'Chdir'
              'Chkdsk'
              'Chkntfs'
              'choice'
              'Cipher'
              'cls'
              'Cmd'
              'Cmstp'
              'Color'
              'Comp'
              'Compact'
              'Convert'
              'copy'
              'Cprofile'
              'CScript'
              'Date'
              'Defrag'
              'del'
              'Dir'
              'Diskcomp'
              'Diskcopy'
              'DiskPart'
              'do'
              'Doskey'
              'Driverquery'
              'echo'
              'echo.'
              'Endlocal'
              'errorlevel'
              'Eventcreate'
              'Eventquery'
              'Eventtriggers'
              'Evntcmd'
              'exist'
              'Exit'
              'Expand'
              'Fc'
              'Find'
              'Findstr'
              'Finger'
              'Flattemp'
              'for'
              'Format'
              'Fsutil'
              'Ftp'
              'Ftype'
              'Getmac'
              'goto'
              'Gpresult'
              'Gpupdate'
              'Graftabl'
              'Help'
              'Helpctr'
              'Hostname'
              'if'
              'in'
              'Ipconfig'
              'Ipseccmd'
              'Ipxroute'
              'Irftp'
              'Label'
              'Lodctr'
              'Logman'
              'Lpq'
              'Lpr'
              'Macfile'
              'md'
              'Mkdir'
              'Mmc'
              'Mode'
              'More'
              'Mountvol'
              'Move'
              'MS-DOS'
              'Msiexec'
              'Msinfo32'
              'Nbtstat'
              'Net'
              'Netsh'
              'Netstat'
              'not'
              'Nslookup'
              'Ntbackup'
              'Ntcmdprompt'
              'Ntsd'
              'OOpenfiles'
              'Pagefileconfig'
              'Path'
              'Pathping'
              'pause'
              'Pbadmin'
              'Pentnt'
              'Perfmon'
              'Ping'
              'Popd'
              'Print'
              'Prncnfg'
              'Prndrvr'
              'Prnjobs'
              'Prnmngr'
              'Prnport'
              'Prnqctl'
              'Prompt'
              'Pushd'
              'Query'
              'Rcp'
              'Recover'
              'Reg'
              'Regsvr32'
              'Relog'
              'Rem'
              'Ren'
              'Rename'
              'Replace'
              'Resetsession'
              'Rexec'
              'Rmdir'
              'Route'
              'RRasdial'
              'Rsh'
              'Rsm'
              'Runas'
              'SC'
              'Schtasks'
              'Secedit'
              'set'
              'Setlocal'
              'Sfc'
              'shift'
              'Shutdown'
              'Sort'
              'Start'
              'Subst'
              'sys'
              'Systeminfo'
              'Taskkill'
              'Tasklist'
              'Tcmsetup'
              'TCP/IP'
              'Telnet'
              'Tftp'
              'Time'
              'Title'
              'Tracerpt'
              'Tracert'
              'Tree'
              'Type'
              'Typeperf'
              'Unlodctr'
              'Verify'
              'Vol'
              'Vssadmin'
              'VVer'
              'W32tm'
              'Winnt'
              'Winnt32'
              'WMIC'
              'Xcopy')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'echo start'
        StyleName = 'Echo'
        ConditionList = <
          item
            TagList.Strings = (
              'echo')
            TokenTypes = 32
            IgnoreCase = True
          end>
        BlockEnd = 'echo end'
        NotCollapsed = True
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'echo end'
        BlockName = 'echo start'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 16
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'rem MS-DOS batch file'
      'rem'
      '@echo off'
      'cls'
      'echo The command line is: %1 %2 %3 %4 %5'
      'rem'
      'rem now wait for the user ...'
      'pause'
      'copy c:\*.pas d:\'
      'if errorlevel 1 echo Error in copy action!')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Label'
      'echo'
      'echo cmd')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'bat cmd'
    LexerName = 'Batch files'
    RestartFromLineStart = True
    LineComment = 'rem '
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal46: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Empty line'
        Expression = '^\s*[\n\r]{1,2}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'not empty line'
        TokenType = 1
        Expression = '^.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Paragraph'
        BlockName = 'Paragraph'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Paragraph end'
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Paragraph end'
        BlockName = 'Paragraph'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <
      item
        Name = 'date'
        Description = 'Date formatted'
        Code.Strings = (
          'Current date: <date:dd.mm.yyyy>'
          'Current time: <date:h:mm>')
        Advanced = True
      end>
    SubAnalyzers = <>
    SampleText.Strings = (
      'bbb'
      'bb'
      'bb'
      ''
      'bbb'
      'bb'
      ''
      'bbb'
      'bb')
    TokenTypeNames.Strings = (
      'Empty'
      'Line')
    Extentions = 'txt'
    LexerName = 'Text files'
    SkipSpaces = False
    Notes.Strings = (
      'Fixed: Alex, uvviewsoft.com')
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal11: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Left margin'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clBackground
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Left margin'
        StyleName = 'Left margin'
        Expression = '^.{6}[^*]'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^.{6}\*.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\|.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        TokenType = 2
        Expression = '[a-z_][-\w]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        TokenType = 3
        Expression = '\.'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'accept'
              'access'
              'add'
              'address'
              'advancing'
              'after'
              'all'
              'alphabet'
              'also'
              'alter'
              'alternate'
              'and'
              'any'
              'apply'
              'are'
              'area'
              'areas'
              'ascending'
              'assign'
              'at'
              'basis'
              'before'
              'beginning'
              'binary'
              'blank'
              'block'
              'bottom'
              'by'
              'call'
              'cancel'
              'cbl'
              'character'
              'characters'
              'class'
              'close'
              'collating'
              'comma'
              'common'
              'compute'
              'configuration'
              'contains'
              'content'
              'continue'
              'converting'
              'copy'
              'corr'
              'corresponding'
              'count'
              'currency'
              'data'
              'day'
              'dbcs'
              'debugging'
              'declaratives'
              'degugging'
              'delete'
              'delimited'
              'delimiter'
              'depending'
              'descending'
              'divide'
              'division'
              'down'
              'duplicates'
              'dynamic'
              'ebcdic'
              'egcs'
              'eject'
              'else'
              'ending'
              'enter'
              'entry'
              'environment'
              'eop'
              'equal'
              'error'
              'evaluate'
              'every'
              'exception'
              'exit'
              'extend'
              'external'
              'f'
              'false'
              'fd'
              'filler'
              'first'
              'footing'
              'for'
              'from'
              'giving'
              'global'
              'go'
              'goback'
              'greater'
              'id'
              'identification'
              'if'
              'in'
              'index'
              'indexed'
              'initial'
              'initialize'
              'insert'
              'inspect'
              'installation'
              'into'
              'invalid'
              'is'
              'just'
              'justified'
              'kanji'
              'key'
              'label'
              'leading'
              'left'
              'length'
              'less'
              'line'
              'lines'
              'linkage'
              'list'
              'lock'
              'map'
              'memory'
              'merge'
              'mode'
              'modules'
              'move'
              'multiple'
              'multiply'
              'native'
              'negative'
              'next'
              'no'
              'nolist'
              'nomap'
              'nosource'
              'not'
              'null'
              'nulls'
              'occurs'
              'of'
              'off'
              'omitted'
              'on'
              'open'
              'optional'
              'or'
              'order'
              'organization'
              'other'
              'output'
              'overflow'
              'padding'
              'page'
              'password'
              'perform'
              'pic'
              'picture'
              'pointer'
              'position'
              'positive'
              'procedure'
              'procedures'
              'proceed'
              'process'
              'quote'
              'quotes'
              'random'
              'read'
              'ready'
              'record'
              'recording'
              'records'
              'redefines'
              'reel'
              'reference'
              'relative'
              'release'
              'reload'
              'remainder'
              'removal'
              'renames'
              'replace'
              'replacing'
              'rerun'
              'reserve'
              'reset'
              'reversed'
              'rewind'
              'rewrite'
              'right'
              'rounded'
              'run'
              's'
              'same'
              'sd'
              'search'
              'section'
              'select'
              'sentence'
              'separate'
              'sequence'
              'sequential'
              'service'
              'set'
              'sign'
              'size'
              'skip1'
              'skip2'
              'skip3'
              'space'
              'spaces'
              'start'
              'status'
              'stop'
              'string'
              'subtract'
              'suppress'
              'symbolic'
              'sync'
              'synchronized'
              'tally'
              'tallying'
              'tape'
              'test'
              'than'
              'then'
              'through'
              'thru'
              'time'
              'times'
              'title'
              'to'
              'top'
              'trace'
              'trailing'
              'true'
              'u'
              'unit'
              'unstring'
              'until'
              'up'
              'upon'
              'usage'
              'use'
              'using'
              'v'
              'value'
              'values'
              'varying'
              'with'
              'words'
              'zero'
              'zeroes'
              'zeros')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'other'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'alphabetic'
              'alphabetic-lower'
              'alphabetic-upper'
              'alphanumeric'
              'alphanumeric-edited'
              'author'
              'code-set'
              'comp'
              'comp-1'
              'comp-2'
              'comp-3'
              'comp-4'
              'computational'
              'computational-1'
              'computational-2'
              'computational-3'
              'computational-4'
              'date'
              'date-compiled'
              'date-written'
              'day-of-week'
              'debug-item'
              'decimal-point'
              'display'
              'display-1'
              'end'
              'end-add'
              'end-call'
              'end-compute'
              'end-delete'
              'end-divide'
              'end-evaluate'
              'end-if'
              'end-multiply'
              'end-of-page'
              'end-perform'
              'end-read'
              'end-return'
              'end-rewrite'
              'end-search'
              'end-start'
              'end-string'
              'end-subtract'
              'end-unstring'
              'end-write'
              'file'
              'file-control'
              'high-value'
              'high-values'
              'input'
              'input-output'
              'i-o'
              'i-o-control'
              'linage'
              'linage-counter'
              'low-value'
              'low-values'
              'more-labels'
              'numeric'
              'numeric-edited'
              'object-computer'
              'packed-decimal'
              'program'
              'program-id'
              'return'
              'return-code'
              'security'
              'segment-limit'
              'shift-in'
              'shift-out'
              'sort'
              'sort-control'
              'sort-core-size'
              'sort-file-size'
              'sort-merge'
              'sort-message'
              'sort-mode-size'
              'sort-return'
              'source'
              'source-computer'
              'special-names'
              'standard'
              'standard-1'
              'standard-2'
              'when'
              'when-compiled'
              'working-storage'
              'write'
              'write-only')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block begin'
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
          end>
        BlockEnd = 'Block end'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block end'
        BlockName = 'Block begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'cbl cbd cdb cdc cob'
    LexerName = 'Cobol'
    SkipSpaces = False
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal10: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '!.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'accept'
              'and'
              'application'
              'begin'
              'break'
              'by'
              'case'
              'choose'
              'class'
              'code'
              'compile'
              'cycle'
              'data'
              'detail'
              'do'
              'else'
              'elsif'
              'end'
              'execute'
              'exit'
              'file'
              'footer'
              'form'
              'function'
              'goto'
              'group'
              'header'
              'if'
              'include'
              'item'
              'itemize'
              'join'
              'loop'
              'map'
              'member'
              'menu'
              'menubar'
              'module'
              'new'
              'not'
              'null'
              'of'
              'olecontrol'
              'omit'
              'option'
              'or'
              'orof'
              'parent'
              'procedure'
              'program'
              'queue'
              'record'
              'report'
              'return'
              'routine'
              'row'
              'section'
              'self'
              'sheet'
              'tab'
              'table'
              'then'
              'times'
              'to'
              'toolbar'
              'until'
              'view'
              'while'
              'window'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'cla clw'
    LexerName = 'Clarion'
    LineComment = '!'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal9: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = 
          '# ";" at comment'#39's EOL means comment continuation'#13#10'(?s)^\s*(\*) ' +
          '.*? (?<!;)$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s) && .*? (?<!;)$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '.N.'
        StyleName = 'Reserved word'
        TokenType = 2
        Expression = '\.(AND|F|N|NOT|NULL|OR|T|Y)\.'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '^\s* \#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(['#39'"]).*?(\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Proc Id'
        StyleName = 'Reserved word'
        TokenType = 10
        Expression = '^ [\x20\x09]* Procedure'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]&\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+\.?\d*e[\+\-]?\d+|\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'accept'
              'activate'
              'add'
              'all'
              'alter'
              'alternate'
              'ansi'
              'aplabout'
              'app'
              'append'
              'array'
              'as'
              'assist'
              'autosave'
              'average'
              'bar'
              'begin'
              'bell'
              'blank'
              'blink'
              'blocksize'
              'border'
              'box'
              'browse'
              'brstatus'
              'build'
              'by'
              'calculate'
              'call'
              'cancel'
              'carry'
              'case'
              'cd'
              'century'
              'change'
              'chdir'
              'class'
              'classlib'
              'clear'
              'clock'
              'close'
              'collate'
              'color'
              'command'
              'compatible'
              'compile'
              'confirm'
              'connection'
              'connections'
              'console'
              'continue'
              'copy'
              'count'
              'cpcompile'
              'cpdialog'
              'create'
              'currency'
              'cursor'
              'data'
              'database'
              'databases'
              'datasession'
              'date'
              'deactivate'
              'debug'
              'decimals'
              'declare'
              'default'
              'define'
              'delete'
              'deleted'
              'delimiters'
              'development'
              'device'
              'dimension'
              'dir'
              'directory'
              'display'
              'dlls'
              'do'
              'dohistory'
              'echo'
              'edit'
              'eject'
              'else'
              'end'
              'endcase'
              'enddefine'
              'enddo'
              'endfor'
              'endfunc'
              'endif'
              'endprintjob'
              'endproc'
              'endscan'
              'endtext'
              'endtry'
              'endwith'
              'erase'
              'error'
              'escape'
              'events'
              'exact'
              'exclusive'
              'exe'
              'exit'
              'export'
              'extended'
              'external'
              'fdow'
              'fields'
              'file'
              'filer'
              'files'
              'filter'
              'find'
              'fixed'
              'flush'
              'for'
              'form'
              'format'
              'free'
              'from'
              'fullpath'
              'function'
              'fweek'
              'gather'
              'general'
              'get'
              'getexpr'
              'gets'
              'go'
              'goto'
              'headings'
              'help'
              'helpfilter'
              'hidden'
              'hide'
              'hours'
              'id'
              'if'
              'import'
              'in'
              'index'
              'indexes'
              'inner'
              'input'
              'insert'
              'integer'
              'intensity'
              'into'
              'join'
              'key'
              'keyboard'
              'keycomp'
              'label'
              'left'
              'library'
              'list'
              'load'
              'local'
              'locate'
              'lock'
              'logerrors'
              'lparameter'
              'lparameters'
              'macdesktop'
              'machelp'
              'mackey'
              'macro'
              'macros'
              'margin'
              'mark'
              'md'
              'memo'
              'memory'
              'memowidth'
              'menu'
              'menus'
              'message'
              'mkdir'
              'modify'
              'module'
              'mouse'
              'move'
              'multilocks'
              'near'
              'nocptrans'
              'nofilter'
              'normal'
              'note'
              'notify'
              'null'
              'object'
              'objects'
              'odometer'
              'of'
              'off'
              'oleobject'
              'on'
              'open'
              'optimize'
              'or'
              'order'
              'otherwise'
              'outer'
              'pack'
              'pad'
              'page'
              'palette'
              'parameters'
              'path'
              'pdsetup'
              'play'
              'point'
              'pop'
              'popup'
              'popups'
              'printer'
              'printjob'
              'private'
              'procedure'
              'procedures'
              'project'
              'prompt'
              'protected'
              'public'
              'push'
              'query'
              'quit'
              'rd'
              'read'
              'readborder'
              'readerror'
              'readwrite'
              'recall'
              'refresh'
              'regional'
              'reindex'
              'relation'
              'relative'
              'release'
              'remove'
              'rename'
              'replace'
              'report'
              'reprocess'
              'resource'
              'restore'
              'resume'
              'retry'
              'return'
              'right'
              'rmdir'
              'rollback'
              'run'
              'runscript'
              's'
              'safety'
              'save'
              'scan'
              'scatter'
              'scheme'
              'scoreboard'
              'screen'
              'scroll'
              'seconds'
              'seek'
              'select'
              'selection'
              'separator'
              'set'
              'shadows'
              'show'
              'shutdown'
              'size'
              'skip'
              'sort'
              'space'
              'sql'
              'status'
              'step'
              'sticky'
              'store'
              'string'
              'string$'
              'structure'
              'sum'
              'suspend'
              'sysformats'
              'sysmenu'
              'table'
              'tables'
              'tag'
              'talk'
              'text'
              'textmerge'
              'this'
              'to'
              'topic'
              'total'
              'transaction'
              'trbetween'
              'trigger'
              'try'
              'type'
              'typeahead'
              'udfparms'
              'unique'
              'unlock'
              'update'
              'use'
              'validate'
              'view'
              'views'
              'volume'
              'wait'
              'where'
              'while'
              'window'
              'windows'
              'with'
              'xcmdfile'
              'zap'
              'zoom')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class'
        ConditionList = <
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'define')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'class_end'
        NameFmt = 'class %s-1'
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'enddefine')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'class'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'if'
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'if_end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'if_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endif')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'if'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'proc'
        ConditionList = <
          item
            CondType = tcMask
            TokenTypes = 1024
            IgnoreCase = True
          end>
        BlockEnd = 'proc_end'
        NameFmt = 'proc %s-1~s[(]1'
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'proc_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endfunc'
              'endproc')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'proc'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'func_end'
        NameFmt = 'func %s-1~s[(]1'
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endfunc'
              'endproc')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'func'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'do'
        ConditionList = <
          item
            TagList.Strings = (
              'do')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'do_end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'do_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'enddo')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'do'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'scan'
        ConditionList = <
          item
            TagList.Strings = (
              'scan')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'scan_end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'scan_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endscan')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'scan'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'case'
        ConditionList = <
          item
            TagList.Strings = (
              'case')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'do')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'case_end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'case_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endcase')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'case'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'for'
        ConditionList = <
          item
            TagList.Strings = (
              'for')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'for_end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'for_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endfor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'for'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'with'
        ConditionList = <
          item
            TagList.Strings = (
              'with')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'with_end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'with_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endwith')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'with'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'add obj'
        BlockName = 'class'
        ConditionList = <
          item
            TagList.Strings = (
              'object')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'add')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'add end'
        NameFmt = 'obj %s-1'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'add end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'with')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'add obj'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'print'
        ConditionList = <
          item
            TagList.Strings = (
              'printjob')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'print_end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'print_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endprintjob')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'print'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'text'
        ConditionList = <
          item
            TagList.Strings = (
              'text')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'text_end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'text_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endtext')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'text'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'try'
        ConditionList = <
          item
            TagList.Strings = (
              'try')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'try_end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'try_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endtry')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'try'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '* CustomerObject2.prg'
      '* Defines and uses a Customer Class '
      'LOCAL loCustomer '
      'loCustomer = CREATEOBJECT("Customer")'
      'loCustomer.Calculate()'#9'&& Calculate Maturity Value'
      '? "Customer: " + loCustomer.CustomerName'
      '? "Maturity Value: " + STR(loCustomer.GetMaturityValue(),8,2) '
      ''
      'function myFync()'
      #9'foo = 0'
      '    DEFINE POPUP myMenu'
      '    DEFINE'#9'BAR 1 OF myMenu PROMPT '#39'Input'#39
      'endfunc'
      ''
      'DEFINE CLASS Customer as Custom'
      #9'CustomerName = ""'
      #9'Principal = 0 '
      #9'Rate = 0 '
      #9'Period = 0'
      #9'PROTECTED MaturityValue'
      ''
      '    ADD OBJECT lblTickmark1 AS label WITH ;'
      '      FontName = "Wingdings"     '#9
      #9
      #9'PROCEDURE Calculate'
      #9#9'This.MaturityValue = This.Principal + ;'
      #9#9#9' This.Principal * This.Rate * This.Period/100'
      #9'ENDPROC'
      #9
      #9'PROCEDURE GetMaturityValue'
      #9#9'RETURN This.MaturityValue'#9#9'&& or RETURN (This.MaturityValue)'
      #9'ENDPROC'
      ''
      'ENDDEFINE ')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Proc Id')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'prg'
    LexerName = 'FoxPro'
    SkipSpaces = False
    Notes.Strings = (
      'Changed by Alex, www.uvviewsoft.com'
      '-Visual FoxPro features added'
      '-tree improved'
      '-multiline comments added')
    LineComment = '*'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal14: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Cmd'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Cmd symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Param block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = cl3DDkShadow
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clInfoBk
        FormatType = ftColor
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '%.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Cmd'
        StyleName = 'Cmd'
        TokenType = 2
        Expression = '\\[a-z]+ | \\'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\[\]\|=&\*]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Cmd symbol'
        StyleName = 'Cmd symbol'
        TokenType = 3
        Expression = '[\{\}\$]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Default'
        TokenType = 4
        Expression = '\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = '{'
        StyleName = 'Param block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin'
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end
          item
            TokenTypes = 16
          end
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              '\begin')
            TokenTypes = 4
          end>
        BlockEnd = 'end'
        NameFmt = '%s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '\end')
            TokenTypes = 4
          end>
        BlockEnd = 'begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <
      item
        Name = 'docclass'
        Description = 'Document Class'
        Code.Strings = (
          '\documentclass[|]{}')
      end
      item
        Name = 'usepop'
        Description = 'Use Package with Options'
        Code.Strings = (
          '\usepackage[|]{}')
      end
      item
        Name = 'usep'
        Description = 'Use Package without Options'
        Code.Strings = (
          '\usepackage{|}')
      end
      item
        Name = 'include'
        Description = 'Include File'
        Code.Strings = (
          '\include{|}')
      end
      item
        Name = 'includeo'
        Description = 'Include only File'
        Code.Strings = (
          '\includeonly{|}')
      end
      item
        Name = 'input'
        Description = 'Input'
        Code.Strings = (
          '\input{|}')
      end
      item
        Name = 'setlength'
        Description = 'Set Length'
        Code.Strings = (
          '\setlength{\|}{}')
      end
      item
        Name = 'addlength'
        Description = 'Add to Length'
        Code.Strings = (
          '\addtolength{\|}{}')
      end
      item
        Name = 'newcmd'
        Description = 'New Command'
        Code.Strings = (
          '\newcommand{|}[]{}')
      end
      item
        Name = 'newenv'
        Description = 'New Environment'
        Code.Strings = (
          '\newenvironment{|}[]{}{}')
      end
      item
        Name = 'mkindex'
        Description = 'Make Index'
        Code.Strings = (
          '\makeindex')
      end
      item
        Name = 'title'
        Description = 'Title'
        Code.Strings = (
          '\title{|}')
      end
      item
        Name = 'author'
        Description = 'Author'
        Code.Strings = (
          '\author{|}')
      end
      item
        Name = 'date'
        Description = 'Date'
        Code.Strings = (
          '\date{|}')
      end
      item
        Name = 'doc'
        Description = 'Begin/End Document'
        Code.Strings = (
          '\begin{document}'
          '  |'
          '\end{document}')
      end
      item
        Name = 'toc'
        Description = 'Table of Contents'
        Code.Strings = (
          '\tableofcontents')
      end
      item
        Name = 'printindex'
        Description = 'Print Index'
        Code.Strings = (
          '\printindex')
      end
      item
        Name = 'chapter'
        Description = 'Chapter'
        Code.Strings = (
          '\chapter{|}')
      end
      item
        Name = 'part'
        Description = 'Part'
        Code.Strings = (
          '\part{|}')
      end
      item
        Name = 'section'
        Description = 'Section'
        Code.Strings = (
          '\section{|}')
      end
      item
        Name = 'subsec'
        Description = 'Sub Section'
        Code.Strings = (
          '\subsection{|}')
      end
      item
        Name = 'ssec'
        Description = 'Sub Sub Section'
        Code.Strings = (
          '\subsubsection{|}')
      end
      item
        Name = 'para'
        Description = 'Paragraph'
        Code.Strings = (
          '\paragraph{|}')
      end
      item
        Name = 'subpara'
        Description = 'Subparagraph'
        Code.Strings = (
          '\subparagraph{|}')
      end
      item
        Name = 'label'
        Description = 'Label'
        Code.Strings = (
          '\label{|}')
      end
      item
        Name = 'ref'
        Description = 'Reference'
        Code.Strings = (
          '\ref{|}')
      end
      item
        Name = 'nameref'
        Description = 'Reference by name'
        Code.Strings = (
          '\nameref{|}')
      end
      item
        Name = 'pageref'
        Description = 'Page Reference'
        Code.Strings = (
          '\pageref{|}')
      end
      item
        Name = 'index'
        Description = 'Index'
        Code.Strings = (
          '\index{|}')
      end
      item
        Name = 'footnote'
        Description = 'Footnote'
        Code.Strings = (
          '\footnote{|}')
      end
      item
        Name = 'math'
        Description = 'Math Mode'
        Code.Strings = (
          '$|$')
      end
      item
        Name = 'environ'
        Description = 'Begin{...} ... End{...}'
        Code.Strings = (
          '\begin{|}'
          ''
          '\end{}')
      end
      item
        Name = 'caption'
        Description = 'Caption'
        Code.Strings = (
          '\caption{|}')
      end
      item
        Name = 'clearpage'
        Description = 'Clear Page'
        Code.Strings = (
          '\clearpage')
      end
      item
        Name = 'newpage'
        Description = 'New Page'
        Code.Strings = (
          '\newpage')
      end
      item
        Name = 'hyph'
        Description = 'Hyphenation'
        Code.Strings = (
          '\hyphenation{|}')
      end
      item
        Name = 'left'
        Description = 'Left Align'
        Code.Strings = (
          '\begin{flushleft}'
          '  |'
          '\end{flushleft}')
      end
      item
        Name = 'center'
        Description = 'Center Align'
        Code.Strings = (
          '\begin{center}'
          '  |'
          '\end{center}')
      end
      item
        Name = 'right'
        Description = 'Right Align'
        Code.Strings = (
          '\begin{flushright}'
          '  |'
          '\end{flushright}')
      end
      item
        Name = 'emph'
        Description = 'Emphasize'
        Code.Strings = (
          '\emph{|}')
      end
      item
        Name = 'bold'
        Description = 'Bold Text'
        Code.Strings = (
          '\textbf{|}')
      end
      item
        Name = 'italic'
        Description = 'Italic Text'
        Code.Strings = (
          '\textit{|}')
      end
      item
        Name = 'textsl'
        Description = 'Slanted Text'
        Code.Strings = (
          '\textsl{|}')
      end
      item
        Name = 'cmdopt'
        Description = 'Command with Options'
        Code.Strings = (
          '\|[]{}')
      end
      item
        Name = 'itemize'
        Description = 'Bullet List'
        Code.Strings = (
          '\begin{itemize}'
          '  \item |'
          '\end{itemize}')
      end
      item
        Name = 'enumerate'
        Description = 'Numeric List'
        Code.Strings = (
          '\begin{enumerate}'
          '  \item |'
          '\end{enumerate}')
      end
      item
        Name = 'descr'
        Description = 'Description'
        Code.Strings = (
          '\begin{description}'
          '  \item[|] '
          '\end{description}')
      end
      item
        Name = 'quote'
        Description = 'Short Quote'
        Code.Strings = (
          '\begin{quote}'
          '  |'
          '\end{quote}')
      end
      item
        Name = 'quotation'
        Description = 'Quotation'
        Code.Strings = (
          '\begin{quotation}'
          '  |'
          '\end{quotation}')
      end
      item
        Name = 'table'
        Description = 'Table'
        Code.Strings = (
          '\begin{table}'
          '  \begin{tabular}'
          '    |'
          '  \end{tabular}'
          '\end{table}')
      end
      item
        Name = 'tabular'
        Description = 'Tabular'
        Code.Strings = (
          '\begin{tabular}'
          '  |'
          '\end{tabular}')
      end
      item
        Name = 'tabbing'
        Description = 'Tabbing'
        Code.Strings = (
          '\begin{tabbing}'
          '  |'
          '\end{tabbing}')
      end
      item
        Name = 'fig'
        Description = 'Figure'
        Code.Strings = (
          '\begin{figure}'
          '  \centering'
          '    \includegraphics{|}'
          '  \caption{}'
          '  \label{fig:}'
          '\end{figure}')
      end
      item
        Name = 'equation'
        Description = 'Equation'
        Code.Strings = (
          '\begin{equation}'
          '  |'
          '\end{equation}')
      end>
    SubAnalyzers = <>
    SampleText.Strings = (
      '%Test'
      '\documentclass[11pt,epsfig]{article}'
      '\centerline{\sc \large A Simple Sample \LaTeX\ File}'
      '\vspace{.5pc}'
      ''
      '\begin{problem}{0}'
      '$\displaystyle y(x)= $'
      '\end{problem}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Cmd'
      'Symbol'
      'Id')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'tex sty aux toc idx'
    LexerName = 'LaTeX'
    Notes.Strings = (
      'Changed by Alex, uvviewsoft.com'
      'Test:'
      'http://www.math.duke.edu/computing/tex/templates.html'
      'Code templates added.')
    LineComment = '%'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal17: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Pragma'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '--.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = 
          '#nested comment allowed: (* (*..*) *)'#13#10'(?s)\(\* ( \(\*.*?\*\) |.' +
          ')*? (\*\)|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Pragma'
        StyleName = 'Pragma'
        TokenType = 9
        Expression = '#nested "--...." comment can be'#13#10'(?s)<\* (--.*?$| .)*? \*>'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39').*?(\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '(\d+ \.)? \d* [ed] [\+\-]? \d+ |'#13#10'\d+ \. \d*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '(?-i)\d[\dA-F]*X'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d[\dA-F]*H'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Int'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\^\#&~\{\}\|]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ARRAY'
              'BEGIN'
              'BY'
              'CASE'
              'CONST'
              'DIV'
              'DO'
              'ELSE'
              'ELSIF'
              'END'
              'EXIT'
              'FOR'
              'IF'
              'IMPORT'
              'IN'
              'INTEGER'
              'IS'
              'LOOP'
              'MOD'
              'MODULE'
              'NEW'
              'NIL'
              'OF'
              'OR'
              'POINTER'
              'PROCEDURE'
              'RECORD'
              'REPEAT'
              'RETURN'
              'THEN'
              'TO'
              'TYPE'
              'UNTIL'
              'VAR'
              'WHILE'
              'WITH')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'proc simple'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'PROCEDURE')
            TokenTypes = 4
          end>
        BlockEnd = 'proc end'
        NameFmt = 'proc %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = 'proc %s-1'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'proc w/[..]'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'PROCEDURE')
            TokenTypes = 4
          end>
        BlockEnd = 'proc end'
        NameFmt = 'proc %s[\]]-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = 'proc %s[\]]-1'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'proc w/(..)'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'PROCEDURE')
            TokenTypes = 4
          end>
        BlockEnd = 'proc end'
        NameFmt = 'proc %s[)]-1'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = 'proc %s[)]-1'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'proc end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'END')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin'
        ConditionList = <
          item
            TagList.Strings = (
              'BEGIN'
              'CASE'
              'IF'
              'WHILE')
            TokenTypes = 4
          end>
        BlockEnd = 'end'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'END')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'MODULE OberonSample;'
      ''
      '<* compiler pragma -- *> *> comment'
      '   pragma end *>'
      '(* comment'
      '   comment end *)'
      '(*(**) this is still a comment *)'
      ''
      'CONST'
      '  sqString* = '#39'this is a string within "a string" ...'#39';'
      '  dqString* = "this is a string within '#39'a string'#39' ...";'
      '  a = 0DH;'
      '  a = 0DX;'
      '  r = 1. + 1.E2 + 1.2 + 4.567E8 + 0.577D-6;'
      '  '
      '  const div case (* lower: not reserved *)   '
      '   '
      'PROCEDURE ['#39'C'#39'] getFuncsArray* (VAR nFuncs: LONGINT): LONGINT;'
      'BEGIN'
      '   RETURN SYSTEM.ADR (MI^)'
      'END getFuncsArray;'
      '  '
      
        '   PROCEDURE (self: Shape)rMoveTo*(deltax: INTEGER; deltay: INTE' +
        'GER);'
      '   BEGIN'
      
        '      self^.moveTo(self^.getX() + deltax, self^.getY() + deltay)' +
        ';'
      '   END rMoveTo;'
      ''
      '   (* abstract draw method *)'
      '   PROCEDURE (self: Shape)draw*();'
      '   BEGIN'
      '   END draw;'
      ''
      '   (* allocate and initialize a new object instance *)'
      
        '   PROCEDURE Make*(x: INTEGER; y: INTEGER; radius: INTEGER): Cir' +
        'cle;'
      '   VAR self: Circle;'
      '   BEGIN'
      '      NEW(self);'
      '      self^.moveTo(x, y);'
      '      self^.setRadius(radius);'
      '      RETURN self;'
      '   END Make;'
      ''
      'END OberonSample.')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'ob2 mod'
    LexerName = 'Oberon'
    Notes.Strings = (
      'Fixed by Alex, uvviewsoft.com'
      'See'
      'http://oberonrevival.sourceforge.net/docs/xds/html/o2rep.html'
      'N++ lexer written in Ob2:'
      'http://sourceforge.net/projects/npp-plugins/files/Oberon2Lexer/')
    LineComment = '--'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal32: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Attrib'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\.|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id not-function'
        StyleName = 'Identifier'
        TokenType = 10
        Expression = 
          '#needed to not catch by tree'#13#10'\b (if | for | while | catch | for' +
          'each | struct | template | function) \b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\+.*?(\+/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '@Attr'
        StyleName = 'Attrib'
        TokenType = 9
        Expression = '@\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^~\.]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol sungle'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\),;@\?!]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol []'
        StyleName = 'Symbol'
        TokenType = 11
        Expression = '[\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__DATE__'
              '__FILE__'
              '__LINE__'
              '__TIME__'
              '__TIMESTAMP__'
              'abstract'
              'alias'
              'align'
              'asm'
              'assert'
              'auto'
              'bit'
              'body'
              'break'
              'byte'
              'case'
              'cast'
              'catch'
              'cdouble'
              'cent'
              'cfloat'
              'char'
              'class'
              'const'
              'continue'
              'creal'
              'dchar'
              'debug'
              'default'
              'delegate'
              'delete'
              'deprecated'
              'do'
              'double'
              'else'
              'enum'
              'export'
              'extern'
              'false'
              'final'
              'finally'
              'float'
              'for'
              'foreach'
              'function'
              'goto'
              'idouble'
              'if'
              'ifloat'
              'import'
              'in'
              'inout'
              'int'
              'interface'
              'invariant'
              'ireal'
              'is'
              'long'
              'mixin'
              'module'
              'new'
              'null'
              'out'
              'override'
              'package'
              'pragma'
              'private'
              'protected'
              'public'
              'real'
              'return'
              'short'
              'sizeof'
              'static'
              'struct'
              'super'
              'switch'
              'synchronized'
              'template'
              'this'
              'throw'
              'true'
              'try'
              'typedef'
              'typeid'
              'typeof'
              'ubyte'
              'ucent'
              'uint'
              'ulong'
              'union'
              'unittest'
              'ushort'
              'version'
              'void'
              'volatile'
              'wchar'
              'while'
              'with')
            TokenTypes = 1028
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Keyw attr'
        StyleName = 'Attrib'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'nothrow'
              'pure')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        HighlightPos = cpBound
        DrawStaple = True
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '}'
      end
      item
        DisplayName = '}'
        BlockName = '{'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
          end>
        BlockEnd = 'class end'
        NameFmt = 'class %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 1
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class end'
        BlockName = 'class begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func_of_class begin'
        BlockName = 'class begin'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 518
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            CondType = tcSkip
            TokenTypes = 2048
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'func_of_class end'
        NameFmt = '%s-1~s[(]1'
        GroupFmt = '%ppsl1'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func_of_class end'
        BlockName = 'func_of_class begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func begin'
        BlockName = 'class begin'
        NotParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 518
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            CondType = tcSkip
            TokenTypes = 2048
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'func end'
        NameFmt = '%s-1~s[(]1'
        RefToCondEnd = True
        HighlightPos = cpBound
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func end'
        BlockName = 'func begin'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'shared string[] sources;'
      ''
      'void thread1(int a)'
      '{'
      '    int mio(int a) {'
      '        return 0;'
      '    }'
      '    writeln("T1: ", str);'
      '}'
      ''
      'string[] func(immutable string[] argv)'
      '{'
      '    if (!parse(argv)) {'
      '    }'
      '}'
      ''
      'class MyClass {'
      '    private bool isValid = false;'
      '    public static ulong fib(in ulong n) @safe {'
      '        return n < 2 ? n : fib(n - 1) + fib(n - 2);'
      '    }'
      '    public static ulong fib2(in ulong n) @safe {'
      '    }'
      '}'
      '      '
      '/* Prime numbers */'
      '@safe nothrow pure ulong fib_ok(ulong n)'
      '{'
      '    return n < 2 ? n : fib_ok(n - 1) + fib_ok(n - 2);'
      '}'
      ''
      '@safe nothrow ulong fib_bad(ulong n) pure'
      '{'
      '    return n < 2 ? n : fib_bad(n - 1) + fib_bad(n - 2);'
      '}'
      ' '
      'int main()'
      '{   int i, count, prime, k, iter;'
      ''
      '    printf("10 iterations\n");'
      '    for (iter = 1; iter <= 10; iter++)'
      '    {'#9'count = 0;'
      #9'flags[] = 1;'
      #9'for (i = 0; i < flags.length; i++)'
      #9'{   if (flags[i])'
      #9'    {'#9'prime = i + i + 3;'
      #9#9'k = i + prime;'
      #9#9'while (k < flags.length)'
      '        {'
      '            flags[k] = 0;'
      '            k += prime;'
      '        }'
      '        count += 1;'
      '        }'
      '    }'
      '    }'
      '    printf ("\n%d primes", count);'
      '    return 0;'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Attrib'
      'Id not-func'
      'Symbol []')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'd'
    LexerName = 'DigitalMars D'
    Notes.Strings = (
      'Author: krzys.mif@op.pl')
    LineComment = '//'
    Charset = DEFAULT_CHARSET
    Left = 140
    Top = 160
  end
  object SyntAnal15: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Var'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id Param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Var'
        StyleName = 'Var'
        Expression = '\$\{.+?\} |'#13#10'\$\(.+?\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id Param'
        StyleName = 'Id Param'
        TokenType = 5
        Expression = '#first word in line, before space'#13#10'^\w+(?=\s)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '\#?\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\{\}%\|\&\\~]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        EndOfTextClose = True
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment'
        RefToCondEnd = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Param'
        ConditionList = <
          item
            TokenTypes = 32
          end>
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#Text'
      '#Text'
      '#Text'
      'Name1="Text"'
      'Name2=${var}/$(dir)/text.txt')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Id Param')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'properties conf'
    LexerName = 'Properties'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      '+ ${var}, $(var) hilight'
      '+ comments hilight'
      '+ support for #aabbcc color codes'
      '+ tree (tested on squid.conf)')
    LineComment = '#'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal26: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Command'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clSilver
      end
      item
        DisplayName = 'Default'
        Font.Charset = ANSI_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Consolas'
        Font.Style = []
        BgColor = clHighlightText
        FormatType = ftColor
      end
      item
        DisplayName = 'Directive'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 159
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Parameter'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 33239
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Selection'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Variable within String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 13260
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15658734
      end
      item
        DisplayName = 'Tree'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Any name'
        TokenType = 1
        Expression = '(un\.)? [a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Block Comment'
        StyleName = 'Comment'
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'CallBack'
        TokenType = 1
        Expression = '(un)?\.\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Commands'
        TokenType = 1
        Expression = '[a-z!]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        Expression = '(\#|\;).*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Constant'
        StyleName = 'Variable'
        TokenType = 1
        Expression = '\$\{.*?\}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hexadecimal'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Number'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+\.?\d*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 8
        Expression = '(?s)(["'#39'`])(\\\\1|.)*?\1'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 1
        Expression = '\$\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Function'
        StyleName = 'Current'
        ConditionList = <
          item
            TagList.Strings = (
              'Function')
          end>
        BlockEnd = 'FunctionEnd'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpBoundTag
        CollapseFmt = '%s0 %s-1'
        TreeItemImage = 5
        TreeGroupImage = 1
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'FunctionEnd'
      end
      item
        DisplayName = 'FunctionEnd'
        BlockName = 'Function'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'FunctionEnd')
          end>
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'macro'
        StyleName = 'Current'
        ConditionList = <
          item
            TagList.Strings = (
              '!macro')
            IgnoreCase = True
          end>
        BlockEnd = 'macroend'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpBoundTag
        CollapseFmt = '%s0 %s-1'
        TreeItemImage = 6
        TreeGroupImage = 1
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '!macroend'
      end
      item
        DisplayName = 'macroend'
        BlockName = 'macro'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '!macroend')
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'SectionGroup'
        StyleName = 'Current'
        ConditionList = <
          item
            TagList.Strings = (
              'SectionGroup')
          end>
        BlockEnd = 'SectionGroupEnd'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpBoundTag
        CollapseFmt = '%s0 %s-1'
        TreeGroupStyle = 'Tree'
        TreeItemImage = 1
        TreeGroupImage = 1
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'SectionGroupEnd'
      end
      item
        DisplayName = 'SectionGroupEnd'
        BlockName = 'SectionGroup'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'SectionGroupEnd')
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Section'
        StyleName = 'Current'
        ConditionList = <
          item
            TagList.Strings = (
              'Section')
          end>
        BlockEnd = 'SectionEnd'
        NameFmt = '%sz0'
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpBoundTag
        CollapseFmt = '%sz0'
        TreeGroupStyle = 'Tree'
        TreeItemImage = 3
        TreeGroupImage = 1
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'SectionEnd'
      end
      item
        DisplayName = 'SectionEnd'
        BlockName = 'Section'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'SectionEnd')
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'PageEx'
        StyleName = 'Current'
        ConditionList = <
          item
            TagList.Strings = (
              'PageEx')
          end>
        BlockEnd = 'PageExEnd'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpBoundTag
        CollapseFmt = '%s0 %s-1'
        TreeItemImage = 2
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'PageExEnd'
      end
      item
        DisplayName = 'PageExEnd'
        BlockName = 'PageEx'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'PageExEnd')
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'if'
        StyleName = 'Current'
        ConditionList = <
          item
            TagList.Strings = (
              '!if'
              '!ifdef'
              '!ifmacrodef'
              '!ifmacrondef'
              '!ifndef')
            IgnoreCase = True
          end>
        BlockEnd = 'endif'
        DisplayInTree = False
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpBoundTag
        CollapseFmt = '%s0 %sz-1...'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '!endif'
      end
      item
        DisplayName = 'endif'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '!endif')
            IgnoreCase = True
          end>
        BlockEnd = 'if'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Commands'
        StyleName = 'Command'
        StatesPresent = 1
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abort'
              'addbrandingimage'
              'addsize'
              'allowrootdirinstall'
              'allowskipfiles'
              'autoclosewindow'
              'bgfont'
              'bggradient'
              'brandingtext'
              'bringtofront'
              'call'
              'callinstdll'
              'caption'
              'changeui'
              'checkbitmap'
              'clearerrors'
              'completedtext'
              'componenttext'
              'copyfiles'
              'crccheck'
              'createdirectory'
              'createfont'
              'createshortcut'
              'delete'
              'deleteinisec'
              'deleteinistr'
              'deleteregkey'
              'deleteregvalue'
              'detailprint'
              'detailsbuttontext'
              'dirshow'
              'dirtext'
              'dirvar'
              'dirverify'
              'enablewindow'
              'enumregkey'
              'enumregvalue'
              'exch'
              'exec'
              'execshell'
              'execwait'
              'expandenvstrings'
              'file'
              'filebufsize'
              'fileclose'
              'fileerrortext'
              'fileopen'
              'fileread'
              'filereadbyte'
              'filereadutf16le'
              'filereadword'
              'fileseek'
              'filewrite'
              'filewritebyte'
              'filewriteutf16le'
              'filewriteword'
              'findclose'
              'findfirst'
              'findnext'
              'findproc'
              'findwindow'
              'flushini'
              'function'
              'functionend'
              'getcurinsttype'
              'getcurrentaddress'
              'getdlgitem'
              'getdllversion'
              'getdllversionlocal'
              'geterrorlevel'
              'getfiletime'
              'getfiletimelocal'
              'getfullpathname'
              'getfunctionaddress'
              'getinstdirerror'
              'getlabeladdress'
              'gettempfilename'
              'goto'
              'hidewindow'
              'icon'
              'ifabort'
              'iferrors'
              'iffileexists'
              'ifrebootflag'
              'ifsilent'
              'initpluginsdir'
              'installbuttontext'
              'installcolors'
              'installdir'
              'installdirregkey'
              'instprogressflags'
              'insttype'
              'insttypegettext'
              'insttypesettext'
              'intcmp'
              'intcmpu'
              'intfmt'
              'intop'
              'iswindow'
              'langstring'
              'licensebkcolor'
              'licensedata'
              'licenseforceselection'
              'licenselangstring'
              'licensetext'
              'loadlanguagefile'
              'lockwindow'
              'logset'
              'logtext'
              'messagebox'
              'miscbuttontext'
              'name'
              'nop'
              'outfile'
              'page'
              'pagecallbacks'
              'pageex'
              'pageexend'
              'pop'
              'push'
              'quit'
              'readenvstr'
              'readinistr'
              'readregdword'
              'readregstr'
              'reboot'
              'regdll'
              'rename'
              'requestexecutionlevel'
              'reservefile'
              'return'
              'rmdir'
              'searchpath'
              'section'
              'sectionend'
              'sectiongetflags'
              'sectiongetinsttypes'
              'sectiongetsize'
              'sectiongettext'
              'sectiongroup'
              'sectiongroupend'
              'sectionin'
              'sectionsetflags'
              'sectionsetinsttypes'
              'sectionsetsize'
              'sectionsettext'
              'sendmessage'
              'setautoclose'
              'setbrandingimage'
              'setcompress'
              'setcompressionlevel'
              'setcompressor'
              'setcompressordictsize'
              'setctlcolors'
              'setcurinsttype'
              'setdatablockoptimize'
              'setdatesave'
              'setdetailsprint'
              'setdetailsview'
              'seterrorlevel'
              'seterrors'
              'setfileattributes'
              'setfont'
              'setoutpath'
              'setoverwrite'
              'setpluginunload'
              'setrebootflag'
              'setregview'
              'setshellvarcontext'
              'setsilent'
              'showinstdetails'
              'showuninstdetails'
              'showwindow'
              'silentinstall'
              'silentuninstall'
              'sleep'
              'spacetexts'
              'strcmp'
              'strcmps'
              'strcpy'
              'strlen'
              'subcaption'
              'uninstallbuttontext'
              'uninstallcaption'
              'uninstallicon'
              'uninstallsubcaption'
              'uninstalltext'
              'uninstpage'
              'unregdll'
              'var'
              'viaddversionkey'
              'viproductversion'
              'windowicon'
              'writeinistr'
              'writeregbin'
              'writeregdword'
              'writeregexpandstr'
              'writeregstr'
              'writeuninstaller'
              'xpstyle')
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        TreeItemImage = 1
        TreeGroupImage = 1
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Constants'
        StyleName = 'Variable'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '${__date__}'
              '${__file__}'
              '${__function__}'
              '${__global__}'
              '${__line__}'
              '${__pageex__}'
              '${__section__}'
              '${__time__}'
              '${__timestamp__}'
              '${__uninstall__}'
              '${nsis_version}'
              '${nsisdir}'
              '$0'
              '$1'
              '$2'
              '$3'
              '$4'
              '$5'
              '$6'
              '$7'
              '$8'
              '$9'
              '$admintools'
              '$appdata'
              '$cdburn_area'
              '$cmdline'
              '$commonfiles'
              '$commonfiles32'
              '$commonfiles64'
              '$cookies'
              '$desktop'
              '$documents'
              '$exedir'
              '$exefile'
              '$exepath'
              '$favorites'
              '$fonts'
              '$history'
              '$hwndparent'
              '$instdir'
              '$internet_cache'
              '$language'
              '$localappdata'
              '$music'
              '$nethood'
              '$outdir'
              '$pictures'
              '$pluginsdir'
              '$printhood'
              '$profile'
              '$programfiles'
              '$programfiles32'
              '$programfiles64'
              '$quicklaunch'
              '$r0'
              '$r1'
              '$r2'
              '$r3'
              '$r4'
              '$r5'
              '$r6'
              '$r7'
              '$r8'
              '$r9'
              '$recent'
              '$resources'
              '$resources_localized'
              '$sendto'
              '$smprograms'
              '$smstartup'
              '$startmenu'
              '$sysdir'
              '$temp'
              '$templates'
              '$videos'
              '$windir')
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Directives'
        StyleName = 'Directive'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '!addincludedir'
              '!addplugindir'
              '!appendfile'
              '!cd'
              '!define'
              '!delfile'
              '!echo'
              '!else'
              '!endif'
              '!error'
              '!execute'
              '!if'
              '!ifdef'
              '!ifmacrodef'
              '!ifmacrondef'
              '!ifndef'
              '!include'
              '!insertmacro'
              '!macro'
              '!macroend'
              '!packhdr'
              '!searchparse'
              '!searchreplace'
              '!system'
              '!tempfile'
              '!undef'
              '!verbose'
              '!warning'
              'if'
              'ifdef'
              'ifmacrodef'
              'ifmacrondef'
              'ifndef')
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Parameters'
        StyleName = 'Parameter'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '.onguiend'
              '.onguiinit'
              '.oninit'
              '.oninstfailed'
              '.oninstsuccess'
              '.onmouseoversection'
              '.onrebootfailed'
              '.onselchange'
              '.onuserabort'
              '.onverifyinstdir'
              'admin'
              'all'
              'alt'
              'archive'
              'auto'
              'both'
              'bottom'
              'branding'
              'bzip2'
              'colored'
              'components'
              'componentsonlyoncustom'
              'control'
              'cur'
              'current'
              'custom'
              'customstring'
              'date'
              'directory'
              'enablecancel'
              'end'
              'ext'
              'false'
              'file_attribute_archive'
              'file_attribute_hidden'
              'file_attribute_normal'
              'file_attribute_offline'
              'file_attribute_readonly'
              'file_attribute_system'
              'file_attribute_temporary'
              'filesonly'
              'final'
              'force'
              'global'
              'gray'
              'hidden'
              'hide'
              'highest'
              'hkcc'
              'hkcr'
              'hkcu'
              'hkdd'
              'hkey_classes_root'
              'hkey_current_config'
              'hkey_current_user'
              'hkey_dyn_data'
              'hkey_local_machine'
              'hkey_performance_data'
              'hkey_users'
              'hklm'
              'hkpd'
              'hku'
              'idabort'
              'idcancel'
              'idd_dir'
              'idd_inst'
              'idd_instfiles'
              'idd_license'
              'idd_selcom'
              'idd_uninst'
              'idd_verify'
              'idignore'
              'idno'
              'idok'
              'idretry'
              'idyes'
              'ifdiff'
              'ifempty'
              'ifnewer'
              'ignorecase'
              'imgid'
              'instfiles'
              'italic'
              'lang'
              'lastused'
              'leave'
              'left'
              'license'
              'listonly'
              'lzma'
              'math'
              'mb_abortretryignore'
              'mb_defbutton1'
              'mb_defbutton2'
              'mb_defbutton3'
              'mb_defbutton4'
              'mb_iconexclamation'
              'mb_iconinformation'
              'mb_iconquestion'
              'mb_iconstop'
              'mb_ok'
              'mb_okcancel'
              'mb_retrycancel'
              'mb_right'
              'mb_rtlreading'
              'mb_setforeground'
              'mb_topmost'
              'mb_usericon'
              'mb_yesno'
              'mb_yesnocancel'
              'nevershow'
              'nocustom'
              'noerrors'
              'none'
              'nonfatal'
              'normal'
              'off'
              'offline'
              'on'
              'oname'
              'open'
              'print'
              'readonly'
              'rebootok'
              'resizetofit'
              'right'
              'sd'
              'set'
              'shctx'
              'shell_context'
              'shift'
              'short'
              'show'
              'silent'
              'silentlog'
              'smooth'
              'solid'
              'strike'
              'sw_hide'
              'sw_showmaximized'
              'sw_showminimized'
              'sw_shownormal'
              'system'
              'temporary'
              'textonly'
              'timeout'
              'top'
              'trimcenter'
              'trimleft'
              'trimright'
              'true'
              'try'
              'un.onguiend '
              'un.onguiinit'
              'un.oninit'
              'un.onrebootfailed'
              'un.onselchange'
              'un.onuninstfailed'
              'un.onuninstsuccess'
              'un.onuserabort'
              'underline'
              'uninstconfirm'
              'user'
              'utcdate'
              'windows'
              'zlib')
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <
      item
        Name = 'DoWhile'
        Description = 'Do While'
        Code.Strings = (
          '${Do}'
          ''
          '${LoopWhile} <caret>')
        Advanced = True
      end
      item
        Name = 'DoUntil'
        Description = 'Do Until'
        Code.Strings = (
          '${Do}'
          ''
          '${LoopUntil} <caret>')
        Advanced = True
      end
      item
        Name = 'While'
        Description = 'While'
        Code.Strings = (
          '${While} <caret>'
          ''
          '${EndWhile}')
        Advanced = True
      end
      item
        Name = 'Select'
        Description = 'Select'
        Code.Strings = (
          '${Select} <caret>'
          '    ${Case} 1'
          '    '
          '    ${Case} 2'
          '        '
          '    ${CaseElse}'
          '    '
          '${EndSelect}')
        Advanced = True
      end
      item
        Name = 'For'
        Code.Strings = (
          '${For} <caret>'
          ''
          '${Next}')
        Advanced = True
      end
      item
        Name = 'ForEach'
        Description = 'For Each'
        Code.Strings = (
          '${ForEach} <caret>'
          ''
          '${Next}')
        Advanced = True
      end
      item
        Name = 'Switch'
        Description = 'Switch'
        Code.Strings = (
          '${Switch} <caret>'
          '    ${Case} 1'
          '        ${Break}'
          '    ${Case} 2        '
          '        ${Break}'
          '    ${Default}'
          '        '
          '${EndSwitch}')
        Advanced = True
      end
      item
        Name = 'If'
        Code.Strings = (
          '${If} <caret>'
          '    '
          '${EndIf}')
        Advanced = True
      end
      item
        Name = 'IfElse'
        Description = 'If Else'
        Code.Strings = (
          '${If} <caret>'
          ''
          '${Else}'
          '    '
          '${EndIf}')
        Advanced = True
      end
      item
        Name = 'DoLoop'
        Code.Strings = (
          '${Do}'
          '    ${If} <caret>'
          '        ${ExitDo}'
          '    ${Endif}'
          '${Loop}')
        Advanced = True
      end
      item
        Name = 'MessageBox'
        Description = 'Message Box'
        Code.Strings = (
          'MessageBox MB_OK "<caret>"')
        Advanced = True
      end>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/***************************'
      '* Example NSIS Code'
      '***************************/'
      '  '
      '!if 1 < 2 '
      '  !echo "1 is smaller than 2!!"'
      '!else if ! 3.1 > 1.99'
      '  !error "this line should never appear"'
      '!else'
      '  !error "neither should this"'
      '!endif'
      ''
      '!define SETUPNAME "Setup Name"'
      '!include MUI2.nsh '
      '!insertmacro MUI_PAGE_INSTFILES'
      '!insertmacro MUI_LANGUAGE "English"'
      ''
      ';*** Runtime Switches'
      'RequestExecutionlevel user'
      'ShowInstDetails show'
      ''
      ';*** Compiler Flags'
      'SetCompressionLevel 9'
      '              '
      'Name '#39'${SETUPNAME}'#39
      'OutFile '#39'setup.exe'#39
      '            '
      '#Variables'
      'Var File1'
      'Var File2         '
      ''
      '!macro "MyMacro"'
      '  MessageBox MB_OK|MB_ICONINFORMATION `Hello World!`'
      '!macroend'
      ''
      'Section Main'
      '  !insertmacro MyMacro'
      'SectionEnd'
      '              '
      'SectionGroup MyGroup'
      ''
      '  Section "MySection1" '
      #9'StrCpy $File1 "readme.txt"'
      '    File /nonfatal "$File1" '
      '  SectionEnd'
      '              '
      '  Section "MySection2"'
      '  '#9'StrCpy $File2 "MyApp.exe"'
      '  '#9'File /nonfatal "$File1"'
      '  '#9'Call MyFunction'
      '  SectionEnd     '
      ''
      'SectionGroupEnd'
      '               '
      'Function MyFunction'
      '  StrCpy $0 $EXEDIR '
      '  DetailPrint "Good bye!"  '
      'FunctionEnd'
      ''
      'PageEx vico'
      #9
      'PageExEnd')
    TokenTypeNames.Strings = (
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Number'
      'Preprocessor'
      'Constant')
    MarkedBlockStyle = 'Selection'
    Extentions = 'nsh nsi'
    LexerName = 'NSIS'
    Notes.Strings = (
      'Nullsoft Scriptable Install System'
      'Author: Victor Emmanuel'
      'E-mail: vicokoby@gmail.com')
    LineComment = '#'
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal58: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -11
        Font.Name = 'Courier New'
        Font.Style = []
        VertAlignment = vaTop
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Const'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)=begin.*?=end'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\# (?!\{) .*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)"(.|\\")*?("|(?<!\\)$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String2'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'StringRE'
        StyleName = 'String'
        TokenType = 4
        Expression = '/(\\/|.)*?(/)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'StringRE2'
        StyleName = 'String'
        TokenType = 4
        Expression = '%r\{.*?(\})'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IfBegin'
        StyleName = 'Reserved word'
        TokenType = 9
        Expression = '^\s*?(if|unless|while)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any Name'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\+\-\*\/\?\!=\.\<\>%\|:~\#]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable - predefined'
        StyleName = 'Variable'
        Expression = 
          '\$([!$&"'#39'*+,./0:;<=>?@\`~1-9]| -[0FIKadilpvw]| (deferr|defout|st' +
          'derr|stdin|stdout| DEBUG|FILENAME|KCODE|LOADED_FEATURES|LOAD_PAT' +
          'H| PROGRAM_NAME|SAFE|VERBOSE)\b)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable global'
        StyleName = 'Variable'
        Expression = '\$[a-zA-Z_][a-zA-Z0-9_]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable - instance'
        StyleName = 'Variable'
        Expression = '@[a-zA-Z_][a-zA-Z0-9_]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable - class'
        StyleName = 'Variable'
        Expression = '@@[a-zA-Z_][a-zA-Z0-9_]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__FILE__'
              '__id__'
              '__LINE__'
              '__send__'
              '_id2ref'
              'Abbrev'
              'abort'
              'abort_on_exception'
              'abs'
              'accept'
              'add'
              'add_observer'
              'addr'
              'alias'
              'alias_method'
              'alive'
              'all'
              'ancestors'
              'and'
              'append_features'
              'arg'
              'ARGF'
              'ArgumentError'
              'ARGV'
              'arity'
              'Array'
              'asctime'
              'assoc'
              'at'
              'at_exit'
              'atan2'
              'atime'
              'attr'
              'attr_accessor'
              'attr_reader'
              'attr_writer'
              'autoload'
              'backtrace'
              'base'
              'Base64'
              'basename'
              'BasicSocket'
              'begin'
              'Benchmark'
              'Benchmark::Tms'
              'between'
              'Bignum'
              'bind'
              'binding'
              'binmode'
              'blksize'
              'block_given'
              'blockdev'
              'blockquote'
              'blocks'
              'break'
              'broadcast'
              'call'
              'callcc'
              'caller'
              'capitalize'
              'caption'
              'case'
              'casefold'
              'catch'
              'ceil'
              'center'
              'CGI'
              'CGI::Cookie'
              'CGI::HtmlExtension'
              'CGI::QueryExtension'
              'CGI::Session'
              'CGI::Session::FileStore'
              'CGI::Session::MemoryStore'
              'changed'
              'chardev'
              'chdir'
              'checkbox'
              'checkbox_group'
              'chmod'
              'chomp'
              'chop'
              'chown'
              'chr'
              'chroot'
              'Class'
              'class_eval'
              'class_variables'
              'clear'
              'clone'
              'close'
              'close_read'
              'close_write'
              'closed'
              'cmd'
              'cmp'
              'code'
              'coerce'
              'collect'
              'compact'
              'Comparable'
              'compare'
              'compile'
              'Complex'
              'concat'
              'ConditionVariable'
              'Config'
              'conjugate'
              'connect'
              'const_defined'
              'const_get'
              'const_load'
              'const_set'
              'constants'
              'content_type'
              'Continuation'
              'cookies'
              'copy'
              'cos'
              'count'
              'count_observers'
              'cp'
              'create_makefile'
              'critical'
              'crypt'
              'ctime'
              'current'
              'DATA'
              'Date'
              'DateTime'
              'day'
              'DEBUG'
              'debug_mode'
              'def'
              'default'
              'deferr'
              'define_finalizer'
              'defined'
              'defout'
              'DelegateClass'
              'Delegator'
              'delete'
              'delete_at'
              'delete_if'
              'delete_observer'
              'delete_observers'
              'detect'
              'dev'
              'dir'
              'dir_config'
              'directory'
              'dirname'
              'disable'
              'display'
              'divmod'
              'do'
              'do_not_reverse_lookup'
              'downcase'
              'downto'
              'dump'
              'dup'
              'each'
              'each_byte'
              'each_index'
              'each_key'
              'each_line'
              'each_object'
              'each_pair'
              'each_with_index'
              'egid'
              'else'
              'elsif'
              'empty'
              'enable'
              'end'
              'england'
              'English'
              'ensure'
              'entries'
              'Enumerable'
              'Enumerable::Enumerator'
              'ENV'
              'eof'
              'EOFError'
              'eql'
              'equal'
              'ERB'
              'ERB::Util'
              'Errno'
              'Errno::ENOENT'
              'Errno::EPERM'
              'error'
              'error_message'
              'escape'
              'escapeElement'
              'escapeHTML'
              'euid'
              'eval'
              'exception'
              'exclude_end'
              'exec'
              'executable'
              'executable_real'
              'exist'
              'existw'
              'exit'
              'exp'
              'expand_path'
              'extend'
              'extend_object'
              'fail'
              'false'
              'FalseClass'
              'Fatal'
              'fcntl'
              'fetch'
              'File'
              'File::Constants'
              'File::Stat'
              'file_field'
              'FILENAME'
              'fileno'
              'FileTest'
              'FileUtils'
              'FileUtils::DryRun'
              'FileUtils::NoWrite'
              'FileUtils::StreamUtils'
              'FileUtils::Verbose'
              'fill'
              'find'
              'find_all'
              'find_library'
              'finite'
              'first'
              'Fixnum'
              'flatten'
              'Float'
              'FloatDomainError'
              'flock'
              'flush'
              'for'
              'for_fd'
              'foreach'
              'fork'
              'form'
              'format'
              'Forwardable'
              'freeze'
              'frexp'
              'frozen'
              'FTP'
              'ftype'
              'garbage_collect'
              'GC'
              'Generator'
              'get'
              'get_option'
              'getaddress'
              'getaddrinfo'
              'getbinaryfile'
              'getc'
              'gethostbyaddr'
              'gethostbyname'
              'gethostname'
              'getnameinfo'
              'getogrp'
              'GetoptLong'
              'getpeername'
              'getpriority'
              'gets'
              'getservbyname'
              'getsockname'
              'getsockopt'
              'gettextfile'
              'getwd'
              'gid'
              'glob'
              'global_variables'
              'gm'
              'gmt'
              'gmtime'
              'gregorian'
              'gregorian_leap'
              'grep'
              'grpowned'
              'gsub'
              'has_key'
              'has_value'
              'Hash'
              'have_func'
              'have_header'
              'have_library'
              'head'
              'header'
              'hex'
              'hidden'
              'hour'
              'html'
              'HTTP'
              'HTTPResponse'
              'Iconv'
              'Iconv::BrokenLibrary'
              'Iconv::Failure'
              'Iconv::IllegalSequence'
              'Iconv::InvalidCharacter'
              'Iconv::InvalidEncoding'
              'Iconv::OutOfRange'
              'id'
              'id2name'
              'if'
              'image'
              'img'
              'img_button'
              'in'
              'include'
              'included_modules'
              'index'
              'IndexError'
              'indexes'
              'indices'
              'inherited'
              'initialize'
              'ino'
              'inspect'
              'install'
              'instance_eval'
              'instance_methods'
              'instance_of'
              'instance_variables'
              'Integer'
              'intern'
              'Interrupt'
              'invoke'
              'IO'
              'ioctl'
              'IOError'
              'IPSocket'
              'is_a'
              'isatty'
              'isdst'
              'italy'
              'iterator'
              'jd'
              'join'
              'julian'
              'julian_leap'
              'kcode'
              'Kernel'
              'key'
              'keys'
              'kill'
              'kind_of'
              'lambda'
              'last'
              'last_match'
              'lastresp'
              'ldexp'
              'leap'
              'length'
              'lineno'
              'link'
              'list'
              'listen'
              'ljust'
              'load'
              'LOAD_PATH'
              'LOADED_FEATURES'
              'LoadError'
              'local'
              'local_path'
              'local_variables'
              'LocalJumpError'
              'localtime'
              'lock'
              'locked'
              'log'
              'log10'
              'Logger'
              'Logger::Application'
              'Logger::Error'
              'Logger::Formatter'
              'Logger::LogDevice'
              'Logger::LogDevice::LogDeviceMutex'
              'Logger::Severity'
              'Logger::ShiftingError'
              'login'
              'lookup_order'
              'loop'
              'ls'
              'lstat'
              'mails'
              'main'
              'makedirs'
              'makepath'
              'map'
              'Marshal'
              'match'
              'MatchData'
              'Math'
              'Matrix'
              'max'
              'mday'
              'member'
              'members'
              'message'
              'message_loop'
              'Method'
              'method_added'
              'method_defined'
              'method_missing'
              'methods'
              'min'
              'mjd'
              'mkdir'
              'mkmf'
              'mktime'
              'mode'
              'Module'
              'module_eval'
              'module_function'
              'modulo'
              'mon'
              'month'
              'move'
              'mtime'
              'multipart_form'
              'Mutex'
              'mv'
              'name'
              'NameError'
              'NameError::message'
              'nan'
              'nesting'
              'NET'
              'Net::APOP'
              'Net::FTP'
              'Net::HTTP'
              'Net::HTTPResponse'
              'Net::POP'
              'Net::POPMail'
              'Net::SMTP'
              'Net::Telnet'
              'new'
              'new1'
              'new2'
              'new3'
              'newsg'
              'neww'
              'next'
              'nil'
              'NilClass'
              'nitems'
              'nlink'
              'NoMethodError'
              'nonzero'
              'not'
              'notify_observers'
              'NotImplementedError'
              'now'
              'ns'
              'Numeric'
              'Object'
              'ObjectSpace'
              'Observable'
              'oct'
              'on_event'
              'open'
              'or'
              'ordering'
              'original_filename'
              'os'
              'out'
              'owned'
              'pack'
              'pair'
              'params'
              'parse'
              'parsedate'
              'pass'
              'passive'
              'password_field'
              'path'
              'Pathname'
              'peeraddr'
              'pid'
              'pipe'
              'polar'
              'pop'
              'popen'
              'POPMail'
              'popup_menu'
              'port'
              'pos'
              'post'
              'ppid'
              'Precision'
              'pretty'
              'print'
              'printf'
              'priority'
              'private'
              'private_class_method'
              'private_instance_methods'
              'private_methods'
              'Proc'
              'Process'
              'Process::GID'
              'Process::Status'
              'Process::Sys'
              'Process::UID'
              'PROGRAM_NAME'
              'protected'
              'protected_instance_methods'
              'protected_methods'
              'prune'
              'Pstore'
              'PStore::Error'
              'public'
              'public_class_method'
              'public_instance_methods'
              'public_methods'
              'push'
              'putbinaryfile'
              'putc'
              'puts'
              'puttextfile'
              'pwd'
              'Queue'
              'quiet'
              'quit'
              'quote'
              'radio_button'
              'radio_groupready'
              'raise'
              'rand'
              'Range'
              'RangeError'
              'rassoc'
              'Rational'
              'rdev'
              'read'
              'readable'
              'readable_real'
              'readchar'
              'readline'
              'readlines'
              'readlink'
              'real'
              'recv'
              'recvfrom'
              'redo'
              'Regexp'
              'RegexpError'
              'rehash'
              'reject'
              'remainder'
              'remove_const'
              'remove_method'
              'rename'
              'reopen'
              'replace'
              'require'
              'rescue'
              'reset'
              'respond_to'
              'restore'
              'resume'
              'retrbinary'
              'retrlinew'
              'retry'
              'return'
              'return_code'
              'reverse'
              'reverse_each'
              'rewind'
              'rfc1123_date'
              'rindex'
              'rjust'
              'rm_f'
              'rmdir'
              'round'
              'RUBY_PLATFORM'
              'RUBY_RELEASE_DATE'
              'RUBY_VERSION'
              'run'
              'RuntimeError'
              'SAFE'
              'safe_level'
              'safe_unlink'
              'scan'
              'ScriptError'
              'scrolling_list'
              'sec'
              'SecurityError'
              'seek'
              'select'
              'self'
              'send'
              'sendmail'
              'Session'
              'Set'
              'set_backtrace'
              'set_options'
              'set_trace_func'
              'setgid'
              'setpgid'
              'setpgrp'
              'setpriority'
              'setsid'
              'setsockopt'
              'setuid'
              'sg'
              'Shellwords'
              'shift'
              'shutdown'
              'Signal'
              'SignalException'
              'SimpleDelegator'
              'sin'
              'SingleForwardable'
              'Singleton'
              'singleton_method_added'
              'singleton_methods'
              'SingletonClassMethods'
              'size'
              'SizedQueue'
              'sleep'
              'slice'
              'SMTP'
              'Socket'
              'socketpair'
              'SOCKSSocket'
              'sort'
              'SortedSet'
              'source'
              'split'
              'sprintf'
              'sqrt'
              'squeeze'
              'srand'
              'StandardError'
              'start'
              'stat'
              'status'
              'STDERR'
              'STDIN'
              'STDOUT'
              'step'
              'sticky'
              'stop'
              'storbinary'
              'store'
              'storlines'
              'strftime'
              'String'
              'StringIO'
              'StringScanner'
              'StringScanner::Error'
              'strip'
              'Struct'
              'Struct::Tms'
              'sub'
              'submit'
              'succ'
              'super'
              'superclass'
              'swapcase'
              'Symbol'
              'symlink'
              'sync'
              'SyncEnumerator'
              'synchronize'
              'SyntaxError'
              'syscall'
              'syscopy'
              'sysread'
              'system'
              'SystemCallError'
              'SystemExit'
              'SystemStackError'
              'syswrite'
              'taint'
              'tainted'
              'TCPServer'
              'TCPSocket'
              'tell'
              'Telnet'
              'telnetmode'
              'Tempfile'
              'terminate'
              'test'
              'Test::Unit'
              'text_field'
              'textarea'
              'then'
              'Thread'
              'ThreadError'
              'ThreadGroup'
              'ThreadsWait'
              'throw'
              'Time'
              'Timeout'
              'Timeout::Error'
              'times'
              'Tms'
              'to_a'
              'to_ary'
              'to_f'
              'to_i'
              'to_io'
              'to_proc'
              'to_r'
              'to_s'
              'to_str'
              'today'
              'top'
              'TOPLEVEL_BINDING'
              'tr'
              'tr_s'
              'trace_var'
              'trap'
              'true'
              'TrueClass'
              'truncate'
              'try_lock'
              'tty'
              'tv_sec'
              'tv_usec'
              'type'
              'TypeError'
              'UDPSocket'
              'uid'
              'uidl'
              'umask'
              'UnboundMethod'
              'undef'
              'undef_method'
              'unescape'
              'unescapeElement'
              'unescapeHTML'
              'ungetc'
              'uniq'
              'UNIXServer'
              'UNIXSocket'
              'unless'
              'unlink'
              'unlock'
              'unpack'
              'unshift'
              'untaint'
              'until'
              'untrace_var'
              'upcase'
              'update'
              'upto'
              'URI'
              'URI::BadURIError'
              'URI::Error'
              'URI::Escape'
              'URI::FTP'
              'URI::Generic'
              'URI::HTTP'
              'URI::HTTPS'
              'URI::InvalidComponentError'
              'URI::InvalidURIError'
              'URI::LDAP'
              'URI::MailTo'
              'URI::REGEXP'
              'URI::REGEXP::PATTERN'
              'usec'
              'utc'
              'utime'
              'value'
              'values'
              'var'
              'Vector'
              'VERBOSE'
              'wait'
              'waitfor'
              'waitpid'
              'wakeup'
              'wday'
              'WeakRef'
              'weakref_alive'
              'welcome'
              'when'
              'while'
              'Win32API'
              'WIN32OLE'
              'WIN32OLE_EVENT'
              'writable'
              'writable_real'
              'write'
              'YAML'
              'yday'
              'year'
              'yield'
              'zero'
              'ZeroDivisionError'
              'Zlib'
              'Zlib::BufError'
              'Zlib::DataError'
              'Zlib::Deflate'
              'Zlib::Error'
              'Zlib::GzipFile'
              'Zlib::GzipFile::CRCError'
              'Zlib::GzipFile::Error'
              'Zlib::GzipFile::LengthError'
              'Zlib::GzipFile::NoFooter'
              'Zlib::GzipReader'
              'Zlib::GzipWriter'
              'Zlib::Inflate'
              'Zlib::MemError'
              'Zlib::NeedDict'
              'Zlib::StreamEnd'
              'Zlib::StreamError'
              'Zlib::VersionError'
              'Zlib::ZStream'
              'zone')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '_#comments-start'
        StyleName = 'Comment'
        ConditionList = <
          item
            TagList.Strings = (
              '=begin')
            IgnoreCase = True
          end>
        BlockEnd = '_#comments-end'
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        DynHighlight = dhRange
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_#comments-end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '=end')
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin'
        ConditionList = <
          item
            TagList.Strings = (
              'begin'
              'case'
              'do'
              'for'
              'module'
              'until')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end'
        DisplayInTree = False
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin_def'
        ConditionList = <
          item
            TagList.Strings = (
              'def')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end'
        NameFmt = 'func %s-1'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin_class'
        ConditionList = <
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end'
        NameFmt = 'class %s-1'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin_if'
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockEnd = 'end'
        DisplayInTree = False
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '# single commment line'
      'require '#39'sketchup.rb'#39
      '=begin'
      ' multiline comment'
      '=end'
      'ROOT_DIR = #{root.inspect}'
      ''
      '$f = /^a/ =~ "All Gaul is divided into three parts #{name}"'
      '@f = %r{\w+} =~ "All Gaul is divided into three parts"'
      
        'reversed_groups = int_as_string.reverse.split(/(\d{#{breakpoint}' +
        '})/)'
      'reversed_digits = reversed_groups.grep(/\d+/)'
      ''
      'name = "Abraham \'
      'Lincoln"   # a line continued by trailing \'
      'puts "#{name}"'
      ''
      
        '#---------------------------------------------------------------' +
        '--------------'
      'def create_3d_grid'
      
        ' @unit=Sketchup.active_model.options["UnitsOptions"]["LengthUnit' +
        '"]'
      #9'@scale = 1 if @unit == 0 #if tail'
      #9'@scale = 12 if @unit == 1 #same'
      
        '    prompts = ["Length (along X)", "Width (along Y)", "Interval"' +
        ', "Number of levels", "Height (between levels)"]'
      '    values = [10, 10, 1, 2, 10]'
      '    results = inputbox prompts, values, "Grid parameters"'
      '    width, length, interval, nbr, height = results'
      'end    '
      ''
      
        '#---------------------------------------------------------------' +
        '--------------'
      'def func2'
      ' if (nbr > 1)'
      '  h = height if (nbr>2) #if tail'
      '  w = width if (nbr>2) #same'
      '  model.start_operation "Duplicate 3D grid"'
      '  2.upto(nbr) do (group)'
      
        '    transfo = Geom::Transformation.translation(Geom::Vector3d.ne' +
        'w(0, 0, h))'
      '    new_group = group.copy'
      '    new_group.move!(transfo)'
      '    h = h + height'
      '  end'
      '  model.commit_operation'
      ' end'
      'end'
      ''
      'def func'
      ' animals = %w(lions tigers bears)'
      ' animals.each{|kind| print kind}'
      'end')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'If_begin')
    Gramma.Gramma = ';'
    MarkedBlockStyle = 'Marked block'
    Extentions = 'rb rbw'
    LexerName = 'Ruby'
    SkipSpaces = False
    Notes.Strings = (
      'Authors:'
      'Matthias030 (ghisler.ch),'
      'Alextp (uvviewsoft.com)')
    LineComment = '#'
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal19: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clSilver
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Key words'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 8421631
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Params'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 4227327
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Echo'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Shebang'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'QuotMarks'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMoneyGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Int'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Shebang'
        StyleName = 'Shebang'
        Expression = '\#!.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        Expression = '(("|'#39'|'#180'|`)\s*)?(%?\$\w+)\1|%?\$\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable2'
        StyleName = 'Variable'
        Expression = '%?\$(\{|\(|\[)\S+(\}|\)|\])'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IP-Address'
        StyleName = 'QuotMarks'
        Expression = '\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?<![\+\-\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\$])\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'echostd'
        StyleName = 'Echo'
        Expression = '(?<=@?echo)\s+".*?"'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Echo'
        StyleName = 'Key words'
        TokenType = 5
        Expression = '@?echo'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'echo text'
        StyleName = 'Echo'
        BlockName = 'echo start'
        StrictParent = True
        TokenType = 4
        Expression = '[^\#<>\|\n]*[\n]*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        Expression = '[\+\-\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\#]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'QuotationMarks'
        StyleName = 'QuotMarks'
        Expression = '("|'#39'|'#180'|`) (\\\1|.)*? \1'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Int'
        StyleName = 'Int'
        Expression = '\b\d+\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Command'
        StyleName = 'Params'
        TokenType = 2
        Expression = '\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Key words'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'addgroup'
              'adduser'
              'alias'
              'apropos'
              'apt-get'
              'aptitude'
              'aspell'
              'awk'
              'basename'
              'bash'
              'bc'
              'bg'
              'break'
              'builtin'
              'bzip2'
              'cal'
              'case'
              'cat'
              'cd'
              'cfdisk'
              'chgrp'
              'chkconfig'
              'chmod'
              'chown'
              'chroot'
              'cksum'
              'clear'
              'cmp'
              'comm'
              'command'
              'continue'
              'cp'
              'cron'
              'crontab'
              'csplit'
              'cut'
              'date'
              'dc'
              'dd'
              'ddrescue'
              'declare'
              'df'
              'diff'
              'diff3'
              'dig'
              'dir'
              'dircolors'
              'dirname'
              'dirs'
              'dmesg'
              'do'
              'done'
              'du'
              'echo'
              'egrep'
              'eject'
              'elif'
              'else'
              'enable'
              'env'
              'esac'
              'ethtool'
              'eval'
              'exec'
              'exit'
              'expand'
              'expect'
              'export'
              'expr'
              'false'
              'fdformat'
              'fdisk'
              'fg'
              'fgrep'
              'fi'
              'file'
              'find'
              'fmt'
              'fold'
              'for'
              'format'
              'free'
              'fsck'
              'ftp'
              'function'
              'fuser'
              'gawk'
              'getopts'
              'grep'
              'groups'
              'gzip'
              'halt'
              'hash'
              'head'
              'help'
              'history'
              'hostname'
              'id'
              'if'
              'ifconfig'
              'ifdown'
              'ifup'
              'import'
              'in'
              'init'
              'initlog'
              'insmod'
              'install'
              'jobs'
              'join'
              'kill'
              'killall'
              'less'
              'let'
              'linuxconf'
              'ln'
              'local'
              'locate'
              'logname'
              'logout'
              'look'
              'lpc'
              'lpr'
              'lprint'
              'lprintd'
              'lprintq'
              'lprm'
              'ls'
              'lsmod'
              'lsof'
              'make'
              'man'
              'md'
              'mkdir'
              'mkfifo'
              'mkisofs'
              'mknod'
              'mmv'
              'modprobe'
              'more'
              'mount'
              'mtools'
              'mtr'
              'mv'
              'netstat'
              'nice'
              'nl'
              'nohup'
              'notify-send'
              'nslookup'
              'op'
              'open'
              'passwd'
              'paste'
              'pathchk'
              'pidof'
              'ping'
              'pkill'
              'popd'
              'pr'
              'printcap'
              'printenv'
              'printf'
              'ps'
              'pushd'
              'pwd'
              'quota'
              'quotacheck'
              'quotactl'
              'ram'
              'rcp'
              'rd'
              'read'
              'readarray'
              'readonly'
              'reboot'
              'remsync'
              'rename'
              'renice'
              'return'
              'rev'
              'rm'
              'rmdir'
              'rmmod'
              'route'
              'rsync'
              'scp'
              'screen'
              'sdiff'
              'sed'
              'select'
              'seq'
              'set'
              'sftp'
              'shift'
              'shopt'
              'shutdown'
              'sleep'
              'slocate'
              'sort'
              'source'
              'split'
              'ssh'
              'strace'
              'su'
              'sudo'
              'sum'
              'suspend'
              'symlink'
              'sync'
              'tail'
              'tar'
              'tee'
              'test'
              'then'
              'time'
              'times'
              'top'
              'touch'
              'tr'
              'traceroute'
              'trap'
              'tree'
              'true'
              'tsort'
              'tty'
              'type'
              'ulimit'
              'umask'
              'umount'
              'unalias'
              'uname'
              'unexpand'
              'uniq'
              'units'
              'unset'
              'unshar'
              'until'
              'useradd'
              'usermod'
              'users'
              'usleep'
              'uudecode'
              'uuencode'
              'vdir'
              'vi'
              'vmstat'
              'watch'
              'wc'
              'Wget'
              'whereis'
              'which'
              'while'
              'who'
              'whoami'
              'write'
              'xargs'
              'xdg-open'
              'yes'
              'zcat'
              'zless')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'echo start'
        StyleName = 'Echo'
        ConditionList = <
          item
            TagList.Strings = (
              'echo')
            TokenTypes = 32
            IgnoreCase = True
          end>
        BlockEnd = 'echo end'
        NotCollapsed = True
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'echo end'
        BlockName = 'echo start'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 16
          end>
        RefToCondEnd = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      
        '#  Assume lines shorter than $MINLEN characters ending in a peri' +
        'od'
      '#+ terminate a paragraph. See exercises at end of script.'
      ''
      'while read line  # For as many lines as the input file has...'
      'do'
      '  echo "$line"   # Output the line itself.'
      '  test "test\"test" '
      '  len=${#line}'
      '  if [[ "$len" -lt "$MINLEN" && "$line" =~ \[*\.\] ]]'
      '    then echo    #  Add a blank line immediately'
      '  fi             #+ after short line terminated by a period.'
      'done'
      ''
      'exit')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Label'
      'echo'
      'echo cmd')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'sh csh'
    LexerName = 'Bash Shellscript'
    SkipSpaces = False
    Notes.Strings = (
      'Author: Matthias Eberhardt (SynWrite admin)')
    RestartFromLineStart = True
    LineComment = '#'
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal69: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comm'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Chars'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id Keyword'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Num'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Num Time'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Str'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id Func'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comm'
        StyleName = 'Comm'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comm2'
        StyleName = 'Comm'
        TokenType = 1
        Expression = '(?s)/\*.*?\*/'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Chars'
        StyleName = 'Chars'
        TokenType = 3
        Expression = '[\(\)\.,;:\[\]\{\}=<>@\|\~\?\-\+\*/\^!&]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-z][\w\d\$]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IdFunc'
        StyleName = 'Id Func'
        TokenType = 2
        Expression = '\$[\w\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preproc'
        StyleName = 'Preprocessor'
        TokenType = 7
        Expression = '`\w+.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'NumTime'
        StyleName = 'Num Time'
        TokenType = 5
        Expression = '\#\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Num'
        StyleName = 'Num'
        TokenType = 5
        Expression = '\d* ('#39'[bodh])? [\dA-F_XZ]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Str'
        StyleName = 'Str'
        TokenType = 4
        Expression = '" (\\"|.)*? "'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Num'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
          'hout exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Words'
        StyleName = 'Id Keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'always'
              'and'
              'assign'
              'automatic'
              'begin'
              'buf'
              'bufif0'
              'bufif1'
              'case'
              'casex'
              'casez'
              'cell'
              'cmos'
              'config'
              'deassign'
              'default'
              'defparam'
              'disable'
              'edge'
              'else'
              'end'
              'endcase'
              'endconfig'
              'endfunction'
              'endgenerate'
              'endmodule'
              'endprimitive'
              'endspecify'
              'endtable'
              'endtask'
              'event'
              'for'
              'force'
              'forever'
              'fork'
              'function'
              'generate'
              'genvar'
              'highz0'
              'highz1'
              'if'
              'ifnone'
              'incdir'
              'include'
              'initial'
              'inout'
              'input'
              'instance'
              'integer'
              'join'
              'large'
              'liblist'
              'library'
              'localparam'
              'macromodule'
              'medium'
              'module'
              'nand'
              'negedge'
              'nmos'
              'nor'
              'noshowcancelled'
              'not'
              'notif0'
              'notif1'
              'or'
              'output'
              'parameter'
              'pmos'
              'posedge'
              'primitive'
              'pull0'
              'pull1'
              'pulldown'
              'pullup'
              'pulsestyle_ondetect'
              'pulsestyle_onevent'
              'rcmos'
              'real'
              'realtime'
              'reg'
              'release'
              'repeat'
              'rnmos'
              'rpmos'
              'rtran'
              'rtranif0'
              'rtranif1'
              'scalared'
              'showcancelled'
              'signed'
              'small'
              'specify'
              'specparam'
              'strong0'
              'strong1'
              'supply0'
              'supply1'
              'table'
              'task'
              'time'
              'tran'
              'tranif0'
              'tranif1'
              'tri'
              'tri0'
              'tri1'
              'triand'
              'trior'
              'trireg'
              'unsigned'
              'use'
              'vectored'
              'wait'
              'wand'
              'weak0'
              'weak1'
              'while'
              'wire'
              'wor'
              'xnor'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'func_end'
        NameFmt = 'function %s-6'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endfunction')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin'
        ConditionList = <
          item
            TagList.Strings = (
              'begin')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end'
        DisplayInTree = False
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'task'
        ConditionList = <
          item
            TagList.Strings = (
              'task')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'task_end'
        NameFmt = 'task %s-1'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'task_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endtask')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'module Dev (a,b);'
      ''
      '//State register'
      'always @ (posedge i$Clock or posedge i$Reset)'
      #9'if (i$Reset)'
      #9#9'r$State <= p$s0;'
      #9'else'
      #9#9'r$State <= r$NextState;'
      ''
      'assign ROMWord = ROM[State];'
      'assign {InputSelect,PolarityBit,CNState,X,Y,Z} = ROMWord;'
      'initial begin'
      '    ROM[3'#39'b011] <= { 8'#39'hAA + '#39'hF + 16'#39'bZ };'
      #9'ROM[3'#39'b000] <= { 10'#39'b_111_1_xxx_100 };'
      #9'ROM[3'#39'b001] <= { 10'#39'b_000_1_001_000 };'
      'end'
      ''
      'initial $display("\"Test\"...");'
      ''
      '//Func'
      'function [3:0] CountTheOnes;'
      #9'input [7:0] value;'
      #9'integer k, acc;'
      'endfunction'
      ''
      '//Test task'
      'task CycleB;'
      #9'input [3:0] cnt;'
      #9'integer k;'
      #9'begin'
      #9#9'for (k=0; k<cnt; k=k+1) begin'
      #9#9#9'#5 b=1;'
      #9#9#9'#5 b=0;'
      #9#9'end'
      #9'end'
      'endtask'
      ''
      'endmodule')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'v'
    LexerName = 'Verilog HDL'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Test:'
      
        'http://www.rose-hulman.edu/~doering/PLD_Oasis/verilog_examples.h' +
        'tm'
      'Keywords:'
      
        'http://quartushelp.altera.com/current/mergedProjects/hdl/vlog/vl' +
        'og_file_reserved_words.htm')
    LineComment = '//'
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal51: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Date'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 5921370
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Info'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Error'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWhite
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clRed
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Warning'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWhite
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 2386943
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Type'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Success'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWhite
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clGreen
      end>
    TokenRules = <
      item
        DisplayName = 'Success'
        StyleName = 'Success'
        TokenType = 6
        Expression = 
          '^.*((?<!no\s)success|(?<!nicht\s)erfolgreich|(no|without(\sany)?' +
          ')\serror|fehlerfrei|(ohne\s|kein(e)?\s)fehler|(?<!not\s)succeed|' +
          'mit\serfolg).*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Error'
        StyleName = 'Error'
        TokenType = 4
        Expression = 
          '^.*(error|exception|fail|fatal|crash|(?<!be)fehl(geschlagen)?(er' +
          ')?|(ohne|kein|nicht)\serfolg|violat).*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Warning'
        StyleName = 'Warning'
        TokenType = 3
        Expression = 
          '^.*(warn|critical|kritisch|conflict|konflikt|ung('#252'|ue)ltig|inval' +
          'id|(nicht\s|un)zul('#228'|ae)ssig|not\sready|nicht\sbereit|not\sfound' +
          '|nicht\sgefunden|no\ssuccess|not\ssucceed|veraltet|out\sof\sdate' +
          ').*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Date'
        StyleName = 'Date'
        Expression = 
          '\b(\d{1,4}(-)?(\.)?(\/)?\s*(Jan\w*|Feb\w*|Mar\w*|M'#228'r\w*|Apr\w*|M' +
          'ai\w*|May\w*|Jun\w*|Jul\w*|Aug\w*|Sep\w*|Okt\w*|Oct\w*|Nov\w*|De' +
          'z\w*|Dec\w*)(-)?(\.)?(\/)?\s*\d{1,4})\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Type'
        StyleName = 'Type'
        TokenType = 5
        Expression = '\(.*?\)|\[.*?\]|\{.*?\}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Info'
        TokenType = 2
        Expression = '[a-z]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Numbers'
        StyleName = 'Date'
        Expression = '\b((\d+[-\/\.\:\\])+\d+)\b'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Info'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abbruch'
              'abgebrochen'
              'abgeschlossen'
              'activated'
              'activating'
              'active'
              'add'
              'added'
              'adding'
              'aktiv'
              'aktiviere'
              'aktiviert'
              'angehalten'
              'beende'
              'beendet'
              'begin'
              'beginning'
              'begins'
              'closed'
              'closing'
              'complete'
              'completed'
              'completing'
              'completion'
              'connected'
              'connecting'
              'deactivated'
              'deactivating'
              'deaktiviere'
              'deaktiviert'
              'debug'
              'debugged'
              'debugging'
              'deinstalliert'
              'delete'
              'deleted'
              'deleting'
              'denied'
              'disabled'
              'disabling'
              'disconnected'
              'disconnecting'
              'done'
              'dump'
              'dumped'
              'dumping'
              'dumps'
              'enabled'
              'enabling'
              'end'
              'ende'
              'ended'
              'ending'
              'ends'
              'entered'
              'entering'
              'entladen'
              'erfolg'
              'exceeded'
              'execute'
              'executed'
              'executing'
              'execution'
              'exiting'
              'exits'
              'falsch'
              'false'
              'fertig'
              'finish'
              'finished'
              'finishing'
              'flushing'
              'geladen'
              'geloescht'
              'geschlossen'
              'gestartet'
              'gestoppt'
              'getrennt'
              'hinzugefuegt'
              'ignored'
              'ignoring'
              'inactive'
              'inaktiv'
              'info'
              'information'
              'installed'
              'installiert'
              'installing'
              'ja'
              'kill'
              'killed'
              'killing'
              'load'
              'loaded'
              'loading'
              'missed'
              'missing'
              'nein'
              'ok'
              'problem'
              'probleme'
              'problems'
              'quitting'
              'ready'
              'register'
              'registered'
              'registering'
              'registriert'
              'remove'
              'removed'
              'removing'
              'replaced'
              'restarted'
              'restarting'
              'shutdown'
              'skip'
              'skipped'
              'skipping'
              'start'
              'started'
              'starting'
              'stop'
              'stopped'
              'stopping'
              'terminate'
              'terminated'
              'terminating'
              'termination'
              'terminiert'
              'trace'
              'traced'
              'tracing'
              'true'
              'ueberschritten'
              'uninstalled'
              'uninstalling'
              'unload'
              'unloaded'
              'unloading'
              'unregister'
              'unregistered'
              'unregistering'
              'updated'
              'updating'
              'verbunden'
              'wahr'
              'yes')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '2010-08-20 11:21:30, Info DISM   PID=4576 Scratch directory set'
      '2010-08-20 11:21:30, Info Successfully loaded the ImageSession'
      '2010-08-20 11:21:30, Info Found and Initialized the DISM Logger.'
      
        '2010-08-20 11:21:30, Info PID=4576 Failed to get and initialize ' +
        'the PE Provider.'
      '2010-08-20 11:21:30, Warning Low Disk Space detected'
      
        '2010-08-20 11:21:30, Info [PID=4576] Provider has previously bee' +
        'n initialized.'
      '2010-08-20 11:21:30, Info Getting Provider DISMLogger'
      
        '2010-08-20 11:21:30, Info Provider has previously been initializ' +
        'ed.'
      'All finished without errors')
    TokenTypeNames.Strings = (
      'Date'
      'Time'
      'Info'
      'Warning'
      'Error'
      'Type'
      'Success')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'log'
    LexerName = 'Logfiles'
    SkipSpaces = False
    Notes.Strings = (
      'Logfiles (lexer for english and german logfiles.)'
      'created 07/2011 (matthias030)'
      ''
      'any improvements are welcome. feel free to post changes'
      'at synwrite forum to support other synwrite users:'
      'http://www.ghisler.ch/board/viewtopic.php?t=25586   ')
    RestartFromLineStart = True
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal59: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -17
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 11337727
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 11075756
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 13408665
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 3381504
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Sub background'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15663082
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Macros'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 16724991
        Font.Height = -17
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Sent Keys'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 35071
        Font.Height = -17
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Functions'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 9437184
        Font.Height = -17
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsItalic]
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '".*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = 
          '#block from /* (at line start) to */ (at line start)'#13#10'(?s)^/\*.*' +
          '?(^\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '#all chars after ; to end of line'#13#10';.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Sub start'
        StyleName = 'Functions'
        TokenType = 2
        Expression = '#first charecter can'#39't be digit'#13#10'[a-z_]\w*:{1,2}?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '#first charecter can'#39't be digit'#13#10'[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '#Hex is started with 0x sign'#13#10'0x[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
          'hout exp. dot is required'#13#10'\d+ \. \d+'#13#10' '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '#any sequence of digits'#13#10'\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/,\.;:\(\)=<>\+\-&%\*\{\}\$\^\~]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Macros'
        StyleName = 'Macros'
        Expression = '#first charecter can'#39't be digit'#13#10'\#[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'AutoTrim'
              'between'
              'BlockInput'
              'Break'
              'Click'
              'ClipWait'
              'contains'
              'Continue'
              'Control'
              'ControlClick'
              'ControlFocus'
              'ControlGet'
              'ControlGetFocus'
              'ControlGetPos'
              'ControlGetText'
              'ControlMove'
              'ControlSend'
              'ControlSendRaw'
              'ControlSetText'
              'CoordMode'
              'Critical'
              'DetectHiddenText'
              'DetectHiddenWindows'
              'Drive'
              'DriveGet'
              'DriveSpaceFree'
              'Edit'
              'Else'
              'EnvAdd'
              'EnvDiv'
              'EnvGet'
              'EnvMult'
              'EnvSet'
              'EnvSub'
              'EnvUpdate'
              'Exit'
              'ExitApp'
              'FileAppend'
              'FileCopy'
              'FileCopyDir'
              'FileCreateDir'
              'FileCreateShortcut'
              'FileDelete'
              'FileGetAttrib'
              'FileGetShortcut'
              'FileGetSize'
              'FileGetTime'
              'FileGetVersion'
              'FileInstall'
              'FileMove'
              'FileMoveDir'
              'FilePattern'
              'FileRead'
              'FileReadLine'
              'FileRecycle'
              'FileRecycleEmpty'
              'FileRemoveDir'
              'FileSelectFile'
              'FileSelectFolder'
              'FileSetAttrib'
              'FileSetTime'
              'FormatTime'
              'GetKeyState'
              'Gosub'
              'Goto'
              'GroupActivate'
              'GroupAdd'
              'GroupClose'
              'GroupDeactivate'
              'Gui'
              'GuiControl'
              'GuiControlGet'
              'Hotkey'
              'If'
              'IfEqual'
              'IfExist'
              'IfGreater'
              'IfGreaterOrEqual'
              'IfInString'
              'IfLess'
              'IfLessOrEqual'
              'IfMsgBox'
              'IfNotEqual'
              'IfNotExist'
              'IfNotInString'
              'IfWinActive'
              'IfWinExist'
              'IfWinNotActive'
              'IfWinNotExist'
              'ImageSearch'
              'in'
              'IniDelete'
              'IniRead'
              'IniWrite'
              'Input'
              'InputBox'
              'KeyHistory'
              'KeyWait'
              'ListHotkeys'
              'ListLines'
              'ListVars'
              'Loop'
              'Menu'
              'MouseClick'
              'MouseClickDrag'
              'MouseGetPos'
              'MouseMove'
              'MsgBox'
              'OnExit'
              'OutputDebug'
              'Parse'
              'Pause'
              'PixelGetColor'
              'PixelSearch'
              'PostMessage'
              'Process'
              'Progress'
              'Random'
              'Read'
              'Reg'
              'RegDelete'
              'RegRead'
              'RegWrite'
              'Reload'
              'Repeat'
              'Return'
              'Run'
              'RunAs'
              'RunWait'
              'Send'
              'SendEvent'
              'SendInput'
              'SendMessage'
              'SendMode'
              'SendPlay'
              'SendRaw'
              'SetBatchLines'
              'SetCapslockState'
              'SetControlDelay'
              'SetDefaultMouseSpeed'
              'SetEnv'
              'SetFormat'
              'SetKeyDelay'
              'SetMouseDelay'
              'SetNumlockState'
              'SetScrollLockState'
              'SetStoreCapslockMode'
              'SetTimer'
              'SetTitleMatchMode'
              'SetWinDelay'
              'SetWorkingDir'
              'Shutdown'
              'Sleep'
              'Sort'
              'SoundBeep'
              'SoundGet'
              'SoundGetWaveVolume'
              'SoundPlay'
              'SoundSet'
              'SoundSetWaveVolume'
              'SplashImage'
              'SplashTextOff'
              'SplashTextOn'
              'SplitPath'
              'StatusBarGetText'
              'StatusBarWait'
              'StringCaseSense'
              'StringGetPos'
              'StringLeft'
              'StringLen'
              'StringLower'
              'StringMid'
              'StringReplace'
              'StringRight'
              'StringSplit'
              'StringTrimLeft'
              'StringTrimRight'
              'StringUpper'
              'Suspend'
              'SysGet'
              'Thread'
              'ToolTip'
              'Transform'
              'TrayTip'
              'URLDownloadToFile'
              'While'
              'WinActivate'
              'WinActivateBottom'
              'WinClose'
              'WinGet'
              'WinGetActiveStats'
              'WinGetActiveTitle'
              'WinGetClass'
              'WinGetPos'
              'WinGetText'
              'WinGetTitle'
              'WinHide'
              'WinKill'
              'WinMaximize'
              'WinMenuSelectItem'
              'WinMinimize'
              'WinMinimizeAll'
              'WinMinimizeAllUndo'
              'WinMove'
              'WinRestore'
              'WinSet'
              'WinSetTitle'
              'WinShow'
              'WinWait'
              'WinWaitActive'
              'WinWaitClose'
              'WinWaitNotActive')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'BeginBlock'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = 'EndBlock'
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'EndBlock'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'SystemVariable'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'A_AhkPath'
              'A_AhkVersion'
              'A_AppData'
              'A_AppDataCommon'
              'A_AutoTrim'
              'A_BatchLines'
              'A_CaretX'
              'A_CaretY'
              'A_ComputerName'
              'A_ControlDelay'
              'A_Cursor'
              'A_DD'
              'A_DDD'
              'A_DDDD'
              'A_DefaultMouseSpeed'
              'A_Desktop'
              'A_DesktopCommon'
              'A_DetectHiddenText'
              'A_DetectHiddenWindows'
              'A_EndChar'
              'A_EventInfo'
              'A_ExitReason'
              'A_FormatFloat'
              'A_FormatInteger'
              'A_Gui'
              'A_GuiControl'
              'A_GuiControlEvent'
              'A_GuiEvent'
              'A_GuiHeight'
              'A_GuiWidth'
              'A_GuiX'
              'A_GuiY'
              'A_Hour'
              'A_IconFile'
              'A_IconHidden'
              'A_IconNumber'
              'A_IconTip'
              'A_Index'
              'A_IPAddress1'
              'A_IPAddress2'
              'A_IPAddress3'
              'A_IPAddress4'
              'A_ISAdmin'
              'A_IsCompiled'
              'A_IsCritical'
              'A_IsPaused'
              'A_IsSuspended'
              'A_KeyDelay'
              'A_Language'
              'A_LastError'
              'A_LineFile'
              'A_LineNumber'
              'A_LoopField'
              'A_LoopFileAttrib'
              'A_LoopFileDir'
              'A_LoopFileExt'
              'A_LoopFileFullPath'
              'A_LoopFileLongPath'
              'A_LoopFileName'
              'A_LoopFileShortName'
              'A_LoopFileShortPath'
              'A_LoopFileSize'
              'A_LoopFileSizeKB'
              'A_LoopFileSizeMB'
              'A_LoopFileTimeAccessed'
              'A_LoopFileTimeCreated'
              'A_LoopFileTimeModified'
              'A_LoopReadLine'
              'A_LoopRegKey'
              'A_LoopRegName'
              'A_LoopRegSubkey'
              'A_LoopRegTimeModified'
              'A_LoopRegType'
              'A_MDAY'
              'A_Min'
              'A_MM'
              'A_MMM'
              'A_MMMM'
              'A_Mon'
              'A_MouseDelay'
              'A_MSec'
              'A_MyDocuments'
              'A_Now'
              'A_NowUTC'
              'A_NumBatchLines'
              'A_OSType'
              'A_OSVersion'
              'A_PriorHotkey'
              'A_ProgramFiles'
              'A_Programs'
              'A_ProgramsCommon'
              'A_ScreenHeight'
              'A_ScreenWidth'
              'A_ScriptDir'
              'A_ScriptFullPath'
              'A_ScriptName'
              'A_Sec'
              'A_Space'
              'A_StartMenu'
              'A_StartMenuCommon'
              'A_Startup'
              'A_StartupCommon'
              'A_StringCaseSense'
              'A_Tab'
              'A_Temp'
              'A_ThisFunc'
              'A_ThisHotkey'
              'A_ThisLabel'
              'A_ThisMenu'
              'A_ThisMenuItem'
              'A_ThisMenuItemPos'
              'A_TickCount'
              'A_TimeIdle'
              'A_TimeIdlePhysical'
              'A_TimeSincePriorHotkey'
              'A_TimeSinceThisHotkey'
              'A_TitleMatchMode'
              'A_TitleMatchModeSpeed'
              'A_UserName'
              'A_WDay'
              'A_WinDelay'
              'A_WinDir'
              'A_WorkingDir'
              'A_YDay'
              'A_YEAR'
              'A_YWeek'
              'A_YYYY'
              'Clipboard'
              'ClipboardAll'
              'ComSpec'
              'ErrorLevel'
              'False'
              'ProgramFiles'
              'True')
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'SentKeys'
        StyleName = 'Sent Keys'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '!'
              '#'
              '$'
              '^'
              '`'
              '~'
              '+'
              'Alt'
              'AltDown'
              'AltUp'
              'AppsKey'
              'BackSpace'
              'Browser_Back'
              'Browser_Favorites'
              'Browser_Forward'
              'Browser_Home'
              'Browser_Refresh'
              'Browser_Search'
              'Browser_Stop'
              'BS'
              'CapsLock'
              'Control'
              'Ctrl'
              'CtrlBreak'
              'CtrlDown'
              'CtrlUp'
              'Del'
              'Delete'
              'Down'
              'End'
              'Enter'
              'Esc'
              'Escape'
              'F1'
              'F10'
              'F11'
              'F12'
              'F13'
              'F14'
              'F15'
              'F16'
              'F17'
              'F18'
              'F19'
              'F2'
              'F20'
              'F21'
              'F22'
              'F23'
              'F24'
              'F3'
              'F4'
              'F5'
              'F6'
              'F7'
              'F8'
              'F9'
              'Home'
              'Ins'
              'Insert'
              'Joy1'
              'Joy10'
              'Joy11'
              'Joy12'
              'Joy13'
              'Joy14'
              'Joy15'
              'Joy16'
              'Joy17'
              'Joy18'
              'Joy19'
              'Joy2'
              'Joy20'
              'Joy21'
              'Joy22'
              'Joy23'
              'Joy24'
              'Joy25'
              'Joy26'
              'Joy27'
              'Joy28'
              'Joy29'
              'Joy3'
              'Joy30'
              'Joy31'
              'Joy32'
              'Joy4'
              'Joy5'
              'Joy6'
              'Joy7'
              'Joy8'
              'Joy9'
              'JoyAxes'
              'JoyButtons'
              'JoyInfo'
              'JoyName'
              'JoyPOV'
              'JoyR'
              'JoyU'
              'JoyV'
              'JoyX'
              'JoyY'
              'JoyZ'
              'LAlt'
              'Launch_App1'
              'Launch_App2'
              'Launch_Mail'
              'Launch_Media'
              'LButton'
              'LControl'
              'LCtrl'
              'Left'
              'LShift'
              'LWin'
              'LWinDown'
              'LWinUp'
              'MButton'
              'Media_Next'
              'Media_Play_Pause'
              'Media_Prev'
              'Media_Stop'
              'NumLock'
              'Numpad0'
              'Numpad1'
              'Numpad2'
              'Numpad3'
              'Numpad4'
              'Numpad5'
              'Numpad6'
              'Numpad7'
              'Numpad8'
              'Numpad9'
              'NumpadAdd'
              'NumpadClear'
              'NumpadDel'
              'NumpadDiv'
              'NumpadDot'
              'NumpadDown'
              'NumpadEnd'
              'NumpadEnter'
              'NumpadHome'
              'NumpadIns'
              'NumpadLeft'
              'NumpadMult'
              'NumpadPgdn'
              'NumpadPgup'
              'NumpadRight'
              'NumpadSub'
              'NumpadUp'
              'Pause'
              'PGDN'
              'PGUP'
              'PrintScreen'
              'RAlt'
              'RButton'
              'RControl'
              'RCtrl'
              'Right'
              'RShift'
              'RWin'
              'RWinDown'
              'RWinUp'
              'ScrollLock'
              'Shift'
              'ShiftDown'
              'ShiftUp'
              'Space'
              'Tab'
              'Up'
              'Volume_Down'
              'Volume_Mute'
              'Volume_Up'
              'WheelDown'
              'WheelLeft'
              'WheelRight'
              'WheelUp'
              'XButton1'
              'XButton2')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Macros'
        StyleName = 'Macros'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '#AllowSameLineComments'
              '#ClipboardTimeout'
              '#CommentFlag'
              '#ErrorStdOut'
              '#EscapeChar'
              '#HotkeyInterval'
              '#HotkeyModifierTimeout'
              '#Hotstring'
              '#IfWinActive'
              '#IfWinExist'
              '#IfWinNotActive'
              '#IfWinNotExist'
              '#Include'
              '#IncludeAgain'
              '#InstallKeybdHook'
              '#InstallMouseHook'
              '#KeyHistory'
              '#LTrim'
              '#MaxHotkeysPerInterval'
              '#MaxMem'
              '#MaxThreads'
              '#MaxThreadsBuffer'
              '#MaxThreadsPerHotkey'
              '#NoEnv'
              '#NoTrayIcon'
              '#Persistent'
              '#SingleInstance'
              '#UseHook'
              '#WinActivateForce')
            TokenTypes = 1
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/*'
      'Comment'
      '*/'
      'Loop'
      '{'
      'WinWait, IDE Debug log...'
      'WinMinimize'
      'WinWaitActive, IDE Debug log...'
      '}'
      ' ')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'ahk'
    LexerName = 'AutoHotKey'
    SkipSpaces = False
    Notes.Strings = (
      'By: RedTiF at ghisler.ch'
      'Fixes: Alex, uvviewsoft.com')
    LineComment = ';'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal85: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Coments'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Digits'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Dim'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Operators'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 213
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Selection'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMenuHighlight
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Singl Simbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved Words'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Style 1'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatType = ftBackGround
        BorderTypeLeft = blDot
        BorderTypeTop = blDot
        BorderTypeRight = blDot
        BorderTypeBottom = blDot
        MultiLineBorder = True
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Coments'
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Coments'
        Expression = '\#.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Coments'
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment ;'
        StyleName = 'Coments'
        Expression = ';.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Default'
        StyleName = 'Default'
        TokenType = 1
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Digits'
        TokenType = 2
        Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Digits'
        TokenType = 2
        Expression = '0x[\da-f]+ | \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Operators'
        StyleName = 'Operators'
        TokenType = 5
        Expression = '[!/\+\-\*:=<>&/\|\^~]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Singl Simbol'
        TokenType = 7
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 8
        Expression = '(?s)(["'#39'])(\1\1|.)*?(\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 9
        Expression = '\$\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Reserved Words'
        StyleName = 'Reserved Words'
        TokenType = 10
        Expression = '*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Reserved Words'
        StyleName = 'Reserved Words'
        AlwaysEnabled = True
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '#comments-end'
              '#comments-start'
              '#include'
              '#include-once'
              '#NoTrayIcon'
              '#RequireAdmin'
              'ByRef'
              'Case'
              'ContinueCase'
              'ContinueLoop'
              'Default'
              'Do'
              'Else'
              'ElseIf'
              'EndFunc'
              'EndIf'
              'EndSelect'
              'EndSwitch'
              'Endwith'
              'Enum'
              'Exit'
              'ExitLoop'
              'False'
              'For'
              'Func'
              'If'
              'In'
              'Next'
              'Return'
              'Select'
              'Switch'
              'Then'
              'True'
              'Until'
              'WEnd'
              'While'
              'With')
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        TreeItemImage = 1
        TreeGroupImage = 1
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Dim'
        StyleName = 'Dim'
        AlwaysEnabled = True
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'Const'
              'dim'
              'Global'
              'Local'
              'redim')
            IgnoreCase = True
          end>
        DynHighlight = dhRange
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_Func'
        ConditionList = <
          item
            TagList.Strings = (
              'Func')
            TokenTypes = 2
            IgnoreCase = True
          end>
        BlockEnd = '_EndFunc'
        NameFmt = '%s0 %s-1'
        HighlightPos = cpAny
        DynSelectMin = True
        CollapseFmt = '%s0 %s-1'
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = '_EndFunc'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'EndFunc')
            TokenTypes = 2
            IgnoreCase = True
          end>
        BlockEnd = '_Func'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_If'
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            IgnoreCase = True
          end>
        BlockEnd = '_EndIf'
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_EndIf'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'EndIf')
            IgnoreCase = True
          end>
        BlockEnd = '_If'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_Select'
        ConditionList = <
          item
            TagList.Strings = (
              'Select')
            IgnoreCase = True
          end>
        BlockEnd = '_EndSelect'
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_EndSelect'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'EndSelect')
            IgnoreCase = True
          end>
        BlockEnd = '_Select'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_Switch'
        ConditionList = <
          item
            TagList.Strings = (
              'Switch')
            IgnoreCase = True
          end>
        BlockEnd = '_EndSwitch'
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_EndSwitch'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'EndSwitch')
            IgnoreCase = True
          end>
        BlockEnd = '_Switch'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_For'
        ConditionList = <
          item
            TagList.Strings = (
              'For')
            IgnoreCase = True
          end>
        BlockEnd = '_Next'
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_Next'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'Next')
            IgnoreCase = True
          end>
        BlockEnd = '_For'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_While'
        ConditionList = <
          item
            TagList.Strings = (
              'While')
            IgnoreCase = True
          end>
        BlockEnd = '_WEnd'
        EndOfTextClose = True
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        DynHighlight = dhRange
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_WEnd'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'WEnd')
            IgnoreCase = True
          end>
        BlockEnd = '_While'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_Do'
        ConditionList = <
          item
            TagList.Strings = (
              'Do')
            IgnoreCase = True
          end>
        BlockEnd = '_Until'
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_Until'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'Until')
            IgnoreCase = True
          end>
        BlockEnd = '_Do'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_With'
        ConditionList = <
          item
            TagList.Strings = (
              'With')
            IgnoreCase = True
          end>
        BlockEnd = '_Endwith'
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_Endwith'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'Endwith')
            IgnoreCase = True
          end>
        BlockEnd = '_With'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '_#comments-start'
        StyleName = 'Coments'
        ConditionList = <
          item
            TagList.Strings = (
              '#comments-start')
            IgnoreCase = True
          end>
        BlockEnd = '_#comments-end'
        DisplayInTree = False
        NameFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        DynHighlight = dhRange
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1 %s-2 %s-3 %s-4'
        IgnoreAsParent = False
      end
      item
        DisplayName = '_#comments-end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '#comments-end')
            IgnoreCase = True
          end>
        BlockEnd = '_#comments-start'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Style 1'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            IgnoreCase = True
          end>
        BlockEnd = ')'
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpRange
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            IgnoreCase = True
          end>
        BlockEnd = '('
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        StyleName = 'Style 1'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
          end>
        BlockEnd = ']'
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpRange
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
          end>
        BlockEnd = '['
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '  dim $t[3][2] = [["test;1;2;3", 123], _'
      '    ['#39';'#39', Asc('#39';'#39')], _ ; This comment'
      '    ["", 0]]           ; comment'
      ''
      '#comments-start'
      
        '  If SetIcon ($btnIcon, $sModulesPath & "\" & GUICtrlRead ($cmbS' +
        'FXModule) & ",0") Then _'
      #9'$bIsDefaultIcon = True'
      '#comments-end'
      ''
      'Func Palitra_()'
      '  $zzz = 0'
      '  While $zzz <= 2'
      '    $xxx = 0'
      '    While $xxx <= 5'
      '      $yyy = 0'
      '      While $yyy <= 5'
      
        '        $PalitraColor = "0x"&$ColorArray[$zzz]&$ColorArray[$xxx]' +
        '&$ColorArray[$yyy]'
      
        '        GUICtrlCreateLabel( "", ($zzz)*$PalitraSize*6+$xxx*$Pali' +
        'traSize+264, $yyy*$PalitraSize+368, $PalitraSize ,$PalitraSize)'
      '        GUICtrlSetBkColor ( -1, $PalitraColor)'
      '      WEnd'
      '    $xxx = $xxx + 1'
      '    WEnd'
      '  $zzz = $zzz +1'
      '  Wend'
      'EndFunc')
    TokenTypeNames.Strings = (
      'Coments'
      'Default'
      'Digits'
      'Dim'
      'Operators'
      'Selection'
      'Singl Simbol'
      'String'
      'Variable'
      'Reserved Words')
    MarkedBlockStyle = 'Selection'
    Extentions = 'au3'
    LexerName = 'AutoIt'
    Notes.Strings = (
      'AutoIt'
      'by 480499497 from forum.wincmd.ru'
      'Fixed by Alextp / same forum.')
    LineComment = ';'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal88: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Assembler'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15724510
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
        BorderColorLeft = clRed
        BorderColorTop = clRed
        BorderColorRight = clRed
        BorderColorBottom = clRed
        MultiLineBorder = True
      end
      item
        DisplayName = 'Interface section'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clHighlight
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15269887
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Implemenation Section'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16121842
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clLime
        FormatType = ftBackGround
        FormatFlags = [ffBold, ffItalic, ffUnderline, ffStrikeOut, ffReadOnly, ffHidden]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Current function'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16776187
        FormatType = ftBackGround
        MultiLineBorder = True
      end
      item
        DisplayName = 'Current Line'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16772341
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Search Match'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindow
        Font.Height = -16
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clBlack
      end
      item
        DisplayName = 'Group (tree)'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Times New Roman'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Intern. function (tree)'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'class (tree)'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Invalid symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsStrikeOut]
        BgColor = clYellow
      end>
    TokenRules = <
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
          'hout exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor 1'
        StyleName = 'Preprocessor'
        AlwaysEnabled = True
        TokenType = 9
        Expression = '\{\$.*?\}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor 2'
        StyleName = 'Preprocessor'
        AlwaysEnabled = True
        TokenType = 9
        Expression = '\(\*\$.*?\*\)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '(?s)\(\*.*?(\*\)|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '(?s)\{.*?(\}|\Z)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        AlwaysEnabled = True
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\$[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\^@]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '\#(\d+|\$[\da-f]+)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Invalid symbol'
        StyleName = 'Invalid symbol'
        Expression = '.'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'and'
              'array'
              'as'
              'asm'
              'begin'
              'case'
              'class'
              'const'
              'constructor'
              'contains'
              'destructor'
              'dispinterface'
              'div'
              'do'
              'downto'
              'dynamic'
              'else'
              'end'
              'except'
              'exports'
              'file'
              'finalization'
              'finally'
              'for'
              'function'
              'goto'
              'if'
              'implementation'
              'in'
              'index'
              'inherited'
              'initialization'
              'inline'
              'interface'
              'is'
              'label'
              'library'
              'mod'
              'nil'
              'not'
              'object'
              'of'
              'or'
              'out'
              'overload'
              'override'
              'package'
              'packed'
              'pascal'
              'private'
              'procedure'
              'program'
              'property'
              'protected'
              'public'
              'published'
              'raise'
              'read'
              'record'
              'register'
              'repeat'
              'requires'
              'resourcestring'
              'safecall'
              'set'
              'shl'
              'shr'
              'stdcall'
              'strict'
              'string'
              'then'
              'threadvar'
              'to'
              'try'
              'type'
              'unit'
              'until'
              'uses'
              'var'
              'virtual'
              'while'
              'with'
              'write'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Forward'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'forward')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        TokenType = 10
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        StrictParent = True
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'try'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'try')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'finally'#13#10#13#10'end;'
      end
      item
        DisplayName = 'begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'begin'
              'case')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '%s0 ...'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'end;'
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'asm'
        StyleName = 'Assembler'
        ConditionList = <
          item
            TagList.Strings = (
              'asm')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        Highlight = True
        InvertColors = True
        DisplayInTree = False
        DynHighlight = dhRangeNoBound
        HighlightPos = cpAny
        CollapseFmt = 'ASM'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'end;'
      end
      item
        DisplayName = '{$ifdef}'
        ConditionList = <
          item
            TagList.Strings = (
              '\{\$if[n]?def')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        BlockEnd = '{$endif}'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        IgnoreAsParent = True
        AutoCloseMode = acmCloseNearest
        AutoCloseText = '{$ENDIF}'
      end
      item
        DisplayName = '{$endif}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '\{\$endif')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'until'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'until')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'repeat'
        ConditionList = <
          item
            TagList.Strings = (
              'repeat')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'until'
        DisplayInTree = False
        HighlightPos = cpBound
        DrawStaple = True
        CollapseFmt = 'repeat ...'
        IgnoreAsParent = False
        AutoCloseMode = acmCloseNearest
        AutoCloseText = 'until ;'
      end
      item
        DisplayName = 'program'
        ConditionList = <
          item
            TagList.Strings = (
              'library'
              'program'
              'unit')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockEnd = 'Unit end'
        EndOfTextClose = True
        HighlightPos = cpBound
        CollapseFmt = '%s0 %s-1'
        TreeItemImage = 0
        IgnoreAsParent = False
        AutoCloseMode = acmCloseOpened
        AutoCloseText = 'end.'
      end
      item
        DisplayName = 'class declaration'
        BlockName = 'class declaration'
        NotParent = True
        StatesAdd = 8
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        GroupFmt = 'classes'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '%s-2 %s0'
        GrammaRuleName = 'ClassDecl'
        TreeItemStyle = 'class (tree)'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 1
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Empty class'
        ConditionList = <>
        NotCollapsed = True
        NameFmt = '%s-2 %s0'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '%s-2 %s0'
        NoEndRule = True
        GrammaRuleName = 'EmptyClass'
        TreeItemImage = 4
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Interface declaration'
        BlockName = 'Interface declaration'
        NotParent = True
        StatesAdd = 8
        ConditionList = <>
        BlockEnd = 'end of type'
        NameFmt = '%s-2 %s0'
        GroupFmt = 'Interfaces'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '%s-2 %s0'
        GrammaRuleName = 'IntfDecl'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 2
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'record'
        StatesAdd = 8
        ConditionList = <
          item
            TagList.Strings = (
              'record')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'packed')
            CondType = tcSkip
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'end of type'
        NameFmt = 'record %s0'
        GroupFmt = 'Types'
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = 'record %s0'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 3
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Interface section'
        StyleName = 'Interface section'
        BlockName = 'program'
        StrictParent = True
        StatesAdd = 1
        ConditionList = <
          item
            TagList.Strings = (
              'interface')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Interface section end'
        EndOfTextClose = True
        Highlight = True
        DisplayInTree = False
        NameFmt = 'Interface section'
        DynHighlight = dhRange
        HighlightPos = cpAny
        CollapseFmt = 'Interface section'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Interface section end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'implementation')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Implementation section'
        StyleName = 'Implemenation Section'
        StatesAdd = 2
        StatesRemove = 15
        ConditionList = <
          item
            TagList.Strings = (
              'implementation')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'Unit end'
        EndOfTextClose = True
        Highlight = True
        DisplayInTree = False
        DynHighlight = dhRange
        HighlightPos = cpAny
        CollapseFmt = 'Implementation section'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'finalization'
        ConditionList = <
          item
            TagList.Strings = (
              'finalization')
            TokenTypes = 4
            IgnoreCase = True
          end>
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '%s0'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Unit end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 2
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Function separator'
        StyleName = 'Function separator'
        StatesPresent = 2
        StatesAbsent = 24
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Internal function'
        BlockName = 'function of class'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'End of internal'
        HighlightPos = cpBound
        CollapseFmt = '%s1 %s0'
        TreeItemStyle = 'Intern. function (tree)'
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End of internal'
        BlockName = 'Internal function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'forward_func'
        StatesAbsent = 1
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1024
            IgnoreCase = True
          end>
        BlockEnd = 'Single function'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Single function'
        StyleName = 'Current function'
        BlockName = 'Implementation section'
        StrictParent = True
        StatesAdd = 16
        ConditionList = <
          item
            TagList.Strings = (
              '('
              ':'
              ';')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = 'End of function'
        Highlight = True
        NameFmt = '%s2 %s1'
        GroupFmt = 'Functions'
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '%s2 %s1'
        TreeGroupStyle = 'Group (tree)'
        TreeItemImage = 5
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End of function'
        BlockName = 'Single function'
        StrictParent = True
        StatesRemove = 16
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 1032
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'function of class'
        StyleName = 'Current function'
        StatesAdd = 16
        StatesPresent = 2
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockOffset = 2
        BlockEnd = 'End of class function'
        Highlight = True
        NameFmt = '%s-1'
        GroupFmt = 'classes\class %s1'
        DynHighlight = dhRange
        HighlightPos = cpRange
        CollapseFmt = '%s2 %s1%s0%s-1'
        TreeItemImage = 6
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End of class function'
        BlockName = 'function of class'
        StrictParent = True
        StatesRemove = 16
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Internal function 2'
        BlockName = 'Single function'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockOffset = 1
        BlockEnd = 'End of internal 2'
        HighlightPos = cpBound
        CollapseFmt = '%s0 %s-1'
        TreeItemStyle = 'Intern. function (tree)'
        TreeItemImage = 5
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End of internal 2'
        BlockName = 'Internal function 2'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
          end
          item
            TagList.Strings = (
              'end'
              'forward')
            TokenTypes = 1028
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end of type'
        StatesRemove = 8
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Enum'
        BlockName = 'Interface section'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '.'
              ';'
              'type')
            CondType = tcMask
            TokenTypes = 14
          end>
        IdentIndex = 2
        BlockOffset = 2
        BlockEnd = ';'
        NameFmt = 'enum %s2'
        GroupFmt = 'Types'
        HighlightPos = cpBound
        CollapseFmt = 'enum %s2 ...'
        TreeItemImage = 3
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Set'
        ConditionList = <
          item
            TagList.Strings = (
              'set')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = ';'
        NameFmt = 'set %s0'
        GroupFmt = 'Types'
        RefToCondEnd = True
        HighlightPos = cpBound
        TreeItemImage = 3
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'unit'
        BlockName = 'Uses'
        StrictParent = True
        ConditionList = <
          item
            TokenTypes = 4
          end>
        BlockEnd = 'unit end'
        NotCollapsed = True
        NameFmt = '%s0~e1'
        HighlightPos = cpBound
        TreeItemImage = 2
        IgnoreAsParent = False
      end
      item
        DisplayName = 'unit end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ','
              ';')
            TokenTypes = 8
          end>
        BlockOffset = 1
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Uses'
        ConditionList = <
          item
            TagList.Strings = (
              'uses')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = ';'
        HighlightPos = cpBound
        CollapseFmt = 'uses ...'
        TreeItemImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = ';'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'REGION'
        ConditionList = <
          item
            TagList.Strings = (
              '\{\$REGION')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        BlockEnd = 'REGION END'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'REGION END'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '\{\$ENDREGION')
            CondType = tcMask
            TokenTypes = 512
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTagBegin
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Function out of all'
        BlockName = 'program'
        StrictParent = True
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End of Func out of all'
        NameFmt = '%s0 %s-1'
        GroupFmt = 'Functions'
        RefToCondEnd = True
        HighlightPos = cpAny
        TreeItemImage = 5
        TreeGroupImage = 0
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End of Func out of all'
        BlockName = 'Function out of all'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Invalid close bracket'
        StyleName = 'Invalid symbol'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <
      item
        Name = 'be'
        Description = 'begin end'
        Code.Strings = (
          'begin'
          '  <caret>'
          'end;')
        Advanced = True
      end
      item
        Name = 'arrayd'
        Description = 'array declaration (var)'
        Code.Strings = (
          'array[0..|] of ;')
        Advanced = True
      end
      item
        Name = 'arrayc'
        Description = 'array declaration (const)'
        Code.Strings = (
          'array[0..|] of = ();')
        Advanced = True
      end
      item
        Name = 'cases'
        Description = 'case statement'
        Code.Strings = (
          'case | of'
          '  : ;'
          '  : ;'
          'end;')
        Advanced = True
      end
      item
        Name = 'casee'
        Description = 'case statement (with else)'
        Code.Strings = (
          'case | of'
          '  : ;'
          '  : ;'
          'else ;'
          'end;')
        Advanced = True
      end
      item
        Name = 'classf'
        Description = 'class declaration (all parts)'
        Code.Strings = (
          'T| = class(T)'
          'private'
          ''
          'protected'
          ''
          'public'
          ''
          'published'
          ''
          'end;')
        Advanced = True
      end
      item
        Name = 'classd'
        Description = 'class declaration (no parts)'
        Code.Strings = (
          'T| = class(T)'
          ''
          'end;')
        Advanced = True
      end
      item
        Name = 'classc'
        Description = 'class declaration (with Create/Destroy overrides)'
        Code.Strings = (
          'T| = class(T)'
          'private'
          ''
          'protected'
          ''
          'public'
          '  constructor Create; override;'
          '  destructor Destroy; override;'
          'published'
          ''
          'end;')
        Advanced = True
      end
      item
        Name = 'fors'
        Description = 'for (no begin/end)'
        Code.Strings = (
          'for | :=  to  do')
        Advanced = True
      end
      item
        Name = 'forb'
        Description = 'for statement'
        Code.Strings = (
          'for | :=  to  do'
          'begin'
          ''
          'end;')
        Advanced = True
      end
      item
        Name = 'function'
        Description = 'function declaration'
        Code.Strings = (
          'function |(): ;'
          'begin'
          ''
          'end;')
        Advanced = True
      end
      item
        Name = 'ifs'
        Description = 'if (no begin/end)'
        Code.Strings = (
          'if | then')
        Advanced = True
      end
      item
        Name = 'ifb'
        Description = 'if statement'
        Code.Strings = (
          'if | then'
          'begin'
          ''
          'end;')
        Advanced = True
      end
      item
        Name = 'ife'
        Description = 'if then (no begin/end) else (no begin/end)'
        Code.Strings = (
          'if | then'
          ''
          'else')
        Advanced = True
      end
      item
        Name = 'ifeb'
        Description = 'if then else'
        Code.Strings = (
          'if | then'
          'begin'
          ''
          'end'
          'else'
          'begin'
          ''
          'end;')
        Advanced = True
      end
      item
        Name = 'procedure'
        Description = 'procedure declaration'
        Code.Strings = (
          'procedure |();'
          'begin'
          ''
          'end;')
        Advanced = True
      end
      item
        Name = 'trye'
        Description = 'try except'
        Code.Strings = (
          'try'
          '  |'
          'except'
          ''
          'end;')
        Advanced = True
      end
      item
        Name = 'tryf'
        Description = 'try finally'
        Code.Strings = (
          'try'
          '  |'
          'finally'
          ''
          'end;')
        Advanced = True
      end
      item
        Name = 'trycf'
        Description = 'try finally (with Create/Free)'
        Code.Strings = (
          '|variable := typename.Create;'
          'try'
          ''
          'finally'
          '  variable.Free;'
          'end;')
        Advanced = True
      end
      item
        Name = 'whileb'
        Description = 'while statement'
        Code.Strings = (
          'while | do'
          'begin'
          ''
          'end;')
        Advanced = True
      end
      item
        Name = 'whiles'
        Description = 'while (no begin)'
        Code.Strings = (
          'while | do')
        Advanced = True
      end
      item
        Name = 'withb'
        Description = 'with statement'
        Code.Strings = (
          'with | do'
          'begin'
          ''
          'end;')
        Advanced = True
      end
      item
        Name = 'withs'
        Description = 'with (no begin)'
        Code.Strings = (
          'with | do')
        Advanced = True
      end
      item
        Name = 'prop'
        Description = 'property'
        Code.Strings = (
          'property | read  write;')
        Advanced = True
      end>
    SubAnalyzers = <
      item
        DisplayName = 'asm section'
        StartExpression = 'asm\b'#13#10
        EndExpression = 'end'#13#10
        SyntAnalyzer = SyntAnalyzer13
      end>
    SampleText.Strings = (
      'unit Test;    '
      ''
      'interface'
      ''
      'uses aa.aa, bb, cc.cc.cc;                          '
      ''
      'type                        '
      '  TForm1 = class(TForm)    '
      '    procedure Button1Click(Sender: TObject);'
      '  end;                             '
      '                   '
      'implementation                                      '
      
        '                                                                ' +
        '       '
      '{Syntax highlighting}  '
      'procedure TForm1.Button1Click(Sender: TObject);'
      'var'
      ' Number: integer;'
      ' FloatNumber: double;'
      'begin'
      ' Number := 123;  // View integer number style'
      
        ' Caption := '#39'This Number is '#39' + IntToStr(Number); // View string' +
        ' style'
      ' Inc(Number, $1FA7); // View HEX style'
      ' {Assembler style}'
      ' asm'
      '   MOV  AX, 1234H'
      '   MOV Number, AX'
      ' end;'
      'end;'
      ''
      'begin'
      '  if A then'
      '  begin'
      '    Do_;'
      '  end;'
      'end.')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Forward')
    Gramma.Gramma = 
      'Skip = <Comment> | <Preprocessor>;'#13#10#13#10'// Class declaration'#13#10'Clas' +
      'sDecl = <Identifier> '#39'='#39' '#39'class'#39' InheritedList? <Identifier>;'#13#10#13 +
      #10'EmptyClass = <Identifier> '#39'='#39' "class" InheritedList '#39';'#39'; '#13#10#13#10'//' +
      ' Interface declaration'#13#10'IntfDecl = <Identifier> '#39'='#39' ("interface"' +
      ' | "dispinterface") InheritedList? IntfNextToken;'#13#10'IntfNextToken' +
      ' = '#39'['#39' | <Identifier>; '#13#10#13#10'InheritedList = '#39'('#39' IdentList '#39')'#39';'#13#10'I' +
      'dentList = <Identifier> ('#39','#39' <Identifier>)*;'#13#10
    MarkedBlockStyle = 'Marked block'
    CurrentLineStyle = 'Current Line'
    Extentions = 'pas inc dpr dpk lpr lpk'
    LexerName = 'Pascal'
    LineComment = '//'
    AlwaysSyncBlockAnal = True
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal86: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comm'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Str'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symb'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftColor
      end
      item
        DisplayName = 'IdRes'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Num'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Class'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'DataType'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comm'
        StyleName = 'Comm'
        TokenType = 1
        Expression = '--[^\+\*/].*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comm2'
        StyleName = 'Comm'
        TokenType = 1
        Expression = '(?s)\{-.*?(-\}|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Str'
        StyleName = 'Str'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'Str'
        TokenType = 8
        Expression = #39'.'#39
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symb'
        StyleName = 'Symb'
        TokenType = 3
        Expression = '[!\?\#\-\+/\*=<>\(\)\[\]\.\:;@\|\\_`\{\}~,&\$\^]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Num'
        StyleName = 'Num'
        TokenType = 5
        Expression = '\d+\.\d+ | \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[\w_'#39']+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key'
        StyleName = 'IdRes'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'as'
              'case'
              'class'
              'data'
              'default'
              'deriving'
              'do'
              'else'
              'family'
              'forall'
              'foreign'
              'hiding'
              'if'
              'import'
              'in'
              'infix'
              'infixl'
              'infixr'
              'instance'
              'let'
              'mdo'
              'module'
              'newtype'
              'of'
              'proc'
              'qualified'
              'rec'
              'then'
              'type'
              'where')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Classes'
        StyleName = 'Class'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'Bounded'
              'Enum'
              'Eq'
              'EQ'
              'Eval'
              'False'
              'Floating'
              'Fractional'
              'Functor'
              'GT'
              'Integral'
              'Ix'
              'Just'
              'Left'
              'LT'
              'Monad'
              'MonadPlus'
              'MonadZero'
              'Nothing'
              'Num'
              'Ord'
              'Prelude'
              'Read'
              'Real'
              'RealFloat'
              'RealFrac'
              'Right'
              'Show'
              'True'
              'Void')
            TokenTypes = 1028
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Data Type'
        StyleName = 'DataType'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'Addr'
              'Bool'
              'Char'
              'Double'
              'Either'
              'EmptyRec'
              'EmptyRow'
              'FilePath'
              'Float'
              'Int'
              'Integer'
              'IO'
              'IOError'
              'IOResult'
              'Long'
              'Maybe'
              'Ordering'
              'Ratio'
              'Rational'
              'ReadS'
              'Rec'
              'ShowS'
              'String')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'main = print "test", "t", '#39'_'#39' --comment'
      '--this is comment'
      '---this too'
      'foobar --+ a_second_argument'
      ''
      '{-'
      'comment'
      'too'
      '-}'
      ''
      'putStrLn $ "Chars: \"" ++ listedChars ++ "\""'
      'f1,f2 :: Maybe Int -> String;'
      ''
      'if '#39'lookup == Nothing'
      'then '#39'setHelper')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'hs lhs as las'
    LexerName = 'Haskell'
    Notes.Strings = (
      'Author:'
      'A. Torgashin (uvviewsoft.com)'
      ''
      'Info:'
      'http://www.haskell.org/haskellwiki/Keywords'
      'Ex.files:'
      
        'http://www.haskell.org/haskellwiki/Haskell_Tutorial_for_C_Progra' +
        'mmers#Downloads')
    LineComment = '--'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal90: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comm'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Str'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Num'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'IdReserv'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'IdFunc'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 15000804
      end
      item
        DisplayName = 'IdStandard'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comm'
        StyleName = 'Comm'
        TokenType = 1
        Expression = '--.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'StrLongBracket'
        StyleName = 'Str'
        TokenType = 4
        Expression = '(?s)\[\[ .*? (\]\] | \Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'StrLongBracket2'
        StyleName = 'Str'
        TokenType = 4
        Expression = '(?s)\[(=+)\[ .*? (\]\1\] | \Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Str'
        StyleName = 'Str'
        TokenType = 4
        Expression = '("|'#39')(\\"|\\'#39'|.)*?(\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IdFunc'
        StyleName = 'IdFunc'
        TokenType = 10
        Expression = '(?<=function \s) [\w\.:]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-zA-Z_][\w\d]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symb'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\+\-/\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\#]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'NumHex'
        StyleName = 'Num'
        TokenType = 7
        Expression = '0x[A-Fa-f0-9]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'NumFlo'
        StyleName = 'Num'
        TokenType = 6
        Expression = '\d+(\.\d+)? e[\+\-]?\d+ |'#13#10'\d+\.\d+ '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Num'
        StyleName = 'Num'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Res'
        StyleName = 'IdReserv'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'and'
              'break'
              'do'
              'else'
              'elseif'
              'end'
              'false'
              'for'
              'function'
              'if'
              'in'
              'local'
              'nil'
              'not'
              'or'
              'repeat'
              'return'
              'then'
              'true'
              'until'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Std'
        StyleName = 'IdStandard'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '_ALERT'
              '_ERRORMESSAGE'
              '_G'
              '_INPUT'
              '_OUTPUT'
              '_PROMPT'
              '_STDERR'
              '_STDIN'
              '_STDOUT'
              '_VERSION'
              'abs'
              'acos'
              'appendto'
              'asin'
              'assert'
              'atan'
              'atan2'
              'call'
              'ceil'
              'clock'
              'closefile'
              'collectgarbage'
              'coroutine'
              'cos'
              'date'
              'debug'
              'deg'
              'difftime'
              'dofile'
              'dostring'
              'error'
              'execute'
              'exit'
              'exp'
              'floor'
              'flush'
              'foreach'
              'foreachi'
              'format'
              'frexp'
              'gcinfo'
              'getenv'
              'getfenv'
              'getmetatable'
              'getn'
              'globals'
              'gsub'
              'io'
              'ipairs'
              'ldexp'
              'loadfile'
              'loadlib'
              'loadstring'
              'log'
              'log10'
              'math'
              'max'
              'min'
              'mod'
              'newtype'
              'next'
              'openfile'
              'os'
              'pairs'
              'pcall'
              'print'
              'rad'
              'random'
              'randomseed'
              'rawegal'
              'rawget'
              'rawset'
              'read'
              'readfrom'
              'remove'
              'rename'
              'require'
              'seek'
              'setfenv'
              'setlocale'
              'setmetatable'
              'sin'
              'sort'
              'sqrt'
              'strbyte'
              'strchar'
              'strfind'
              'string'
              'strlen'
              'strlower'
              'strrep'
              'strsub'
              'strupper'
              'table'
              'tan'
              'time'
              'tinsert'
              'tmpfile'
              'tmpname'
              'tonumber'
              'tostring'
              'tremove'
              'type'
              'unpack'
              'write'
              'writeto'
              'xpcall')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func'
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockOffset = 1
        BlockEnd = 'end'
        NameFmt = 'func %s0'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin'
        ConditionList = <
          item
            TagList.Strings = (
              'for'
              'function'
              'if'
              'while')
            TokenTypes = 4
          end>
        BlockEnd = 'end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'repeat'
        ConditionList = <
          item
            TagList.Strings = (
              'repeat')
            TokenTypes = 4
          end>
        BlockEnd = 'until'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'until'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'until')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '--Str'
      ' s = '#39'ww\'#39'ww'#39' .. "ww\"ww" .. "w"'
      ' a = '#39'alo\n123"'#39
      ' a = [[alo'
      '  123]]'
      ' a = [==['
      '  alo'
      '  123]==]'
      ''
      '--Int  '
      ' n = 3 + 3.0 + 3e0 + 3.1416 +  314.16e-2 +  0.31416E1 '
      ' n = 0xff + 0x56'
      ''
      '--Code'
      'function Set.mt.__lt (a,b)'
      '  return a <= b and not (b <= a)'
      'end'
      ''
      'function perm:app (a, n)'
      '  if n == 0 then'
      '    coroutine.yield(a)'
      '  else'
      '    for i=1,n do'
      '      -- put i-th element as the last one'
      '      a[n], a[i] = a[i], a[n]'
      ''
      '      -- generate all permutations of the other elements'
      '      permgen(a, n - 1)'
      ''
      '      -- restore i-th element'
      '      a[n], a[i] = a[i], a[n]'
      '    end'
      '  end'
      'end'
      ''
      'function perm (a)'
      '  local n = table.getn(a)'
      '  return coroutine.wrap(function () permgen(a, n) end)'
      'end'
      ''
      'function printResult (a)'
      '  for i,v in ipairs(a) do'
      '    io.write(v, " ")'
      '  end'
      '  io.write("\n")'
      'end'
      ''
      'repeat'
      '  print "aa"'
      'until true'
      '  ')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor'
      'Func name')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'lua'
    LexerName = 'Lua'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Ref:'
      'http://www.lua.org/manual/5.1/manual.html')
    LineComment = '--'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal91: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comm'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Shebang'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Str'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Str2'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Num'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Keywords'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symb'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Shebang'
        StyleName = 'Shebang'
        Expression = '\#!.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comm'
        StyleName = 'Comm'
        TokenType = 1
        Expression = '\#[\s\#].*$'#13#10'| \#\z'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Str'
        StyleName = 'Str'
        TokenType = 4
        Expression = '[$@%][$]?[a-zA-Z_][a-zA-Z0-9_]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Str2'
        StyleName = 'Str2'
        Expression = '("|'#39').*?\1'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Keyword'
        TokenType = 2
        Expression = '[a-zA-Z_][\w\d]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symb'
        StyleName = 'Symb'
        TokenType = 3
        Expression = '[\+\-/\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\#]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Num'
        StyleName = 'Num'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keywords'
        StyleName = 'Keywords'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'after'
              'append'
              'apply'
              'array'
              'auto_execok'
              'auto_import'
              'auto_load'
              'auto_load_index'
              'auto_mkindex'
              'auto_mkindex_old'
              'auto_qualify'
              'auto_reset'
              'beep'
              'bell'
              'bgerror'
              'binary'
              'bind'
              'bindtags'
              'bitmap'
              'break'
              'button'
              'canvas'
              'case'
              'catch'
              'cd'
              'chan'
              'checkbutton'
              'clipboard'
              'clock'
              'close'
              'colors'
              'concat'
              'console'
              'continue'
              'cursors'
              'dde'
              'default'
              'destroy'
              'dict'
              'echo'
              'else'
              'elseif'
              'encoding'
              'entry'
              'eof'
              'error'
              'eval'
              'event'
              'exec'
              'exit'
              'expr'
              'fblocked'
              'fconfigure'
              'fcopy'
              'file'
              'fileevent'
              'filename'
              'flush'
              'focus'
              'font'
              'for'
              'foreach'
              'format'
              'frame'
              'gets'
              'glob'
              'global'
              'grab'
              'grid'
              'history'
              'http'
              'if'
              'image'
              'incr'
              'info'
              'interp'
              'join'
              'keysyms'
              'label'
              'labelframe'
              'lappend'
              'lassign'
              'lindex'
              'linsert'
              'list'
              'listbox'
              'llength'
              'load'
              'loadTk'
              'lower'
              'lrange'
              'lrepeat'
              'lreplace'
              'lreverse'
              'lsearch'
              'lset'
              'lsort'
              'mathfunc'
              'mathop'
              'memory'
              'menu'
              'menubutton'
              'message'
              'msgcat'
              'namespace'
              'open'
              'option'
              'options'
              'pack'
              'package'
              'panedwindow'
              'parray'
              'photo'
              'pid'
              'pkg::create'
              'pkg_mkIndex'
              'place'
              'platform'
              'platform::shell'
              'proc'
              'puts'
              'pwd'
              'radiobutton'
              'raise'
              're_syntax'
              'read'
              'refchan'
              'regexp'
              'registry'
              'regsub'
              'rename'
              'resource'
              'return'
              'Safe Base'
              'scale'
              'scan'
              'scrollbar'
              'seek'
              'selection'
              'send'
              'set'
              'socket'
              'source'
              'spinbox'
              'split'
              'string'
              'subst'
              'switch'
              'Tcl'
              'tcl_endOfWord'
              'tcl_findLibrary'
              'tcl_startOfNextWord'
              'tcl_startOfPreviousWord'
              'tcl_wordBreakAfter'
              'tcl_wordBreakBefore'
              'tclLog'
              'tclMacPkgSearch'
              'tclPkgSetup'
              'tclPkgUnknown'
              'tcltest'
              'tclvars'
              'tell'
              'text'
              'then'
              'time'
              'tk'
              'tk_bisque'
              'tk_chooseColor'
              'tk_chooseDirectory'
              'tk_dialog'
              'tk_focusFollowsMouse'
              'tk_focusNext'
              'tk_focusPrev'
              'tk_getOpenFile'
              'tk_getSaveFile'
              'tk_menuSetFocus'
              'tk_messageBox'
              'tk_optionMenu'
              'tk_popup'
              'tk_setPalette'
              'tk_textCopy'
              'tk_textCut'
              'tk_textPaste'
              'tkerror'
              'tkvars'
              'tkwait'
              'tm'
              'toplevel'
              'trace'
              'ttk::button'
              'ttk::checkbutton'
              'ttk::combobox'
              'ttk::entry'
              'ttk::frame'
              'ttk::image'
              'ttk::intro'
              'ttk::label'
              'ttk::labelframe'
              'ttk::menubutton'
              'ttk::notebook'
              'ttk::panedwindow'
              'ttk::progressbar'
              'ttk::radiobutton'
              'ttk::scale'
              'ttk::scrollbar'
              'ttk::separator'
              'ttk::sizegrip'
              'ttk::style'
              'ttk::treeview'
              'ttk::widget'
              'unknown'
              'unload'
              'unset'
              'update'
              'uplevel'
              'upvar'
              'variable'
              'vwait'
              'while'
              'winfo'
              'wm')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = '{'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'proc namesp'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              ':')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ':')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'proc')
            TokenTypes = 4
          end>
        NameFmt = 'proc %s-4'
        GroupFmt = 'namespace %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CancelNextRules = True
        NoEndRule = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'proc'
        ConditionList = <
          item
            TagList.Strings = (
              ':')
            CondType = tcNotEqual
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'proc')
            TokenTypes = 4
          end>
        NameFmt = 'proc %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#!/usr/bin/env tclsh'
      '# Example code'
      'set example {1 2 3}'
      'e.g. {set'#39'add example 4} -> {1 2 3 4}'
      'e.g. {set'#39'add example 4} -> {1 2 3 4}'
      'book open "sample.xls"'
      'proc set'#39'remove {_set args} {'
      '   upvar 1 $_set set'
      '   foreach el $args {'
      '       set pos [lsearch -exact $set $el]'
      '   }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Keyword'
      'Symbol'
      'String'
      'Integer const')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'tcl tk'
    LexerName = 'Tcl'
    SkipSpaces = False
    Notes.Strings = (
      'Author: Matthias030 (SynWrite site admin)'
      'Tree by: Alex, uvviewsoft.com'
      ''
      'Ref:'
      'http://www.tcl.tk/man/'
      'Not tested but maybe a good idea to test on:'
      
        'http://www.subdude-site.com/WebPages_Local/RefInfo/Computer/TclT' +
        'k/others_tcltkCode/others_tcltkCode.htm')
    LineComment = '# '
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal92: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGrayText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Key words'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Params'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Strings'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Variable'
        Enabled = False
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Int'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Functions'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Classes'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 3
        Expression = '\w+(?=(\s+)?:(:)?=)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'TempVars'
        StyleName = 'Variable'
        TokenType = 3
        Expression = '(?<!\[.*)(?s)(\|(\s+)?).+?\1'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)".*?"'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Class'
        StyleName = 'Key words'
        TokenType = 2
        Expression = '\#\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        Expression = '[\+\-\*\(\)\[\]\{\}\<>\.,~!&\|;:=%\^\#]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'Strings'
        TokenType = 5
        Expression = '\$\w'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Strings'
        StyleName = 'Strings'
        TokenType = 4
        Expression = '(?s)('#39'|'#180'|`).*?\1'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Int'
        StyleName = 'Int'
        Expression = '\b\d+\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Function'
        StyleName = 'Functions'
        TokenType = 2
        Expression = '\w+:'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Keywords'
        StyleName = 'Params'
        TokenType = 2
        Expression = '\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keywords'
        StyleName = 'Key words'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'false'
              'nil'
              'self'
              'super'
              'true')
            TokenTypes = 4
            IgnoreCase = True
          end>
        DynHighlight = dhBound
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'Object subclass: #ImageCreator'
      #9'poolDictionaries: '#39#39
      #9'category: '#39'STBE-ImageCreator'#39
      '    '
      '| sourceDir sysAddDir sysModDir localFile '
      
        'beforeClassCount beforeMethodCount afterClassCount afterMethodCo' +
        'unt |'
      ''
      
        '"Figure out the various directories. We allow development to be ' +
        'done on different types of platform"'
      'Window platformName = '#39'X11'#39
      #9'ifTrue: '
      #9#9'[sourceDir := '#39'/product/src/'#39'.'
      #9#9'sysAddDir := '#39'/visual/sys/additions/'#39'.'
      
        #9#9'localFile := '#39'/home/'#39', (CEnvironment getenv: '#39'LOGNAME'#39'), '#39'/.vw' +
        'local'#39']'
      ''
      
        '"Create any necessary pool dictionaries and add all the pool dic' +
        'tionary variables"'
      'Smalltalk at: #MyPoolDictionary put: Dictionary new.'
      'MyPoolDictionary at: #PoolVariableOne put: nil.'
      'MyPoolDictionary at: #PoolVariableTwo put: nil.'
      ''
      
        '"File In any required system additions and modifications that we' +
        ' find the the relevant directories"'
      '(sysAddDir asFilename filesMatching: '#39'*.st'#39')'
      #9'do: [ :each | each asFilename fileIn].')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Variable'
      'String'
      'Char')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'st'
    LexerName = 'Smalltalk'
    SkipSpaces = False
    Notes.Strings = (
      'Smalltalk Lexer'
      'created October 2011'
      'Matthias030 (ghisler.ch)')
    RestartFromLineStart = True
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal96: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Text'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        MultiLineBorder = True
      end
      item
        DisplayName = 'Tag bound'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 16744448
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = cl3DDkShadow
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
        BgColor = clSilver
      end
      item
        DisplayName = 'Tag param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Tag properties'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 47360
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Unknown tag content'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsUnderline]
      end
      item
        DisplayName = 'Tag Key'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 16744448
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 53760
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Bound'
        Enabled = False
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
        MultiLineBorder = True
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (attribute)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 12189695
        FormatType = ftColor
      end
      item
        DisplayName = 'Tree item (tag)'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 16744448
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Tag back hl'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clMoneyGreen
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Tag border hl'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 12372132
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?ms)<!--.*?(-->|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment end'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '# for use in <SCRIPT>'#13#10'-->'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '<'
        StyleName = 'Tag bound'
        TokenType = 10
        Expression = '<[/!\-%\?]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '>'
        StyleName = 'Tag bound'
        TokenType = 11
        Expression = '[%\?/]?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        BlockName = 'Tag begin'
        TokenType = 7
        Expression = '\#[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag param'
        StyleName = 'Tag param'
        BlockName = 'Tag begin'
        TokenType = 4
        Expression = '(?s) ("|'#39') .*? (\1|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Tag ident'
        BlockName = 'Tag begin'
        TokenType = 2
        Expression = '[^\s=>]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '='
        StyleName = 'Tag bound'
        BlockName = 'Tag begin'
        TokenType = 3
        Expression = '='#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Unknow tag content'
        StyleName = 'Unknown tag content'
        BlockName = 'Tag begin'
        Expression = '[^>]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '&...'
        StyleName = 'Tag Key'
        TokenType = 9
        Expression = '&\w+;'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text'
        StyleName = 'Text'
        TokenType = 9
        Expression = '[^<&]*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Tag keys'
        StyleName = 'Tag Key'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '<'
              '</')
            TokenTypes = 1024
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag property'
        StyleName = 'Tag properties'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        IdentIndex = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag property value'
        StyleName = 'Tag param'
        BlockType = btTagDetect
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag begin'
        StyleName = 'Tag border hl'
        ConditionList = <
          item
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag end'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Simple tag block'
        ConditionList = <
          item
            TagList.Strings = (
              'br'
              'hr'
              'image'
              'img'
              'link')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<')
            TokenTypes = 1024
          end>
        BlockEnd = 'Simple tag block end'
        NameFmt = '<%s0>'
        HighlightPos = cpBound
        DynSelectMin = True
        TreeItemStyle = 'Tree item (tag)'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Simple tag block end'
        BlockName = 'Simple tag block'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2048
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag block begin'
        StyleName = 'Tag back hl'
        ConditionList = <
          item
            TagList.Strings = (
              'br'
              'hr'
              'image'
              'img'
              'link')
            CondType = tcNotEqual
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '<'
              '<!')
            TokenTypes = 1024
          end>
        BlockEnd = 'Tag block end'
        NameFmt = '<%s0>'
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        CollapseFmt = '<%s0>'
        TreeItemStyle = 'Tree item (tag)'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag block end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              '</')
            TokenTypes = 1024
          end>
        SameIdent = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Comment begin'
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        DynSelectMin = True
        CollapseFmt = '<!--  ...  -->'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 2
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Tag attribute'
        BlockName = 'Tag begin'
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              '=')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        NotCollapsed = True
        NameFmt = '%s0 %s-1 %s-2'
        HighlightPos = cpBound
        NoEndRule = True
        TreeItemStyle = 'Tree item (attribute)'
        IgnoreAsParent = False
      end>
    CodeTemplates = <
      item
        Name = 'htm'
        Code.Strings = (
          '<html>'
          '  <head>'
          '    <title><caret></title>'
          '  </head>'
          '  <body>'
          '    '
          '  </body>'
          '</html>')
        Advanced = True
      end
      item
        Name = 'body'
        Code.Strings = (
          '<body bgcolor=<caret> text= link= alink= vlink=>'
          ''
          '</body>')
        Advanced = True
      end
      item
        Name = 'head'
        Code.Strings = (
          '<head>'
          '  <title><caret></title>'
          '  <meta http-equiv="Content-Language" content="en">'
          
            '  <meta http-equiv="Content-Type" content="text/html; charset=wi' +
            'ndows-1251">'
          '  <meta name="author" content="">'
          '  <meta name="generator" content="">'
          '  <meta name="keywords" content="">'
          '  <meta name="description" content="">'
          '  <link rel="stylesheet" type="text/css" href="">'
          '  <link rel="shortcut icon" type="image/x-icon" href="">'
          '</head>')
        Advanced = True
      end
      item
        Name = 'linki'
        Description = 'link to image'
        Code.Strings = (
          '<link rel="shortcut icon" type="image/x-icon" href="<caret>">')
        Advanced = True
      end
      item
        Name = 'link'
        Description = 'hyperlink'
        Code.Strings = (
          '<link rel="stylesheet" type="text/css" href="<caret>">')
        Advanced = True
      end
      item
        Name = 'meta'
        Code.Strings = (
          '<meta http-equiv="Content-Language" content="en">'
          
            '<meta http-equiv="Content-Type" content="text/html; charset=wind' +
            'ows-1251">'
          '<meta name="author" content="<caret>">'
          '<meta name="generator" content="">'
          '<meta Name="keywords" Content="">'
          '<meta Name="description" Content="">')
        Advanced = True
      end
      item
        Name = 'html'
        Code.Strings = (
          '<!DOCTYPE HTML PUBLIC  "-//W3C//DTD HTML 4.0  Transitional//EN"'
          '"http://www.w3.org/TR/REC-html40/loose.dtd">'
          '<html>'
          '  <head>'
          '    <title><caret></title>'
          '    <meta http-equiv="Content-Language" content="en">'
          
            '    <meta http-equiv="Content-Type" content="text/html; charset=' +
            'windows-1251">'
          '    <meta name="author" content="">'
          '    <meta name="generator" content="">'
          '    <meta name="keywords" content="">'
          '    <meta name="description" content="">'
          '    <link rel="stylesheet" type="text/css" href="">'
          '    <link rel="shortcut icon" type="image/x-icon" href="">'
          '  </head>'
          '  <body>'
          ''
          '  </body>'
          '</html>')
        Advanced = True
      end
      item
        Name = '--'
        Code.Strings = (
          '<!-- <caret> -->')
        Advanced = True
      end
      item
        Name = '!doct'
        Description = 'dtd html'
        Code.Strings = (
          '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"'
          '"http://www.w3.org/TR/REC-html40/loose.dtd">'
          '<caret>')
        Advanced = True
      end
      item
        Name = '!doctx'
        Description = 'dtd xhtml'
        Code.Strings = (
          '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"'
          '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'
          '<caret>')
        Advanced = True
      end
      item
        Name = 'a'
        Code.Strings = (
          '<a href="<caret>"></a>')
        Advanced = True
      end
      item
        Name = 'an'
        Description = 'link in new window'
        Code.Strings = (
          '<a target="_blank" href="<caret>"></a>')
        Advanced = True
      end
      item
        Name = 'form'
        Code.Strings = (
          '<form action="<caret>" method="post">'
          '</form>')
        Advanced = True
      end
      item
        Name = 'formi'
        Description = 'form with input tags'
        Code.Strings = (
          '<form action="<caret>" method=get>'
          '  <input name="" type=text>'
          '  <input type=submit>'
          '  <input type=reset>'
          '</form>')
        Advanced = True
      end
      item
        Name = 'input'
        Code.Strings = (
          '<input name="<caret>" type="text">')
        Advanced = True
      end
      item
        Name = 'frameset'
        Code.Strings = (
          '<frameset cols="30%,*">'
          '  <frame name="" src="<caret>.html">'
          '  <frame name="" src=".html">'
          '</frameset>')
        Advanced = True
      end
      item
        Name = 'img'
        Code.Strings = (
          '<img src="<caret>" alt="">')
        Advanced = True
      end
      item
        Name = 'js'
        Code.Strings = (
          
            '<script src="<caret>.js" type="text/javascript" language="javasc' +
            'ript"></script>')
        Advanced = True
      end
      item
        Name = 'script'
        Code.Strings = (
          '<script language="JavaScript" type="text/javascript">'
          '<!--'
          '  <caret>'
          '//-->'
          '</script>')
        Advanced = True
      end
      item
        Name = 'style'
        Code.Strings = (
          '<style type="text/css">'
          '<!--'
          '  <caret>'
          '//-->'
          '</style>')
        Advanced = True
      end
      item
        Name = 'table'
        Code.Strings = (
          '<table cellspacing=0 cellpadding=0 width="100%">'
          '  <tr>'
          '    <td><caret></td>'
          '  </tr>'
          '</table>')
        Advanced = True
      end
      item
        Name = 'tableh'
        Description = 'table with header'
        Code.Strings = (
          
            '<table align="left" border=0 cellspacing=0 cellpadding=0 width="' +
            '100%">'
          '  <tr align="left" valign="middle">'
          '    <th><caret></th>'
          '    <th></th>'
          '  <tr align="left" valign=middle">'
          '    <td></td>'
          '    <td></td>'
          '</table>')
        Advanced = True
      end
      item
        Name = 'tr'
        Code.Strings = (
          '<tr>'
          '  <td><caret></td>'
          '</tr>')
        Advanced = True
      end
      item
        Name = 'td'
        Code.Strings = (
          '<td><caret></td>')
        Advanced = True
      end
      item
        Name = 'ul'
        Code.Strings = (
          '<ul type=square>'
          '  <li><caret>'
          '</ul>')
        Advanced = True
      end
      item
        Name = 'ol'
        Code.Strings = (
          '<ol>'
          '  <li><caret>'
          '</ol>')
        Advanced = True
      end
      item
        Name = 'xml'
        Code.Strings = (
          '<?xml version="1.0" encoding="windows-1251"?>'
          '<caret>')
        Advanced = True
      end
      item
        Name = 'xmlcss'
        Code.Strings = (
          '<?xml version="1.0" encoding="windows-1251"?>'
          '<?xml-stylesheet type="text/css" href="<caret>"?>')
        Advanced = True
      end
      item
        Name = 'perl'
        Description = 'perl header'
        Code.Strings = (
          '#!/usr/bin/perl'
          '<caret>')
        Advanced = True
      end
      item
        Name = 'wml'
        Code.Strings = (
          '<?xml version="1.0"?>'
          
            '<!DOCTYPE wml PUBLIC "-//WAPFORUM//DTD WML 1.2//EN" "http://www.' +
            'wapforum.org/DTD/wml_1.2.xml">'
          '<caret>')
        Advanced = True
      end
      item
        Name = 'if_else'
        Code.Strings = (
          'if (<caret>){'
          ''
          '}'
          'else{'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'function'
        Code.Strings = (
          'function <caret>(){'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'sub'
        Code.Strings = (
          'sub <caret> {'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'for'
        Code.Strings = (
          'for ($<caret>i = 0; $i < $n; $i++){'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'while'
        Code.Strings = (
          'while (<caret>){'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'do'
        Code.Strings = (
          'do{'
          ''
          '}'
          'while (<caret>);')
        Advanced = True
      end
      item
        Name = 'switch'
        Code.Strings = (
          'switch ($<caret>i){'
          '  case 0:'
          ''
          '    break;'
          '  case 1:'
          ''
          '    break;'
          '  case 2:'
          ''
          '    break;'
          '}')
        Advanced = True
      end
      item
        Name = 'print'
        Description = 'function print'
        Code.Strings = (
          'print "<caret>";')
        Advanced = True
      end
      item
        Name = 'echo'
        Code.Strings = (
          'echo "<caret>";')
        Advanced = True
      end
      item
        Name = 'mail'
        Description = 'function mail'
        Code.Strings = (
          'mail($<caret>email, $subject, $message, "From: $from_email");')
        Advanced = True
      end
      item
        Name = 'setcookie'
        Code.Strings = (
          'setcookie ("<caret>TestCookie", $value,time()+3600);')
        Advanced = True
      end
      item
        Name = 'mysql_con'
        Code.Strings = (
          
            '$link = mysql_connect("<caret>mysql_host", "mysql_login", "mysql' +
            '_password")'
          '  or die ("Could not connect to MySQL");'
          ''
          'mysql_select_db("my_database")'
          '  or die ("Could not select database");')
        Advanced = True
      end
      item
        Name = 'mysql_query'
        Code.Strings = (
          '$query = "<caret>SELECT * FROM my_table";'
          '$result = mysql_query($query)'
          '  or die("Query failed");'
          ''
          '// Output in HTML'
          ''
          'print "<table>\n";'
          'while ($line = mysql_fetch_array($result))'
          '{'
          '  print "\t<tr>\n";'
          '  while (list($col_name, $col_value) = each($line))'
          '  {'
          '    print "\t\t<td>$col_value</td>\n";'
          '  }'
          '  print "\t</tr>\n";'
          '}'
          'print "</table>\n";')
        Advanced = True
      end
      item
        Name = 'header'
        Code.Strings = (
          'Header("Content-type: <caret>image/png");')
        Advanced = True
      end
      item
        Name = 'location'
        Code.Strings = (
          'Header("Location: http://<caret>");')
        Advanced = True
      end
      item
        Name = 'fwrite'
        Description = 'function fwrite'
        Code.Strings = (
          '$fp = fopen("<caret>file.txt", "w+");'
          'fwrite($fp, "Test");'
          'fclose($fp);')
        Advanced = True
      end>
    SubAnalyzers = <
      item
        DisplayName = 'Style sheet'
        AlwaysEnabled = True
        StartExpression = '(?si)<style[^>]*> '#13#10
        EndExpression = '</style>'#13#10
        SyntAnalyzer = SyntAnalyzer10
      end
      item
        DisplayName = 'VB script'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*vbscript[^>]*>\s*(<!--)?'#13#10
        EndExpression = '(?i)(-->)?\s*</script>'#13#10
        SyntAnalyzer = SyntAnal56
      end
      item
        DisplayName = 'Java script'
        AlwaysEnabled = True
        StartExpression = '(?si)<script[^>]*javascript[^>]*>\s*(<!--)?'#13#10
        EndExpression = '(?i)(//)?(-->)?\s*</script>'#13#10
        SyntAnalyzer = SyntAnal38
      end
      item
        DisplayName = 'ASP'
        AlwaysEnabled = True
        StartExpression = '<%[^@]'#13#10
        EndExpression = '%>'#13#10
        SyntAnalyzer = SyntAnal56
      end>
    SampleText.Strings = (
      '<!DOCUMENT sdfsdf="sdfsf" wer="123">'
      '<META1 sdfsdf />'
      '<META2 qweqwe/>'
      '<link dsfdsfgfdg />'
      '<!--qweqweqwe -->'
      '<html> '
      '     <head>'
      '          <title fdgh 15> '
      '               '#1055#1088#1080#1084#1077#1088' 1   '
      '               <script sss=15></script>'
      '          </title>'
      '     </head> '
      '     <body src="sdfsdfsdf" style='#39'aaa; aaa; aaa;'#39'> '
      '          <H1> '
      '               '#1055#1088#1080#1074#1077#1090'! '
      '          </H1> '
      '          <P> '
      '               '#1069#1090#1086' '#1087#1088#1086#1089#1090#1077#1081#1096#1080#1081' '#1087#1088#1080#1084#1077#1088' HTML-'#1076#1086#1082#1091#1084#1077#1085#1090#1072'. '
      '          </P> '
      '     </body> '
      '</html>')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Text'
      'Open Tag'
      'Close Tag')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'htm html asp aspx'
    LexerName = 'PHP_dev_HTML'
    Notes.Strings = (
      'Created by 480499497 from http://forum.wincmd.ru')
    Internal = True
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal97: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = cl3DDkShadow
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clScrollBar
      end
      item
        DisplayName = 'Digits'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'DIM'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 55040
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Operators'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Selection'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Single Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clFuchsia
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 41984
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Reserved Words'
        Font.Charset = ANSI_CHARSET
        Font.Color = 16744448
        Font.Height = -13
        Font.Name = 'Arial Rounded MT Bold'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNone
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'PHP_start'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15528434
        BorderTypeLeft = blSolid3
        BorderColorLeft = clLime
        BorderTypeTop = blSolid3
        BorderColorTop = clLime
      end
      item
        DisplayName = 'PHP_'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 14477031
      end
      item
        DisplayName = 'PHP_end'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 15527922
        BorderTypeRight = blSolid3
        BorderColorRight = clLime
        BorderTypeBottom = blSolid3
        BorderColorBottom = clLime
      end
      item
        DisplayName = 'Tree_PHP_tag'
        Font.Charset = ANSI_CHARSET
        Font.Color = 8404992
        Font.Height = -13
        Font.Name = 'Arial Narrow'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Actual_block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWhite
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 316811
        BorderTypeLeft = blSolid
        BorderTypeTop = blSolid
        BorderTypeRight = blSolid
        BorderTypeBottom = blSolid
      end
      item
        DisplayName = 'reserved_functions'
        Font.Charset = ANSI_CHARSET
        Font.Color = 10533165
        Font.Height = -13
        Font.Name = 'Arial'
        Font.Style = []
        BorderColorLeft = clFuchsia
        BorderColorTop = clPurple
        BorderColorRight = clPurple
        BorderTypeBottom = blDot
        BorderColorBottom = clFuchsia
      end
      item
        DisplayName = 'slide_marker'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clMoneyGreen
        BorderTypeLeft = blSolid
      end>
    TokenRules = <
      item
        DisplayName = 'function'
        Enabled = False
        TokenType = 10
        Expression = 
          'function[\s\w]+\((\w|\d|\s|\$|\=|\+|\-|\'#39'|\"|\%|\/)*\)(\{|\s)*(\' +
          '{|$)+'#13#10'[\s\w]+\{[\W\w?\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Code block start'
        StyleName = 'PHP_start'
        TokenType = 3
        Expression = '<\?(php)?'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Code block end'
        StyleName = 'PHP_end'
        TokenType = 3
        Expression = '\?>'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        Expression = '\#.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Digits'
        TokenType = 2
        Expression = '\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Digits'
        TokenType = 2
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Operators'
        StyleName = 'Operators'
        TokenType = 4
        Expression = '[!/\+\-\*:=<>&/\|\^~\@\%\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Single Symbol'
        TokenType = 6
        Expression = '[\{\}\(\)\[\],;\.]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 7
        Expression = '(?s)(["'#39'])(\\\1|\\\\|.)*?\1'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Variable'
        StyleName = 'Variable'
        TokenType = 8
        Expression = '\$\w*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Default'
        StyleName = 'Default'
        TokenType = 1
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'HTML_Start'
        StyleName = 'Tree_PHP_tag'
        ConditionList = <
          item
            TagList.Strings = (
              '?>')
          end>
        BlockEnd = 'HTML_END'
        DisplayInTree = False
        NameFmt = '%s-1 %s-2 %s-3 %s-4'
        DynHighlight = dhRangeNoBound
        HighlightPos = cpAny
        CollapseFmt = 'HTML.....'
        TreeItemStyle = 'Reserved Words'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'PHP_Start'
        StyleName = 'PHP_'
        ConditionList = <
          item
            TagList.Strings = (
              '<?'
              '<?php')
          end>
        BlockEnd = 'PHP_End'
        DisplayInTree = False
        NameFmt = '<%s-1>'
        DynHighlight = dhRangeNoBound
        HighlightPos = cpAny
        DynSelectMin = True
        CollapseFmt = 'PHP.....'
        TreeItemStyle = 'DIM'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'HTML_END'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '<?'
              '<?php')
          end>
        BlockEnd = 'HTML_Start'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'PHP_End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '?>')
          end>
        BlockEnd = 'PHP_Start'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '{_start'
        StyleName = 'Actual_block'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
          end>
        BlockEnd = '}_end'
        NameFmt = '%sl0'
        RefToCondEnd = True
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        CollapseFmt = '.....'
        Pen.Color = clRed
        Pen.Style = psDot
        IgnoreAsParent = False
      end
      item
        DisplayName = '}_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
          end>
        BlockEnd = '{_start'
        HighlightPos = cpAny
        GroupIndex = 1
        IgnoreAsParent = False
      end
      item
        DisplayName = 'reserved_words'
        StyleName = 'Reserved Words'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'as'
              'break'
              'case'
              'catch'
              'class'
              'const'
              'continue'
              'debugger'
              'declare'
              'default'
              'delete'
              'do'
              'do-while'
              'else'
              'elseif'
              'endfor'
              'endforeach'
              'endif'
              'endswitch'
              'endwhile'
              'enum'
              'export'
              'extends'
              'false'
              'finally'
              'for'
              'foreach'
              'function'
              'if'
              'import'
              'in'
              'include'
              'include_once'
              'new'
              'null'
              'require'
              'require_once'
              'return'
              'super'
              'switch'
              'switch-case'
              'this'
              'throw'
              'true'
              'try'
              'typeof'
              'var'
              'void'
              'while'
              'with')
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'reserved_functions'
        StyleName = 'reserved_functions'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abs'
              'acos'
              'acosh'
              'addcslashes'
              'addslashes'
              'aggregate'
              'aggregate_info'
              'aggregate_methods'
              'aggregate_methods_by_list'
              'aggregate_methods_by_regexp'
              'aggregate_properties'
              'aggregate_properties_by_list'
              'aggregate_properties_by_regexp'
              'aggregation_info'
              'apache_child_terminate'
              'apache_get_modules'
              'apache_get_version'
              'apache_getenv'
              'apache_lookup_uri'
              'apache_note'
              'apache_request_headers'
              'apache_reset_timeout'
              'apache_response_headers'
              'apache_setenv'
              'apd_breakpoint'
              'apd_callstack'
              'apd_clunk'
              'apd_continue'
              'apd_croak'
              'apd_dump_function_table'
              'apd_dump_persistent_resources'
              'apd_dump_regular_resources'
              'apd_echo'
              'apd_get_active_symbols'
              'apd_set_pprof_trace'
              'apd_set_session'
              'apd_set_session_trace'
              'apd_set_socket_session_trace'
              'array'
              'array_change_key_case'
              'array_chunk'
              'array_combine'
              'array_count_values'
              'array_diff'
              'array_diff_assoc'
              'array_diff_key'
              'array_diff_uassoc'
              'array_diff_ukey'
              'array_fill'
              'array_filter'
              'array_flip'
              'array_intersect'
              'array_intersect_assoc'
              'array_intersect_key'
              'array_intersect_uassoc'
              'array_intersect_ukey'
              'array_key_exists'
              'array_keys'
              'array_map'
              'array_merge'
              'array_merge_recursive'
              'array_multisort'
              'array_pad'
              'array_pop'
              'array_push'
              'array_rand'
              'array_reduce'
              'array_reverse'
              'array_search'
              'array_shift'
              'array_slice'
              'array_splice'
              'array_sum'
              'array_udiff'
              'array_udiff_assoc'
              'array_udiff_uassoc'
              'array_uintersect'
              'array_uintersect_assoc'
              'array_uintersect_uassoc'
              'array_unique'
              'array_unshift'
              'array_values'
              'array_walk'
              'array_walk_recursive'
              'ArrayIterator::current'
              'ArrayIterator::key'
              'ArrayIterator::next'
              'ArrayIterator::rewind'
              'ArrayIterator::seek'
              'ArrayIterator::valid'
              'ArrayObject::__construct'
              'ArrayObject::append'
              'ArrayObject::count'
              'ArrayObject::getIterator'
              'ArrayObject::offsetExists'
              'ArrayObject::offsetGet'
              'ArrayObject::offsetSet'
              'ArrayObject::offsetUnset'
              'arsort'
              'ascii2ebcdic'
              'asin'
              'asinh'
              'asort'
              'aspell_check'
              'aspell_check_raw'
              'aspell_new'
              'aspell_suggest'
              'assert'
              'assert_options'
              'atan'
              'atan2'
              'atanh'
              'base_convert'
              'base64_decode'
              'base64_encode'
              'basename'
              'bcadd'
              'bccomp'
              'bcdiv'
              'bcmod'
              'bcmul'
              'bcompile_write_file'
              'bcompiler_load'
              'bcompiler_load_exe'
              'bcompiler_parse_class'
              'bcompiler_read'
              'bcompiler_write_class'
              'bcompiler_write_constant'
              'bcompiler_write_exe_footer'
              'bcompiler_write_footer'
              'bcompiler_write_function'
              'bcompiler_write_functions_from_file'
              'bcompiler_write_header'
              'bcpow'
              'bcpowmod'
              'bcscale'
              'bcsqrt'
              'bcsub'
              'bin2hex'
              'bind_textdomain_codeset'
              'bindec'
              'bindtextdomain'
              'bzclose'
              'bzcompress'
              'bzdecompress'
              'bzerrno'
              'bzerror'
              'bzerrstr'
              'bzflush'
              'bzopen'
              'bzread'
              'bzwrite'
              'CachingIterator::__toString'
              'CachingIterator::hasNext'
              'CachingIterator::next'
              'CachingIterator::rewind'
              'CachingIterator::valid'
              'CachingRecursiveIterator::getChildren'
              'CachingRecursiveIterator::hasChildren'
              'cal_days_in_month'
              'cal_from_jd'
              'cal_info'
              'cal_to_jd'
              'call_user_func'
              'call_user_func_array'
              'call_user_method'
              'call_user_method_array'
              'ccvs_add'
              'ccvs_auth'
              'ccvs_command'
              'ccvs_count'
              'ccvs_delete'
              'ccvs_done'
              'ccvs_init'
              'ccvs_lookup'
              'ccvs_new'
              'ccvs_report'
              'ccvs_return'
              'ccvs_reverse'
              'ccvs_sale'
              'ccvs_status'
              'ccvs_textvalue'
              'ccvs_void'
              'ceil'
              'chdir'
              'checkdate'
              'checkdnsrr'
              'chgrp'
              'chmod'
              'chop'
              'chown'
              'chr'
              'chroot'
              'chunk_split'
              'class_exists'
              'class_implements'
              'class_parents'
              'classkit_import'
              'classkit_method_add'
              'classkit_method_copy'
              'classkit_method_redefine'
              'classkit_method_remove'
              'classkit_method_rename'
              'clearstatcache'
              'closedir'
              'closelog'
              'com'
              'com_addref'
              'com_create_guid'
              'com_event_sink'
              'com_get'
              'com_get_active_object'
              'com_invoke'
              'com_isenum'
              'com_load'
              'com_load_typelib'
              'com_message_pump'
              'com_print_typeinfo'
              'com_propget'
              'com_propput'
              'com_propset'
              'com_release'
              'com_set'
              'compact'
              'connection_aborted'
              'connection_status'
              'connection_timeout'
              'constant'
              'convert_cyr_string'
              'convert_uudecode'
              'convert_uuencode'
              'copy'
              'cos'
              'cosh'
              'count'
              'count_chars'
              'cpdf_add_annotation'
              'cpdf_add_outline'
              'cpdf_arc'
              'cpdf_begin_text'
              'cpdf_circle'
              'cpdf_clip'
              'cpdf_close'
              'cpdf_closepath'
              'cpdf_closepath_fill_stroke'
              'cpdf_closepath_stroke'
              'cpdf_continue_text'
              'cpdf_curveto'
              'cpdf_end_text'
              'cpdf_fill'
              'cpdf_fill_stroke'
              'cpdf_finalize'
              'cpdf_finalize_page'
              'cpdf_global_set_document_limits'
              'cpdf_import_jpeg'
              'cpdf_lineto'
              'cpdf_moveto'
              'cpdf_newpath'
              'cpdf_open'
              'cpdf_output_buffer'
              'cpdf_page_init'
              'cpdf_place_inline_image'
              'cpdf_rect'
              'cpdf_restore'
              'cpdf_rlineto'
              'cpdf_rmoveto'
              'cpdf_rotate'
              'cpdf_rotate_text'
              'cpdf_save'
              'cpdf_save_to_file'
              'cpdf_scale'
              'cpdf_set_action_url'
              'cpdf_set_char_spacing'
              'cpdf_set_creator'
              'cpdf_set_current_page'
              'cpdf_set_font'
              'cpdf_set_font_directories'
              'cpdf_set_font_map_file'
              'cpdf_set_horiz_scaling'
              'cpdf_set_keywords'
              'cpdf_set_leading'
              'cpdf_set_page_animation'
              'cpdf_set_subject'
              'cpdf_set_text_matrix'
              'cpdf_set_text_pos'
              'cpdf_set_text_rendering'
              'cpdf_set_text_rise'
              'cpdf_set_title'
              'cpdf_set_viewer_preferences'
              'cpdf_set_word_spacing'
              'cpdf_setdash'
              'cpdf_setflat'
              'cpdf_setgray'
              'cpdf_setgray_fill'
              'cpdf_setgray_stroke'
              'cpdf_setlinecap'
              'cpdf_setlinejoin'
              'cpdf_setlinewidth'
              'cpdf_setmiterlimit'
              'cpdf_setrgbcolor'
              'cpdf_setrgbcolor_fill'
              'cpdf_setrgbcolor_stroke'
              'cpdf_show'
              'cpdf_show_xy'
              'cpdf_stringwidth'
              'cpdf_stroke'
              'cpdf_text'
              'cpdf_translate'
              'crack_check'
              'crack_closedict'
              'crack_getlastmessage'
              'crack_opendict'
              'crc32'
              'create_function'
              'crypt'
              'ctype_alnum'
              'ctype_alpha'
              'ctype_cntrl'
              'ctype_digit'
              'ctype_graph'
              'ctype_lower'
              'ctype_print'
              'ctype_punct'
              'ctype_space'
              'ctype_upper'
              'ctype_xdigit'
              'curl_close'
              'curl_copy_handle'
              'curl_errno'
              'curl_error'
              'curl_exec'
              'curl_getinfo'
              'curl_init'
              'curl_multi_add_handle'
              'curl_multi_close'
              'curl_multi_exec'
              'curl_multi_getcontent'
              'curl_multi_info_read'
              'curl_multi_init'
              'curl_multi_remove_handle'
              'curl_multi_select'
              'curl_setopt'
              'curl_version'
              'current'
              'cybercash_base64_decode'
              'cybercash_base64_encode'
              'cybercash_decr'
              'cybercash_encr'
              'cyrus_authenticate'
              'cyrus_bind'
              'cyrus_close'
              'cyrus_connect'
              'cyrus_query'
              'cyrus_unbind'
              'date'
              'date_sunrise'
              'date_sunset'
              'dba_close'
              'dba_delete'
              'dba_exists'
              'dba_fetch'
              'dba_firstkey'
              'dba_handlers'
              'dba_insert'
              'dba_key_split'
              'dba_list'
              'dba_nextkey'
              'dba_open'
              'dba_optimize'
              'dba_popen'
              'dba_replace'
              'dba_sync'
              'dbase_add_record'
              'dbase_close'
              'dbase_create'
              'dbase_delete_record'
              'dbase_get_header_info'
              'dbase_get_record'
              'dbase_get_record_with_names'
              'dbase_numfields'
              'dbase_numrecords'
              'dbase_open'
              'dbase_pack'
              'dbase_replace_record'
              'dblist'
              'dbmclose'
              'dbmdelete'
              'dbmexists'
              'dbmfetch'
              'dbmfirstkey'
              'dbminsert'
              'dbmnextkey'
              'dbmopen'
              'dbmreplace'
              'dbplus_add'
              'dbplus_aql'
              'dbplus_chdir'
              'dbplus_close'
              'dbplus_curr'
              'dbplus_errcode'
              'dbplus_errno'
              'dbplus_find'
              'dbplus_first'
              'dbplus_flush'
              'dbplus_freealllocks'
              'dbplus_freelock'
              'dbplus_freerlocks'
              'dbplus_getlock'
              'dbplus_getunique'
              'dbplus_info'
              'dbplus_last'
              'dbplus_lockrel'
              'dbplus_next'
              'dbplus_open'
              'dbplus_prev'
              'dbplus_rchperm'
              'dbplus_rcreate'
              'dbplus_rcrtexact'
              'dbplus_rcrtlike'
              'dbplus_resolve'
              'dbplus_restorepos'
              'dbplus_rkeys'
              'dbplus_ropen'
              'dbplus_rquery'
              'dbplus_rrename'
              'dbplus_rsecindex'
              'dbplus_runlink'
              'dbplus_rzap'
              'dbplus_savepos'
              'dbplus_setindex'
              'dbplus_setindexbynumber'
              'dbplus_sql'
              'dbplus_tcl'
              'dbplus_tremove'
              'dbplus_undo'
              'dbplus_undoprepare'
              'dbplus_unlockrel'
              'dbplus_unselect'
              'dbplus_update'
              'dbplus_xlockrel'
              'dbplus_xunlockrel'
              'dbx_close'
              'dbx_compare'
              'dbx_connect'
              'dbx_error'
              'dbx_escape_string'
              'dbx_fetch_row'
              'dbx_query'
              'dbx_sort'
              'dcgettext'
              'dcngettext'
              'deaggregate'
              'debug_backtrace'
              'debug_print_backtrace'
              'debug_zval_dump'
              'debugger_off'
              'debugger_on'
              'decbin'
              'dechex'
              'decoct'
              'define'
              'define_syslog_variables'
              'defined'
              'deg2rad'
              'delete'
              'descriptor->free'
              'dgettext'
              'die'
              'dio_close'
              'dio_fcntl'
              'dio_open'
              'dio_read'
              'dio_seek'
              'dio_stat'
              'dio_tcsetattr'
              'dio_truncate'
              'dio_write'
              'dir'
              'DirectoryIterator::__construct'
              'DirectoryIterator::current'
              'DirectoryIterator::getATime'
              'DirectoryIterator::getChildren'
              'DirectoryIterator::getCTime'
              'DirectoryIterator::getFilename'
              'DirectoryIterator::getGroup'
              'DirectoryIterator::getInode'
              'DirectoryIterator::getMTime'
              'DirectoryIterator::getOwner'
              'DirectoryIterator::getPath'
              'DirectoryIterator::getPathname'
              'DirectoryIterator::getPerms'
              'DirectoryIterator::getSize'
              'DirectoryIterator::getType'
              'DirectoryIterator::isDir'
              'DirectoryIterator::isDot'
              'DirectoryIterator::isExecutable'
              'DirectoryIterator::isFile'
              'DirectoryIterator::isLink'
              'DirectoryIterator::isReadable'
              'DirectoryIterator::isWritable'
              'DirectoryIterator::key'
              'DirectoryIterator::next'
              'DirectoryIterator::rewind'
              'DirectoryIterator::valid'
              'dirname'
              'disk_free_space'
              'disk_total_space'
              'diskfreespace'
              'dl'
              'dngettext'
              'dns_check_record'
              'dns_get_mx'
              'dns_get_record'
              'dom_import_simplexml'
              'DOMAttr->isId'
              'DomAttribute->name'
              'DomAttribute->specified'
              'DomAttribute->value'
              'DOMCharacterData->appendData'
              'DOMCharacterData->deleteData'
              'DOMCharacterData->insertData'
              'DOMCharacterData->replaceData'
              'DOMCharacterData->substringData'
              'DOMDocument->__construct'
              'DomDocument->add_root'
              'DomDocument->create_attribute'
              'DomDocument->create_cdata_section'
              'DomDocument->create_comment'
              'DomDocument->create_element'
              'DomDocument->create_element_ns'
              'DomDocument->create_entity_reference'
              'DomDocument->create_processing_instruction'
              'DomDocument->create_text_node'
              'DOMDocument->createAttribute'
              'DOMDocument->createAttributeNS'
              'DOMDocument->createCDATASection'
              'DOMDocument->createComment'
              'DOMDocument->createDocumentFragment'
              'DOMDocument->createElement'
              'DOMDocument->createElementNS'
              'DOMDocument->createEntityReference'
              'DOMDocument->createProcessingInstruction'
              'DOMDocument->createTextNode'
              'DomDocument->doctype'
              'DomDocument->document_element'
              'DomDocument->dump_file'
              'DomDocument->dump_mem'
              'DomDocument->get_element_by_id'
              'DomDocument->get_elements_by_tagname'
              'DOMDocument->getElementById'
              'DOMDocument->getElementsByTagName'
              'DOMDocument->getElementsByTagNameNS()'
              'DomDocument->html_dump_mem'
              'DOMDocument->importNode'
              'DOMDocument->load'
              'DOMDocument->loadHTML'
              'DOMDocument->loadHTMLFile'
              'DOMDocument->loadXML'
              'DOMDocument->normalize'
              'DOMDocument->relaxNGValidate'
              'DOMDocument->relaxNGValidateSource'
              'DOMDocument->save'
              'DOMDocument->saveHTML()'
              'DOMDocument->saveHTMLFile()'
              'DOMDocument->saveXML()'
              'DOMDocument->schemaValidate'
              'DOMDocument->schemaValidateSource'
              'DOMDocument->validate'
              'DomDocument->xinclude'
              'DOMDocument->xinclude'
              'DomDocumentType->entities'
              'DomDocumentType->internal_subset'
              'DomDocumentType->name'
              'DomDocumentType->notations'
              'DomDocumentType->public_id'
              'DomDocumentType->system_id'
              'DomElement->get_attribute'
              'DomElement->get_attribute_node'
              'DomElement->get_elements_by_tagname'
              'DOMElement->getAttribute'
              'DOMElement->getAttributeNode'
              'DOMElement->getAttributeNodeNS'
              'DOMElement->getAttributeNS'
              'DOMElement->getElementsByTagName'
              'DOMElement->getElementsByTagNameNS'
              'DomElement->has_attribute'
              'DOMElement->hasAttribute'
              'DOMElement->hasAttributeNS'
              'DomElement->remove_attribute'
              'DOMElement->removeAttribute'
              'DOMElement->removeAttributeNode'
              'DOMElement->removeAttributeNS'
              'DomElement->set_attribute'
              'DOMElement->setAttribute'
              'DOMElement->setAttributeNode'
              'DOMElement->setAttributeNodeNS'
              'DOMElement->setAttributeNS'
              'DomElement->tagname'
              'DOMImplementation->createDocument'
              'DOMImplementation->createDocumentType'
              'DOMImplementation->hasFeature()'
              'DOMNamedNodeMap->getNamedItem'
              'DOMNamedNodeMap->getNamedItemNS'
              'DOMNamedNodeMap->item'
              'DomNode->add_namespace'
              'DomNode->append_child'
              'DomNode->append_sibling'
              'DOMNode->appendChild'
              'DomNode->attributes'
              'DomNode->child_nodes'
              'DomNode->clone_node'
              'DOMNode->cloneNode'
              'DomNode->dump_node'
              'DomNode->first_child'
              'DomNode->get_content'
              'DomNode->has_attributes'
              'DomNode->has_child_nodes'
              'DOMNode->hasAttributes'
              'DOMNode->hasChildNodes'
              'DomNode->insert_before'
              'DOMNode->insertBefore'
              'DomNode->is_blank_node'
              'DOMNode->isSameNode'
              'DOMNode->isSupported'
              'DomNode->last_child'
              'DOMNode->lookupNamespaceURI'
              'DOMNode->lookupPrefix'
              'DomNode->next_sibling'
              'DomNode->node_name'
              'DomNode->node_type'
              'DomNode->node_value'
              'DOMNode->normalize'
              'DomNode->owner_document'
              'DomNode->parent_node'
              'DomNode->prefix'
              'DomNode->previous_sibling'
              'DomNode->remove_child'
              'DOMNode->removeChild'
              'DomNode->replace_child'
              'DomNode->replace_node'
              'DOMNode->replaceChild'
              'DomNode->set_content'
              'DomNode->set_name'
              'DomNode->set_namespace'
              'DomNode->unlink_node'
              'DOMNodelist->item'
              'DomProcessingInstruction->data'
              'DomProcessingInstruction->target'
              'DOMStringList->item'
              'DOMText->isWhitespaceInElementContent'
              'DOMText->splitText'
              'domxml_new_doc'
              'domxml_open_file'
              'domxml_open_mem'
              'domxml_version'
              'domxml_xmltree'
              'domxml_xslt_stylesheet'
              'domxml_xslt_stylesheet_doc'
              'domxml_xslt_stylesheet_file'
              'DOMXPath->__construct'
              'DOMXPath->evaluate()'
              'DOMXPath->query'
              'DOMXPath->registerNamespace'
              'DomXsltStylesheet->process'
              'DomXsltStylesheet->result_dump_file'
              'DomXsltStylesheet->result_dump_mem'
              'dotnet'
              'dotnet_load'
              'doubleval'
              'each'
              'easter_date'
              'easter_days'
              'ebcdic2ascii'
              'echo'
              'empty'
              'end'
              'ereg'
              'ereg_replace'
              'eregi'
              'eregi_replace'
              'error_log'
              'error_reporting'
              'escapeshellarg'
              'escapeshellcmd'
              'eval'
              'exec'
              'exif_imagetype'
              'exif_read_data'
              'exif_tagname'
              'exif_thumbnail'
              'exit'
              'exp'
              'explode'
              'expm1'
              'extension_loaded'
              'extract'
              'ezmlm_hash'
              'fam_cancel_monitor'
              'fam_close'
              'fam_monitor_collection'
              'fam_monitor_directory'
              'fam_monitor_file'
              'fam_next_event'
              'fam_open'
              'fam_pending'
              'fam_resume_monitor'
              'fam_suspend_monitor'
              'fbsql_affected_rows'
              'fbsql_autocommit'
              'fbsql_blob_size'
              'fbsql_change_user'
              'fbsql_clob_size'
              'fbsql_close'
              'fbsql_commit'
              'fbsql_connect'
              'fbsql_create_blob'
              'fbsql_create_clob'
              'fbsql_create_db'
              'fbsql_data_seek'
              'fbsql_database'
              'fbsql_database_password'
              'fbsql_db_query'
              'fbsql_db_status'
              'fbsql_drop_db'
              'fbsql_errno'
              'fbsql_error'
              'fbsql_fetch_array'
              'fbsql_fetch_assoc'
              'fbsql_fetch_field'
              'fbsql_fetch_lengths'
              'fbsql_fetch_object'
              'fbsql_fetch_row'
              'fbsql_field_flags'
              'fbsql_field_len'
              'fbsql_field_name'
              'fbsql_field_seek'
              'fbsql_field_table'
              'fbsql_field_type'
              'fbsql_free_result'
              'fbsql_get_autostart_info'
              'fbsql_hostname'
              'fbsql_insert_id'
              'fbsql_list_dbs'
              'fbsql_list_fields'
              'fbsql_list_tables'
              'fbsql_next_result'
              'fbsql_num_fields'
              'fbsql_num_rows'
              'fbsql_password'
              'fbsql_pconnect'
              'fbsql_query'
              'fbsql_read_blob'
              'fbsql_read_clob'
              'fbsql_result'
              'fbsql_rollback'
              'fbsql_select_db'
              'fbsql_set_lob_mode'
              'fbsql_set_password'
              'fbsql_set_transaction'
              'fbsql_start_db'
              'fbsql_stop_db'
              'fbsql_tablename'
              'fbsql_username'
              'fbsql_warnings'
              'fclose'
              'fdf_add_doc_javascript'
              'fdf_add_template'
              'fdf_close'
              'fdf_create'
              'fdf_enum_values'
              'fdf_errno'
              'fdf_error'
              'fdf_get_ap'
              'fdf_get_attachment'
              'fdf_get_encoding'
              'fdf_get_file'
              'fdf_get_flags'
              'fdf_get_opt'
              'fdf_get_status'
              'fdf_get_value'
              'fdf_get_version'
              'fdf_header'
              'fdf_next_field_name'
              'fdf_open'
              'fdf_open_string'
              'fdf_remove_item'
              'fdf_save'
              'fdf_save_string'
              'fdf_set_ap'
              'fdf_set_encoding'
              'fdf_set_file'
              'fdf_set_flags'
              'fdf_set_javascript_action'
              'fdf_set_on_import_javascript'
              'fdf_set_opt'
              'fdf_set_status'
              'fdf_set_submit_form_action'
              'fdf_set_target_frame'
              'fdf_set_value'
              'fdf_set_version'
              'feof'
              'fflush'
              'fgetc'
              'fgetcsv'
              'fgets'
              'fgetss'
              'file'
              'file_exists'
              'file_get_contents'
              'file_put_contents'
              'fileatime'
              'filectime'
              'filegroup'
              'fileinode'
              'filemtime'
              'fileowner'
              'fileperms'
              'filepro'
              'filepro_fieldcount'
              'filepro_fieldname'
              'filepro_fieldtype'
              'filepro_fieldwidth'
              'filepro_retrieve'
              'filepro_rowcount'
              'filesize'
              'filetype'
              'FilterIterator::current'
              'FilterIterator::getInnerIterator'
              'FilterIterator::key'
              'FilterIterator::next'
              'FilterIterator::rewind'
              'FilterIterator::valid'
              'floatval'
              'flock'
              'floor'
              'flush'
              'fmod'
              'fnmatch'
              'fopen'
              'fpassthru'
              'fprintf'
              'fputcsv'
              'fputs'
              'fread'
              'frenchtojd'
              'fribidi_log2vis'
              'fscanf'
              'fseek'
              'fsockopen'
              'fstat'
              'ftell'
              'ftok'
              'ftp_alloc'
              'ftp_cdup'
              'ftp_chdir'
              'ftp_chmod'
              'ftp_close'
              'ftp_connect'
              'ftp_delete'
              'ftp_exec'
              'ftp_fget'
              'ftp_fput'
              'ftp_get'
              'ftp_get_option'
              'ftp_login'
              'ftp_mdtm'
              'ftp_mkdir'
              'ftp_nb_continue'
              'ftp_nb_fget'
              'ftp_nb_fput'
              'ftp_nb_get'
              'ftp_nb_put'
              'ftp_nlist'
              'ftp_pasv'
              'ftp_put'
              'ftp_pwd'
              'ftp_quit'
              'ftp_raw'
              'ftp_rawlist'
              'ftp_rename'
              'ftp_rmdir'
              'ftp_set_option'
              'ftp_site'
              'ftp_size'
              'ftp_ssl_connect'
              'ftp_systype'
              'ftruncate'
              'func_get_arg'
              'func_get_args'
              'func_num_args'
              'function_exists'
              'fwrite'
              'gd_info'
              'get_browser'
              'get_cfg_var'
              'get_class'
              'get_class_methods'
              'get_class_vars'
              'get_current_user'
              'get_declared_classes'
              'get_declared_interfaces'
              'get_defined_constants'
              'get_defined_functions'
              'get_defined_vars'
              'get_extension_funcs'
              'get_headers'
              'get_html_translation_table'
              'get_include_path'
              'get_included_files'
              'get_loaded_extensions'
              'get_magic_quotes_gpc'
              'get_magic_quotes_runtime'
              'get_meta_tags'
              'get_object_vars'
              'get_parent_class'
              'get_required_files'
              'get_resource_type'
              'getallheaders'
              'getcwd'
              'getdate'
              'getenv'
              'gethostbyaddr'
              'gethostbyname'
              'gethostbynamel'
              'getimagesize'
              'getlastmod'
              'getmxrr'
              'getmygid'
              'getmyinode'
              'getmypid'
              'getmyuid'
              'getopt'
              'getprotobyname'
              'getprotobynumber'
              'getrandmax'
              'getrusage'
              'getservbyname'
              'getservbyport'
              'gettext'
              'gettimeofday'
              'gettype'
              'glob'
              'gmdate'
              'gmmktime'
              'gmp_abs'
              'gmp_add'
              'gmp_and'
              'gmp_clrbit'
              'gmp_cmp'
              'gmp_com'
              'gmp_div'
              'gmp_div_q'
              'gmp_div_qr'
              'gmp_div_r'
              'gmp_divexact'
              'gmp_fact'
              'gmp_gcd'
              'gmp_gcdext'
              'gmp_hamdist'
              'gmp_init'
              'gmp_intval'
              'gmp_invert'
              'gmp_jacobi'
              'gmp_legendre'
              'gmp_mod'
              'gmp_mul'
              'gmp_neg'
              'gmp_or'
              'gmp_perfect_square'
              'gmp_popcount'
              'gmp_pow'
              'gmp_powm'
              'gmp_prob_prime'
              'gmp_random'
              'gmp_scan0'
              'gmp_scan1'
              'gmp_setbit'
              'gmp_sign'
              'gmp_sqrt'
              'gmp_sqrtrem'
              'gmp_strval'
              'gmp_sub'
              'gmp_xor'
              'gmstrftime'
              'gregoriantojd'
              'gzclose'
              'gzcompress'
              'gzdeflate'
              'gzencode'
              'gzeof'
              'gzfile'
              'gzgetc'
              'gzgets'
              'gzgetss'
              'gzinflate'
              'gzopen'
              'gzpassthru'
              'gzputs'
              'gzread'
              'gzrewind'
              'gzseek'
              'gztell'
              'gzuncompress'
              'gzwrite'
              'header'
              'headers_list'
              'headers_sent'
              'hebrev'
              'hebrevc'
              'hexdec'
              'highlight_file'
              'highlight_string'
              'html_entity_decode'
              'htmlentities'
              'htmlspecialchars'
              'http_build_query'
              'hw_api_attribute'
              'hw_api_attribute->key'
              'hw_api_attribute->langdepvalue'
              'hw_api_attribute->value'
              'hw_api_attribute->values'
              'hw_api_content'
              'hw_api_content->mimetype'
              'hw_api_content->read'
              'hw_api_error->count'
              'hw_api_error->reason'
              'hw_api_object'
              'hw_api_object->assign'
              'hw_api_object->attreditable'
              'hw_api_object->count'
              'hw_api_object->insert'
              'hw_api_object->remove'
              'hw_api_object->title'
              'hw_api_object->value'
              'hw_api_reason->description'
              'hw_api_reason->type'
              'hw_api->checkin'
              'hw_api->checkout'
              'hw_api->children'
              'hw_api->content'
              'hw_api->copy'
              'hw_api->dbstat'
              'hw_api->dcstat'
              'hw_api->dstanchors'
              'hw_api->dstofsrcanchor'
              'hw_api->find'
              'hw_api->ftstat'
              'hw_api->hwstat'
              'hw_api->identify'
              'hw_api->info'
              'hw_api->insert'
              'hw_api->insertanchor'
              'hw_api->insertcollection'
              'hw_api->insertdocument'
              'hw_api->link'
              'hw_api->lock'
              'hw_api->move'
              'hw_api->object'
              'hw_api->objectbyanchor'
              'hw_api->parents'
              'hw_api->remove'
              'hw_api->replace'
              'hw_api->setcommittedversion'
              'hw_api->srcanchors'
              'hw_api->srcsofdst'
              'hw_api->unlock'
              'hw_api->user'
              'hw_api->userlist'
              'hw_array2objrec'
              'hw_changeobject'
              'hw_children'
              'hw_childrenobj'
              'hw_close'
              'hw_connect'
              'hw_connection_info'
              'hw_cp'
              'hw_deleteobject'
              'hw_docbyanchor'
              'hw_docbyanchorobj'
              'hw_document_attributes'
              'hw_document_bodytag'
              'hw_document_content'
              'hw_document_setcontent'
              'hw_document_size'
              'hw_dummy'
              'hw_edittext'
              'hw_error'
              'hw_errormsg'
              'hw_free_document'
              'hw_getanchors'
              'hw_getanchorsobj'
              'hw_getandlock'
              'hw_getchildcoll'
              'hw_getchildcollobj'
              'hw_getchilddoccoll'
              'hw_getchilddoccollobj'
              'hw_getobject'
              'hw_getobjectbyquery'
              'hw_getobjectbyquerycoll'
              'hw_getobjectbyquerycollobj'
              'hw_getobjectbyqueryobj'
              'hw_getparents'
              'hw_getparentsobj'
              'hw_getrellink'
              'hw_getremote'
              'hw_getremotechildren'
              'hw_getsrcbydestobj'
              'hw_gettext'
              'hw_getusername'
              'hw_identify'
              'hw_incollections'
              'hw_info'
              'hw_inscoll'
              'hw_insdoc'
              'hw_insertanchors'
              'hw_insertdocument'
              'hw_insertobject'
              'hw_mapid'
              'hw_modifyobject'
              'hw_mv'
              'hw_new_document'
              'hw_objrec2array'
              'hw_output_document'
              'hw_pconnect'
              'hw_pipedocument'
              'hw_root'
              'hw_setlinkroot'
              'hw_stat'
              'hw_unlock'
              'hw_who'
              'hwapi_hgcsp'
              'hypot'
              'ibase_add_user'
              'ibase_affected_rows'
              'ibase_backup'
              'ibase_blob_add'
              'ibase_blob_cancel'
              'ibase_blob_close'
              'ibase_blob_create'
              'ibase_blob_echo'
              'ibase_blob_get'
              'ibase_blob_import'
              'ibase_blob_info'
              'ibase_blob_open'
              'ibase_close'
              'ibase_commit'
              'ibase_commit_ret'
              'ibase_connect'
              'ibase_db_info'
              'ibase_delete_user'
              'ibase_drop_db'
              'ibase_errcode'
              'ibase_errmsg'
              'ibase_execute'
              'ibase_fetch_assoc'
              'ibase_fetch_object'
              'ibase_fetch_row'
              'ibase_field_info'
              'ibase_free_event_handler'
              'ibase_free_query'
              'ibase_free_result'
              'ibase_gen_id'
              'ibase_maintain_db'
              'ibase_modify_user'
              'ibase_name_result'
              'ibase_num_fields'
              'ibase_num_params'
              'ibase_param_info'
              'ibase_pconnect'
              'ibase_prepare'
              'ibase_query'
              'ibase_restore'
              'ibase_rollback'
              'ibase_rollback_ret'
              'ibase_server_info'
              'ibase_service_attach'
              'ibase_service_detach'
              'ibase_set_event_handler'
              'ibase_timefmt'
              'ibase_trans'
              'ibase_wait_event'
              'iconv'
              'iconv_get_encoding'
              'iconv_mime_decode'
              'iconv_mime_decode_headers'
              'iconv_mime_encode'
              'iconv_set_encoding'
              'iconv_strlen'
              'iconv_strpos'
              'iconv_strrpos'
              'iconv_substr'
              'id3_get_frame_long_name'
              'id3_get_frame_short_name'
              'id3_get_genre_id'
              'id3_get_genre_list'
              'id3_get_genre_name'
              'id3_get_tag'
              'id3_get_version'
              'id3_remove_tag'
              'id3_set_tag'
              'idate'
              'ifx_affected_rows'
              'ifx_blobinfile_mode'
              'ifx_byteasvarchar'
              'ifx_close'
              'ifx_connect'
              'ifx_copy_blob'
              'ifx_create_blob'
              'ifx_create_char'
              'ifx_do'
              'ifx_error'
              'ifx_errormsg'
              'ifx_fetch_row'
              'ifx_fieldproperties'
              'ifx_fieldtypes'
              'ifx_free_blob'
              'ifx_free_char'
              'ifx_free_result'
              'ifx_get_blob'
              'ifx_get_char'
              'ifx_getsqlca'
              'ifx_htmltbl_result'
              'ifx_nullformat'
              'ifx_num_fields'
              'ifx_num_rows'
              'ifx_pconnect'
              'ifx_prepare'
              'ifx_query'
              'ifx_textasvarchar'
              'ifx_update_blob'
              'ifx_update_char'
              'ifxus_close_slob'
              'ifxus_create_slob'
              'ifxus_free_slob'
              'ifxus_open_slob'
              'ifxus_read_slob'
              'ifxus_seek_slob'
              'ifxus_tell_slob'
              'ifxus_write_slob'
              'ignore_user_abort'
              'image_type_to_extension'
              'image_type_to_mime_type'
              'image2wbmp'
              'imagealphablending'
              'imageantialias'
              'imagearc'
              'imagechar'
              'imagecharup'
              'imagecolorallocate'
              'imagecolorallocatealpha'
              'imagecolorat'
              'imagecolorclosest'
              'imagecolorclosestalpha'
              'imagecolorclosesthwb'
              'imagecolordeallocate'
              'imagecolorexact'
              'imagecolorexactalpha'
              'imagecolormatch'
              'imagecolorresolve'
              'imagecolorresolvealpha'
              'imagecolorset'
              'imagecolorsforindex'
              'imagecolorstotal'
              'imagecolortransparent'
              'imagecopy'
              'imagecopymerge'
              'imagecopymergegray'
              'imagecopyresampled'
              'imagecopyresized'
              'imagecreate'
              'imagecreatefromgd'
              'imagecreatefromgd2'
              'imagecreatefromgd2part'
              'imagecreatefromgif'
              'imagecreatefromjpeg'
              'imagecreatefrompng'
              'imagecreatefromstring'
              'imagecreatefromwbmp'
              'imagecreatefromxbm'
              'imagecreatefromxpm'
              'imagecreatetruecolor'
              'imagedashedline'
              'imagedestroy'
              'imageellipse'
              'imagefill'
              'imagefilledarc'
              'imagefilledellipse'
              'imagefilledpolygon'
              'imagefilledrectangle'
              'imagefilltoborder'
              'imagefilter'
              'imagefontheight'
              'imagefontwidth'
              'imageftbbox'
              'imagefttext'
              'imagegammacorrect'
              'imagegd'
              'imagegd2'
              'imagegif'
              'imageinterlace'
              'imageistruecolor'
              'imagejpeg'
              'imagelayereffect'
              'imageline'
              'imageloadfont'
              'imagepalettecopy'
              'imagepng'
              'imagepolygon'
              'imagepsbbox'
              'imagepscopyfont'
              'imagepsencodefont'
              'imagepsextendfont'
              'imagepsfreefont'
              'imagepsloadfont'
              'imagepsslantfont'
              'imagepstext'
              'imagerectangle'
              'imagerotate'
              'imagesavealpha'
              'imagesetbrush'
              'imagesetpixel'
              'imagesetstyle'
              'imagesetthickness'
              'imagesettile'
              'imagestring'
              'imagestringup'
              'imagesx'
              'imagesy'
              'imagetruecolortopalette'
              'imagettfbbox'
              'imagettftext'
              'imagetypes'
              'imagewbmp'
              'imagexbm'
              'imap_8bit'
              'imap_alerts'
              'imap_append'
              'imap_base64'
              'imap_binary'
              'imap_body'
              'imap_bodystruct'
              'imap_check'
              'imap_clearflag_full'
              'imap_close'
              'imap_createmailbox'
              'imap_delete'
              'imap_deletemailbox'
              'imap_errors'
              'imap_expunge'
              'imap_fetch_overview'
              'imap_fetchbody'
              'imap_fetchheader'
              'imap_fetchstructure'
              'imap_get_quota'
              'imap_get_quotaroot'
              'imap_getacl'
              'imap_getmailboxes'
              'imap_getsubscribed'
              'imap_header'
              'imap_headerinfo'
              'imap_headers'
              'imap_last_error'
              'imap_list'
              'imap_listmailbox'
              'imap_listscan'
              'imap_listsubscribed'
              'imap_lsub'
              'imap_mail'
              'imap_mail_compose'
              'imap_mail_copy'
              'imap_mail_move'
              'imap_mailboxmsginfo'
              'imap_mime_header_decode'
              'imap_msgno'
              'imap_num_msg'
              'imap_num_recent'
              'imap_open'
              'imap_ping'
              'imap_qprint'
              'imap_renamemailbox'
              'imap_reopen'
              'imap_rfc822_parse_adrlist'
              'imap_rfc822_parse_headers'
              'imap_rfc822_write_address'
              'imap_scanmailbox'
              'imap_search'
              'imap_set_quota'
              'imap_setacl'
              'imap_setflag_full'
              'imap_sort'
              'imap_status'
              'imap_subscribe'
              'imap_thread'
              'imap_timeout'
              'imap_uid'
              'imap_undelete'
              'imap_unsubscribe'
              'imap_utf7_decode'
              'imap_utf7_encode'
              'imap_utf8'
              'implode'
              'import_request_variables'
              'in_array'
              'inet_ntop'
              'inet_pton'
              'ingres_autocommit'
              'ingres_close'
              'ingres_commit'
              'ingres_connect'
              'ingres_fetch_array'
              'ingres_fetch_object'
              'ingres_fetch_row'
              'ingres_field_length'
              'ingres_field_name'
              'ingres_field_nullable'
              'ingres_field_precision'
              'ingres_field_scale'
              'ingres_field_type'
              'ingres_num_fields'
              'ingres_num_rows'
              'ingres_pconnect'
              'ingres_query'
              'ingres_rollback'
              'ini_alter'
              'ini_get'
              'ini_get_all'
              'ini_restore'
              'ini_set'
              'interface_exists'
              'intval'
              'ip2long'
              'iptcembed'
              'iptcparse'
              'ircg_channel_mode'
              'ircg_disconnect'
              'ircg_eval_ecmascript_params'
              'ircg_fetch_error_msg'
              'ircg_get_username'
              'ircg_html_encode'
              'ircg_ignore_add'
              'ircg_ignore_del'
              'ircg_invite'
              'ircg_is_conn_alive'
              'ircg_join'
              'ircg_kick'
              'ircg_list'
              'ircg_lookup_format_messages'
              'ircg_lusers'
              'ircg_msg'
              'ircg_names'
              'ircg_nick'
              'ircg_nickname_escape'
              'ircg_nickname_unescape'
              'ircg_notice'
              'ircg_oper'
              'ircg_part'
              'ircg_pconnect'
              'ircg_register_format_messages'
              'ircg_set_current'
              'ircg_set_file'
              'ircg_set_on_die'
              'ircg_topic'
              'ircg_who'
              'ircg_whois'
              'is_a'
              'is_array'
              'is_bool'
              'is_callable'
              'is_dir'
              'is_double'
              'is_executable'
              'is_file'
              'is_finite'
              'is_float'
              'is_infinite'
              'is_int'
              'is_integer'
              'is_link'
              'is_long'
              'is_nan'
              'is_null'
              'is_numeric'
              'is_object'
              'is_readable'
              'is_real'
              'is_resource'
              'is_scalar'
              'is_soap_fault'
              'is_string'
              'is_subclass_of'
              'is_uploaded_file'
              'is_writable'
              'is_writeable'
              'isset'
              'iterator_count'
              'iterator-to-array'
              'java_last_exception_clear'
              'java_last_exception_get'
              'jddayofweek'
              'jdmonthname'
              'jdtofrench'
              'jdtogregorian'
              'jdtojewish'
              'jdtojulian'
              'jdtounix'
              'jewishtojd'
              'join'
              'jpeg2wbmp'
              'juliantojd'
              'key'
              'krsort'
              'ksort'
              'lcg_value'
              'ldap_8859_to_t61'
              'ldap_add'
              'ldap_bind'
              'ldap_close'
              'ldap_compare'
              'ldap_connect'
              'ldap_count_entries'
              'ldap_delete'
              'ldap_dn2ufn'
              'ldap_err2str'
              'ldap_errno'
              'ldap_error'
              'ldap_explode_dn'
              'ldap_first_attribute'
              'ldap_first_entry'
              'ldap_first_reference'
              'ldap_free_result'
              'ldap_get_attributes'
              'ldap_get_dn'
              'ldap_get_entries'
              'ldap_get_option'
              'ldap_get_values'
              'ldap_get_values_len'
              'ldap_list'
              'ldap_mod_add'
              'ldap_mod_del'
              'ldap_mod_replace'
              'ldap_modify'
              'ldap_next_attribute'
              'ldap_next_entry'
              'ldap_next_reference'
              'ldap_parse_reference'
              'ldap_parse_result'
              'ldap_read'
              'ldap_rename'
              'ldap_sasl_bind'
              'ldap_search'
              'ldap_set_option'
              'ldap_set_rebind_proc'
              'ldap_sort'
              'ldap_start_tls'
              'ldap_t61_to_8859'
              'ldap_unbind'
              'levenshtein'
              'LimitIterator::getPosition'
              'LimitIterator::next'
              'LimitIterator::rewind'
              'LimitIterator::seek'
              'LimitIterator::valid'
              'link'
              'linkinfo'
              'list'
              'lob->append'
              'lob->close'
              'lob->eof'
              'lob->erase'
              'lob->export'
              'lob->flush'
              'lob->getBuffering'
              'lob->import'
              'lob->load'
              'lob->read'
              'lob->rewind'
              'lob->save'
              'lob->seek'
              'lob->setBuffering'
              'lob->size'
              'lob->tell'
              'lob->truncate'
              'lob->write'
              'lob->writeTemporary'
              'localeconv'
              'localtime'
              'log'
              'log10'
              'log1p'
              'long2ip'
              'lstat'
              'ltrim'
              'lzf_compress'
              'lzf_decompress'
              'lzf_optimized_for'
              'mail'
              'mailparse_determine_best_xfer_encoding'
              'mailparse_msg_create'
              'mailparse_msg_extract_part'
              'mailparse_msg_extract_part_file'
              'mailparse_msg_free'
              'mailparse_msg_get_part'
              'mailparse_msg_get_part_data'
              'mailparse_msg_get_structure'
              'mailparse_msg_parse'
              'mailparse_msg_parse_file'
              'mailparse_rfc822_parse_addresses'
              'mailparse_stream_encode'
              'mailparse_uudecode_all'
              'main'
              'max'
              'mb_convert_case'
              'mb_convert_encoding'
              'mb_convert_kana'
              'mb_convert_variables'
              'mb_decode_mimeheader'
              'mb_decode_numericentity'
              'mb_detect_encoding'
              'mb_detect_order'
              'mb_encode_mimeheader'
              'mb_encode_numericentity'
              'mb_ereg'
              'mb_ereg_match'
              'mb_ereg_replace'
              'mb_ereg_search'
              'mb_ereg_search_getpos'
              'mb_ereg_search_getregs'
              'mb_ereg_search_init'
              'mb_ereg_search_pos'
              'mb_ereg_search_regs'
              'mb_ereg_search_setpos'
              'mb_eregi'
              'mb_eregi_replace'
              'mb_get_info'
              'mb_http_input'
              'mb_http_output'
              'mb_internal_encoding'
              'mb_language'
              'mb_list_encodings'
              'mb_output_handler'
              'mb_parse_str'
              'mb_preferred_mime_name'
              'mb_regex_encoding'
              'mb_regex_set_options'
              'mb_send_mail'
              'mb_split'
              'mb_strcut'
              'mb_strimwidth'
              'mb_strlen'
              'mb_strpos'
              'mb_strrpos'
              'mb_strtolower'
              'mb_strtoupper'
              'mb_strwidth'
              'mb_substitute_character'
              'mb_substr'
              'mb_substr_count'
              'mcal_append_event'
              'mcal_close'
              'mcal_create_calendar'
              'mcal_date_compare'
              'mcal_date_valid'
              'mcal_day_of_week'
              'mcal_day_of_year'
              'mcal_days_in_month'
              'mcal_delete_calendar'
              'mcal_delete_event'
              'mcal_event_add_attribute'
              'mcal_event_init'
              'mcal_event_set_alarm'
              'mcal_event_set_category'
              'mcal_event_set_class'
              'mcal_event_set_description'
              'mcal_event_set_end'
              'mcal_event_set_recur_daily'
              'mcal_event_set_recur_monthly_mday'
              'mcal_event_set_recur_monthly_wday'
              'mcal_event_set_recur_none'
              'mcal_event_set_recur_weekly'
              'mcal_event_set_recur_yearly'
              'mcal_event_set_start'
              'mcal_event_set_title'
              'mcal_expunge'
              'mcal_fetch_current_stream_event'
              'mcal_fetch_event'
              'mcal_is_leap_year'
              'mcal_list_alarms'
              'mcal_list_events'
              'mcal_next_recurrence'
              'mcal_open'
              'mcal_popen'
              'mcal_rename_calendar'
              'mcal_reopen'
              'mcal_snooze'
              'mcal_store_event'
              'mcal_time_valid'
              'mcal_week_of_year'
              'mcrypt_cbc'
              'mcrypt_cfb'
              'mcrypt_create_iv'
              'mcrypt_decrypt'
              'mcrypt_ecb'
              'mcrypt_enc_get_algorithms_name'
              'mcrypt_enc_get_block_size'
              'mcrypt_enc_get_iv_size'
              'mcrypt_enc_get_key_size'
              'mcrypt_enc_get_modes_name'
              'mcrypt_enc_get_supported_key_sizes'
              'mcrypt_enc_is_block_algorithm'
              'mcrypt_enc_is_block_algorithm_mode'
              'mcrypt_enc_is_block_mode'
              'mcrypt_enc_self_test'
              'mcrypt_encrypt'
              'mcrypt_generic'
              'mcrypt_generic_deinit'
              'mcrypt_generic_end'
              'mcrypt_generic_init'
              'mcrypt_get_block_size'
              'mcrypt_get_cipher_name'
              'mcrypt_get_iv_size'
              'mcrypt_get_key_size'
              'mcrypt_list_algorithms'
              'mcrypt_list_modes'
              'mcrypt_module_close'
              'mcrypt_module_get_algo_block_size'
              'mcrypt_module_get_algo_key_size'
              'mcrypt_module_get_supported_key_sizes'
              'mcrypt_module_is_block_algorithm'
              'mcrypt_module_is_block_algorithm_mode'
              'mcrypt_module_is_block_mode'
              'mcrypt_module_open'
              'mcrypt_module_self_test'
              'mcrypt_ofb'
              'mcve_adduser'
              'mcve_adduserarg'
              'mcve_bt'
              'mcve_checkstatus'
              'mcve_chkpwd'
              'mcve_chngpwd'
              'mcve_completeauthorizations'
              'mcve_connect'
              'mcve_connectionerror'
              'mcve_deleteresponse'
              'mcve_deletetrans'
              'mcve_deleteusersetup'
              'mcve_deluser'
              'mcve_destroyconn'
              'mcve_destroyengine'
              'mcve_disableuser'
              'mcve_edituser'
              'mcve_enableuser'
              'mcve_force'
              'mcve_getcell'
              'mcve_getcellbynum'
              'mcve_getcommadelimited'
              'mcve_getheader'
              'mcve_getuserarg'
              'mcve_getuserparam'
              'mcve_gft'
              'mcve_gl'
              'mcve_gut'
              'mcve_initconn'
              'mcve_initengine'
              'mcve_initusersetup'
              'mcve_iscommadelimited'
              'mcve_liststats'
              'mcve_listusers'
              'mcve_maxconntimeout'
              'mcve_monitor'
              'mcve_numcolumns'
              'mcve_numrows'
              'mcve_override'
              'mcve_parsecommadelimited'
              'mcve_ping'
              'mcve_preauth'
              'mcve_preauthcompletion'
              'mcve_qc'
              'mcve_responseparam'
              'mcve_return'
              'mcve_returncode'
              'mcve_returnstatus'
              'mcve_sale'
              'mcve_setblocking'
              'mcve_setdropfile'
              'mcve_setip'
              'mcve_setssl'
              'mcve_setssl_files'
              'mcve_settimeout'
              'mcve_settle'
              'mcve_text_avs'
              'mcve_text_code'
              'mcve_text_cv'
              'mcve_transactionauth'
              'mcve_transactionavs'
              'mcve_transactionbatch'
              'mcve_transactioncv'
              'mcve_transactionid'
              'mcve_transactionitem'
              'mcve_transactionssent'
              'mcve_transactiontext'
              'mcve_transinqueue'
              'mcve_transnew'
              'mcve_transparam'
              'mcve_transsend'
              'mcve_ub'
              'mcve_uwait'
              'mcve_verifyconnection'
              'mcve_verifysslcert'
              'mcve_void'
              'md5'
              'md5_file'
              'mdecrypt_generic'
              'Memcache::add'
              'Memcache::close'
              'Memcache::connect'
              'Memcache::decrement'
              'Memcache::delete'
              'Memcache::flush'
              'Memcache::get'
              'Memcache::getStats'
              'Memcache::getVersion'
              'Memcache::increment'
              'Memcache::pconnect'
              'Memcache::replace'
              'Memcache::set'
              'memcache_debug'
              'memory_get_usage'
              'metaphone'
              'method_exists'
              'mhash'
              'mhash_count'
              'mhash_get_block_size'
              'mhash_get_hash_name'
              'mhash_keygen_s2k'
              'microtime'
              'mime_content_type'
              'min'
              'ming_setcubicthreshold'
              'ming_setscale'
              'ming_useswfversion'
              'mkdir'
              'mktime'
              'money_format'
              'move_uploaded_file'
              'msession_connect'
              'msession_count'
              'msession_create'
              'msession_destroy'
              'msession_disconnect'
              'msession_find'
              'msession_get'
              'msession_get_array'
              'msession_get_data'
              'msession_inc'
              'msession_list'
              'msession_listvar'
              'msession_lock'
              'msession_plugin'
              'msession_randstr'
              'msession_set'
              'msession_set_array'
              'msession_set_data'
              'msession_timeout'
              'msession_uniq'
              'msession_unlock'
              'msg_get_queue'
              'msg_receive'
              'msg_remove_queue'
              'msg_send'
              'msg_set_queue'
              'msg_stat_queue'
              'msql'
              'msql_affected_rows'
              'msql_close'
              'msql_connect'
              'msql_create_db'
              'msql_createdb'
              'msql_data_seek'
              'msql_db_query'
              'msql_dbname'
              'msql_drop_db'
              'msql_error'
              'msql_fetch_array'
              'msql_fetch_field'
              'msql_fetch_object'
              'msql_fetch_row'
              'msql_field_flags'
              'msql_field_len'
              'msql_field_name'
              'msql_field_seek'
              'msql_field_table'
              'msql_field_type'
              'msql_fieldflags'
              'msql_fieldlen'
              'msql_fieldname'
              'msql_fieldtable'
              'msql_fieldtype'
              'msql_free_result'
              'msql_list_dbs'
              'msql_list_fields'
              'msql_list_tables'
              'msql_num_fields'
              'msql_num_rows'
              'msql_numfields'
              'msql_numrows'
              'msql_pconnect'
              'msql_query'
              'msql_regcase'
              'msql_result'
              'msql_select_db'
              'msql_tablename'
              'mssql_bind'
              'mssql_close'
              'mssql_connect'
              'mssql_data_seek'
              'mssql_execute'
              'mssql_fetch_array'
              'mssql_fetch_assoc'
              'mssql_fetch_batch'
              'mssql_fetch_field'
              'mssql_fetch_object'
              'mssql_fetch_row'
              'mssql_field_length'
              'mssql_field_name'
              'mssql_field_seek'
              'mssql_field_type'
              'mssql_free_result'
              'mssql_free_statement'
              'mssql_get_last_message'
              'mssql_guid_string'
              'mssql_init'
              'mssql_min_error_severity'
              'mssql_min_message_severity'
              'mssql_next_result'
              'mssql_num_fields'
              'mssql_num_rows'
              'mssql_pconnect'
              'mssql_query'
              'mssql_result'
              'mssql_rows_affected'
              'mssql_select_db'
              'mt_getrandmax'
              'mt_rand'
              'mt_srand'
              'muscat_close'
              'muscat_get'
              'muscat_give'
              'muscat_setup'
              'muscat_setup_net'
              'mysql_affected_rows'
              'mysql_change_user'
              'mysql_client_encoding'
              'mysql_close'
              'mysql_connect'
              'mysql_create_db'
              'mysql_data_seek'
              'mysql_db_name'
              'mysql_db_query'
              'mysql_drop_db'
              'mysql_errno'
              'mysql_error'
              'mysql_escape_string'
              'mysql_fetch_array'
              'mysql_fetch_assoc'
              'mysql_fetch_field'
              'mysql_fetch_lengths'
              'mysql_fetch_object'
              'mysql_fetch_row'
              'mysql_field_flags'
              'mysql_field_len'
              'mysql_field_name'
              'mysql_field_seek'
              'mysql_field_table'
              'mysql_field_type'
              'mysql_free_result'
              'mysql_get_client_info'
              'mysql_get_host_info'
              'mysql_get_proto_info'
              'mysql_get_server_info'
              'mysql_info'
              'mysql_insert_id'
              'mysql_list_dbs'
              'mysql_list_fields'
              'mysql_list_processes'
              'mysql_list_tables'
              'mysql_num_fields'
              'mysql_num_rows'
              'mysql_pconnect'
              'mysql_ping'
              'mysql_query'
              'mysql_real_escape_string'
              'mysql_result'
              'mysql_select_db'
              'mysql_set_charset'
              'mysql_stat'
              'mysql_tablename'
              'mysql_thread_id'
              'mysql_unbuffered_query'
              'mysqli()'
              'mysqli_affected_rows'
              'mysqli_autocommit'
              'mysqli_bind_param'
              'mysqli_bind_result'
              'mysqli_change_user'
              'mysqli_character_set_name'
              'mysqli_client_encoding'
              'mysqli_close'
              'mysqli_commit'
              'mysqli_connect'
              'mysqli_connect_errno'
              'mysqli_connect_error'
              'mysqli_data_seek'
              'mysqli_debug'
              'mysqli_disable_reads_from_master'
              'mysqli_disable_rpl_parse'
              'mysqli_dump_debug_info'
              'mysqli_embedded_connect'
              'mysqli_enable_reads_from_master'
              'mysqli_enable_rpl_parse'
              'mysqli_errno'
              'mysqli_error'
              'mysqli_escape_string'
              'mysqli_execute'
              'mysqli_fetch'
              'mysqli_fetch_array'
              'mysqli_fetch_assoc'
              'mysqli_fetch_field'
              'mysqli_fetch_field_direct'
              'mysqli_fetch_fields'
              'mysqli_fetch_lengths'
              'mysqli_fetch_object'
              'mysqli_fetch_row'
              'mysqli_field_count'
              'mysqli_field_seek'
              'mysqli_field_tell'
              'mysqli_free_result'
              'mysqli_get_client_info'
              'mysqli_get_client_version'
              'mysqli_get_host_info'
              'mysqli_get_metadata'
              'mysqli_get_proto_info'
              'mysqli_get_server_info'
              'mysqli_get_server_version'
              'mysqli_info'
              'mysqli_init'
              'mysqli_insert_id'
              'mysqli_kill'
              'mysqli_master_query'
              'mysqli_more_results'
              'mysqli_multi_query'
              'mysqli_next_result'
              'mysqli_num_fields'
              'mysqli_num_rows'
              'mysqli_options'
              'mysqli_param_count'
              'mysqli_ping'
              'mysqli_prepare'
              'mysqli_query'
              'mysqli_real_connect'
              'mysqli_real_escape_string'
              'mysqli_real_query'
              'mysqli_report'
              'mysqli_rollback'
              'mysqli_rpl_parse_enabled'
              'mysqli_rpl_probe'
              'mysqli_rpl_query_type'
              'mysqli_select_db'
              'mysqli_send_long_data'
              'mysqli_send_query'
              'mysqli_server_end'
              'mysqli_server_init'
              'mysqli_set_charset'
              'mysqli_set_opt'
              'mysqli_sqlstate'
              'mysqli_ssl_set'
              'mysqli_stat'
              'mysqli_stmt_affected_rows'
              'mysqli_stmt_bind_param'
              'mysqli_stmt_bind_result'
              'mysqli_stmt_close'
              'mysqli_stmt_data_seek'
              'mysqli_stmt_errno'
              'mysqli_stmt_error'
              'mysqli_stmt_execute'
              'mysqli_stmt_fetch'
              'mysqli_stmt_free_result'
              'mysqli_stmt_init'
              'mysqli_stmt_num_rows'
              'mysqli_stmt_param_count'
              'mysqli_stmt_prepare'
              'mysqli_stmt_reset'
              'mysqli_stmt_result_metadata'
              'mysqli_stmt_send_long_data'
              'mysqli_stmt_sqlstate'
              'mysqli_stmt_store_result'
              'mysqli_stmt->affected_rows'
              'mysqli_stmt->close'
              'mysqli_stmt->errno'
              'mysqli_stmt->error'
              'mysqli_stmt->store_result'
              'mysqli_store_result'
              'mysqli_thread_id'
              'mysqli_thread_safe'
              'mysqli_use_result'
              'mysqli_warning_count'
              'mysqli->affected_rows'
              'mysqli->autocommit'
              'mysqli->change_user'
              'mysqli->character_set_name'
              'mysqli->close'
              'mysqli->commit'
              'mysqli->disable_reads_from_master'
              'mysqli->dump_debug_info'
              'mysqli->errno'
              'mysqli->fetch_assoc'
              'mysqli->field_count'
              'mysqli->get_host_info'
              'mysqli->info'
              'mysqli->insert_id'
              'mysqli->kill'
              'mysqli->more_results'
              'mysqli->multi_query'
              'mysqli->next_result'
              'mysqli->options'
              'mysqli->ping'
              'mysqli->prepare'
              'mysqli->protocol_version'
              'mysqli->query'
              'mysqli->real_connect'
              'mysqli->real_escape_string'
              'mysqli->real_query'
              'mysqli->rollback'
              'mysqli->rpl_query_type'
              'mysqli->select_db'
              'mysqli->send_query'
              'mysqli->server_info'
              'mysqli->sqlstate'
              'mysqli->ssl_set'
              'mysqli->stat'
              'mysqli->stmt_init'
              'mysqli->store_result'
              'mysqli->thread_id'
              'mysqli->use_result'
              'mysqli->warning_count'
              'natcasesort'
              'natsort'
              'ncurses_addch'
              'ncurses_addchnstr'
              'ncurses_addchstr'
              'ncurses_addnstr'
              'ncurses_addstr'
              'ncurses_assume_default_colors'
              'ncurses_attroff'
              'ncurses_attron'
              'ncurses_attrset'
              'ncurses_baudrate'
              'ncurses_beep'
              'ncurses_bkgd'
              'ncurses_bkgdset'
              'ncurses_border'
              'ncurses_bottom_panel'
              'ncurses_can_change_color'
              'ncurses_cbreak'
              'ncurses_clear'
              'ncurses_clrtobot'
              'ncurses_clrtoeol'
              'ncurses_color_content'
              'ncurses_color_set'
              'ncurses_curs_set'
              'ncurses_def_prog_mode'
              'ncurses_def_shell_mode'
              'ncurses_define_key'
              'ncurses_del_panel'
              'ncurses_delay_output'
              'ncurses_delch'
              'ncurses_deleteln'
              'ncurses_delwin'
              'ncurses_doupdate'
              'ncurses_echo'
              'ncurses_echochar'
              'ncurses_end'
              'ncurses_erase'
              'ncurses_erasechar'
              'ncurses_filter'
              'ncurses_flash'
              'ncurses_flushinp'
              'ncurses_getch'
              'ncurses_getmaxyx'
              'ncurses_getmouse'
              'ncurses_getyx'
              'ncurses_halfdelay'
              'ncurses_has_colors'
              'ncurses_has_ic'
              'ncurses_has_il'
              'ncurses_has_key'
              'ncurses_hide_panel'
              'ncurses_hline'
              'ncurses_inch'
              'ncurses_init'
              'ncurses_init_color'
              'ncurses_init_pair'
              'ncurses_insch'
              'ncurses_insdelln'
              'ncurses_insertln'
              'ncurses_insstr'
              'ncurses_instr'
              'ncurses_isendwin'
              'ncurses_keyok'
              'ncurses_keypad'
              'ncurses_killchar'
              'ncurses_longname'
              'ncurses_meta'
              'ncurses_mouse_trafo'
              'ncurses_mouseinterval'
              'ncurses_mousemask'
              'ncurses_move'
              'ncurses_move_panel'
              'ncurses_mvaddch'
              'ncurses_mvaddchnstr'
              'ncurses_mvaddchstr'
              'ncurses_mvaddnstr'
              'ncurses_mvaddstr'
              'ncurses_mvcur'
              'ncurses_mvdelch'
              'ncurses_mvgetch'
              'ncurses_mvhline'
              'ncurses_mvinch'
              'ncurses_mvvline'
              'ncurses_mvwaddstr'
              'ncurses_napms'
              'ncurses_new_panel'
              'ncurses_newpad'
              'ncurses_newwin'
              'ncurses_nl'
              'ncurses_nocbreak'
              'ncurses_noecho'
              'ncurses_nonl'
              'ncurses_noqiflush'
              'ncurses_noraw'
              'ncurses_pair_content'
              'ncurses_panel_above'
              'ncurses_panel_below'
              'ncurses_panel_window'
              'ncurses_pnoutrefresh'
              'ncurses_prefresh'
              'ncurses_putp'
              'ncurses_qiflush'
              'ncurses_raw'
              'ncurses_refresh'
              'ncurses_replace_panel'
              'ncurses_reset_prog_mode'
              'ncurses_reset_shell_mode'
              'ncurses_resetty'
              'ncurses_savetty'
              'ncurses_scr_dump'
              'ncurses_scr_init'
              'ncurses_scr_restore'
              'ncurses_scr_set'
              'ncurses_scrl'
              'ncurses_show_panel'
              'ncurses_slk_attr'
              'ncurses_slk_attroff'
              'ncurses_slk_attron'
              'ncurses_slk_attrset'
              'ncurses_slk_clear'
              'ncurses_slk_color'
              'ncurses_slk_init'
              'ncurses_slk_noutrefresh'
              'ncurses_slk_refresh'
              'ncurses_slk_restore'
              'ncurses_slk_set'
              'ncurses_slk_touch'
              'ncurses_standend'
              'ncurses_standout'
              'ncurses_start_color'
              'ncurses_termattrs'
              'ncurses_termname'
              'ncurses_timeout'
              'ncurses_top_panel'
              'ncurses_typeahead'
              'ncurses_ungetch'
              'ncurses_ungetmouse'
              'ncurses_update_panels'
              'ncurses_use_default_colors'
              'ncurses_use_env'
              'ncurses_use_extended_names'
              'ncurses_vidattr'
              'ncurses_vline'
              'ncurses_waddch'
              'ncurses_waddstr'
              'ncurses_wattroff'
              'ncurses_wattron'
              'ncurses_wattrset'
              'ncurses_wborder'
              'ncurses_wclear'
              'ncurses_wcolor_set'
              'ncurses_werase'
              'ncurses_wgetch'
              'ncurses_whline'
              'ncurses_wmouse_trafo'
              'ncurses_wmove'
              'ncurses_wnoutrefresh'
              'ncurses_wrefresh'
              'ncurses_wstandend'
              'ncurses_wstandout'
              'ncurses_wvline'
              'next'
              'ngettext'
              'nl_langinfo'
              'nl2br'
              'notes_body'
              'notes_copy_db'
              'notes_create_db'
              'notes_create_note'
              'notes_drop_db'
              'notes_find_note'
              'notes_header_info'
              'notes_list_msgs'
              'notes_mark_read'
              'notes_mark_unread'
              'notes_nav_create'
              'notes_search'
              'notes_unread'
              'notes_version'
              'nsapi_request_headers'
              'nsapi_response_headers'
              'nsapi_virtual'
              'number_format'
              'ob_clean'
              'ob_end_clean'
              'ob_end_flush'
              'ob_flush'
              'ob_get_clean'
              'ob_get_contents'
              'ob_get_flush'
              'ob_get_length'
              'ob_get_level'
              'ob_get_status'
              'ob_gzhandler'
              'ob_iconv_handler'
              'ob_implicit_flush'
              'ob_list_handlers'
              'ob_start'
              'ob_tidyhandler'
              'oci_bind_by_name'
              'oci_cancel'
              'oci_close'
              'oci_commit'
              'oci_connect'
              'oci_define_by_name'
              'oci_error'
              'oci_execute'
              'oci_fetch'
              'oci_fetch_all'
              'oci_fetch_array'
              'oci_fetch_assoc'
              'oci_fetch_object'
              'oci_fetch_row'
              'oci_field_is_null'
              'oci_field_name'
              'oci_field_precision'
              'oci_field_scale'
              'oci_field_size'
              'oci_field_type'
              'oci_field_type_raw'
              'oci_free_statement'
              'oci_internal_debug'
              'oci_lob_copy'
              'oci_lob_is_equal'
              'oci_new_collection'
              'oci_new_connect'
              'oci_new_cursor'
              'oci_new_descriptor'
              'oci_num_fields'
              'oci_num_rows'
              'oci_parse'
              'oci_password_change'
              'oci_pconnect'
              'oci_result'
              'oci_rollback'
              'oci_server_version'
              'oci_set_prefetch'
              'oci_statement_type'
              'ocibindbyname'
              'ocicancel'
              'ocicloselob'
              'ocicollappend'
              'ocicollassign'
              'ocicollassignelem'
              'OCI-Collection->append'
              'OCI-Collection->assign'
              'OCI-Collection->assignElem'
              'OCI-Collection->free'
              'OCI-Collection->getElem'
              'OCI-Collection->max'
              'OCI-Collection->size'
              'OCI-Collection->trim'
              'ocicollgetelem'
              'ocicollmax'
              'ocicollsize'
              'ocicolltrim'
              'ocicolumnisnull'
              'ocicolumnname'
              'ocicolumnprecision'
              'ocicolumnscale'
              'ocicolumnsize'
              'ocicolumntype'
              'ocicolumntyperaw'
              'ocicommit'
              'ocidefinebyname'
              'ocierror'
              'ociexecute'
              'ocifetch'
              'ocifetchinto'
              'ocifetchstatement'
              'ocifreecollection'
              'ocifreecursor'
              'ocifreedesc'
              'ocifreestatement'
              'ociinternaldebug'
              'ociloadlob'
              'ocilogoff'
              'ocilogon'
              'ocinewcollection'
              'ocinewcursor'
              'ocinewdescriptor'
              'ocinlogon'
              'ocinumcols'
              'ociparse'
              'ociplogon'
              'ociresult'
              'ocirollback'
              'ocirowcount'
              'ocisavelob'
              'ocisavelobfile'
              'ociserverversion'
              'ocisetprefetch'
              'ocistatementtype'
              'ociwritelobtofile'
              'ociwritetemporarylob'
              'octdec'
              'odbc_autocommit'
              'odbc_binmode'
              'odbc_close'
              'odbc_close_all'
              'odbc_columnprivileges'
              'odbc_columns'
              'odbc_commit'
              'odbc_connect'
              'odbc_cursor'
              'odbc_data_source'
              'odbc_do'
              'odbc_error'
              'odbc_errormsg'
              'odbc_exec'
              'odbc_execute'
              'odbc_fetch_array'
              'odbc_fetch_into'
              'odbc_fetch_object'
              'odbc_fetch_row'
              'odbc_field_len'
              'odbc_field_name'
              'odbc_field_num'
              'odbc_field_precision'
              'odbc_field_scale'
              'odbc_field_type'
              'odbc_foreignkeys'
              'odbc_free_result'
              'odbc_gettypeinfo'
              'odbc_longreadlen'
              'odbc_next_result'
              'odbc_num_fields'
              'odbc_num_rows'
              'odbc_pconnect'
              'odbc_prepare'
              'odbc_primarykeys'
              'odbc_procedurecolumns'
              'odbc_procedures'
              'odbc_result'
              'odbc_result_all'
              'odbc_rollback'
              'odbc_setoption'
              'odbc_specialcolumns'
              'odbc_statistics'
              'odbc_tableprivileges'
              'odbc_tables'
              'openal_buffer_create'
              'openal_buffer_data'
              'openal_buffer_destroy'
              'openal_buffer_get'
              'openal_buffer_loadwav'
              'openal_context_create'
              'openal_context_current'
              'openal_context_destroy'
              'openal_context_process'
              'openal_context_suspend'
              'openal_device_close'
              'openal_device_open'
              'openal_listener_get'
              'openal_listener_set'
              'openal_source_create'
              'openal_source_destroy'
              'openal_source_get'
              'openal_source_pause'
              'openal_source_play'
              'openal_source_rewind'
              'openal_source_set'
              'openal_source_stop'
              'openal_stream'
              'opendir'
              'openlog'
              'openssl_csr_export'
              'openssl_csr_export_to_file'
              'openssl_csr_new'
              'openssl_csr_sign'
              'openssl_error_string'
              'openssl_free_key'
              'openssl_get_privatekey'
              'openssl_get_publickey'
              'openssl_open'
              'openssl_pkcs7_decrypt'
              'openssl_pkcs7_encrypt'
              'openssl_pkcs7_sign'
              'openssl_pkcs7_verify'
              'openssl_pkey_export'
              'openssl_pkey_export_to_file'
              'openssl_pkey_get_private'
              'openssl_pkey_get_public'
              'openssl_pkey_new'
              'openssl_private_decrypt'
              'openssl_private_encrypt'
              'openssl_public_decrypt'
              'openssl_public_encrypt'
              'openssl_seal'
              'openssl_sign'
              'openssl_verify'
              'openssl_x509_check_private_key'
              'openssl_x509_checkpurpose'
              'openssl_x509_export'
              'openssl_x509_export_to_file'
              'openssl_x509_free'
              'openssl_x509_parse'
              'openssl_x509_read'
              'ora_bind'
              'ora_close'
              'ora_columnname'
              'ora_columnsize'
              'ora_columntype'
              'ora_commit'
              'ora_commitoff'
              'ora_commiton'
              'ora_do'
              'ora_error'
              'ora_errorcode'
              'ora_exec'
              'ora_fetch'
              'ora_fetch_into'
              'ora_getcolumn'
              'ora_logoff'
              'ora_logon'
              'ora_numcols'
              'ora_numrows'
              'ora_open'
              'ora_parse'
              'ora_plogon'
              'ora_rollback'
              'ord'
              'output_add_rewrite_var'
              'output_reset_rewrite_vars'
              'overload'
              'override_function'
              'ovrimos_close'
              'ovrimos_commit'
              'ovrimos_connect'
              'ovrimos_cursor'
              'ovrimos_exec'
              'ovrimos_execute'
              'ovrimos_fetch_into'
              'ovrimos_fetch_row'
              'ovrimos_field_len'
              'ovrimos_field_name'
              'ovrimos_field_num'
              'ovrimos_field_type'
              'ovrimos_free_result'
              'ovrimos_longreadlen'
              'ovrimos_num_fields'
              'ovrimos_num_rows'
              'ovrimos_prepare'
              'ovrimos_result'
              'ovrimos_result_all'
              'ovrimos_rollback'
              'pack'
              'ParentIterator::getChildren'
              'ParentIterator::hasChildren'
              'ParentIterator::next'
              'ParentIterator::rewind'
              'parse_ini_file'
              'parse_str'
              'parse_url'
              'parsekit_compile_file'
              'parsekit_compile_string'
              'parsekit_func_arginfo'
              'passthru'
              'pathinfo'
              'pclose'
              'pcntl_alarm'
              'pcntl_exec'
              'pcntl_fork'
              'pcntl_getpriority'
              'pcntl_setpriority'
              'pcntl_signal'
              'pcntl_wait'
              'pcntl_waitpid'
              'pcntl_wexitstatus'
              'pcntl_wifexited'
              'pcntl_wifsignaled'
              'pcntl_wifstopped'
              'pcntl_wstopsig'
              'pcntl_wtermsig'
              'pdf_add_annotation'
              'pdf_add_bookmark'
              'pdf_add_launchlink'
              'pdf_add_locallink'
              'pdf_add_note'
              'pdf_add_outline'
              'pdf_add_pdflink'
              'pdf_add_thumbnail'
              'pdf_add_weblink'
              'pdf_arc'
              'pdf_arcn'
              'pdf_attach_file'
              'pdf_begin_page'
              'pdf_begin_pattern'
              'pdf_begin_template'
              'pdf_circle'
              'pdf_clip'
              'pdf_close'
              'pdf_close_image'
              'pdf_close_pdi'
              'pdf_close_pdi_page'
              'pdf_closepath'
              'pdf_closepath_fill_stroke'
              'pdf_closepath_stroke'
              'pdf_concat'
              'pdf_continue_text'
              'pdf_curveto'
              'pdf_delete'
              'pdf_end_page'
              'pdf_end_pattern'
              'pdf_end_template'
              'pdf_endpath'
              'pdf_fill'
              'pdf_fill_stroke'
              'pdf_findfont'
              'pdf_get_buffer'
              'pdf_get_font'
              'pdf_get_fontname'
              'pdf_get_fontsize'
              'pdf_get_image_height'
              'pdf_get_image_width'
              'pdf_get_majorversion'
              'pdf_get_minorversion'
              'pdf_get_parameter'
              'pdf_get_pdi_parameter'
              'pdf_get_pdi_value'
              'pdf_get_value'
              'pdf_initgraphics'
              'pdf_lineto'
              'pdf_makespotcolor'
              'pdf_moveto'
              'pdf_new'
              'pdf_open'
              'pdf_open_ccitt'
              'pdf_open_file'
              'pdf_open_gif'
              'pdf_open_image'
              'pdf_open_image_file'
              'pdf_open_jpeg'
              'pdf_open_memory_image'
              'pdf_open_pdi'
              'pdf_open_pdi_page'
              'pdf_open_png'
              'pdf_open_tiff'
              'pdf_place_image'
              'pdf_place_pdi_page'
              'pdf_rect'
              'pdf_restore'
              'pdf_rotate'
              'pdf_save'
              'pdf_scale'
              'pdf_set_border_color'
              'pdf_set_border_dash'
              'pdf_set_border_style'
              'pdf_set_char_spacing'
              'pdf_set_duration'
              'pdf_set_font'
              'pdf_set_horiz_scaling'
              'pdf_set_info'
              'pdf_set_info_author'
              'pdf_set_info_creator'
              'pdf_set_info_keywords'
              'pdf_set_info_subject'
              'pdf_set_info_title'
              'pdf_set_leading'
              'pdf_set_parameter'
              'pdf_set_text_matrix'
              'pdf_set_text_pos'
              'pdf_set_text_rendering'
              'pdf_set_text_rise'
              'pdf_set_value'
              'pdf_set_word_spacing'
              'pdf_setcolor'
              'pdf_setdash'
              'pdf_setflat'
              'pdf_setfont'
              'pdf_setgray'
              'pdf_setgray_fill'
              'pdf_setgray_stroke'
              'pdf_setlinecap'
              'pdf_setlinejoin'
              'pdf_setlinewidth'
              'pdf_setmatrix'
              'pdf_setmiterlimit'
              'pdf_setpolydash'
              'pdf_setrgbcolor'
              'pdf_setrgbcolor_fill'
              'pdf_setrgbcolor_stroke'
              'pdf_show'
              'pdf_show_boxed'
              'pdf_show_xy'
              'pdf_skew'
              'pdf_stringwidth'
              'pdf_stroke'
              'pdf_translate'
              'PDO::__construct'
              'PDO::beginTransaction'
              'PDO::commit'
              'PDO::errorCode'
              'PDO::errorInfo'
              'PDO::exec'
              'PDO::lastInsertId'
              'PDO::prepare'
              'PDO::rollBack'
              'PDO::setAttribute'
              'PDOStatement::bindColumn'
              'PDOStatement::bindParam'
              'PDOStatement::errorCode'
              'PDOStatement::errorInfo'
              'PDOStatement::execute'
              'PDOStatement::fetch'
              'PDOStatement::fetchAll'
              'PDOStatement::fetchSingle'
              'PDOStatement::rowCount'
              'pfpro_cleanup'
              'pfpro_init'
              'pfpro_process'
              'pfpro_process_raw'
              'pfpro_version'
              'pfsockopen'
              'pg_affected_rows'
              'pg_cancel_query'
              'pg_client_encoding'
              'pg_close'
              'pg_connect'
              'pg_connection_busy'
              'pg_connection_reset'
              'pg_connection_status'
              'pg_convert'
              'pg_copy_from'
              'pg_copy_to'
              'pg_dbname'
              'pg_delete'
              'pg_end_copy'
              'pg_escape_bytea'
              'pg_escape_string'
              'pg_fetch_all'
              'pg_fetch_array'
              'pg_fetch_assoc'
              'pg_fetch_object'
              'pg_fetch_result'
              'pg_fetch_row'
              'pg_field_is_null'
              'pg_field_name'
              'pg_field_num'
              'pg_field_prtlen'
              'pg_field_size'
              'pg_field_type'
              'pg_free_result'
              'pg_get_notify'
              'pg_get_pid'
              'pg_get_result'
              'pg_host'
              'pg_insert'
              'pg_last_error'
              'pg_last_notice'
              'pg_last_oid'
              'pg_lo_close'
              'pg_lo_create'
              'pg_lo_export'
              'pg_lo_import'
              'pg_lo_open'
              'pg_lo_read'
              'pg_lo_read_all'
              'pg_lo_seek'
              'pg_lo_tell'
              'pg_lo_unlink'
              'pg_lo_write'
              'pg_meta_data'
              'pg_num_fields'
              'pg_num_rows'
              'pg_options'
              'pg_parameter_status'
              'pg_pconnect'
              'pg_ping'
              'pg_port'
              'pg_put_line'
              'pg_query'
              'pg_result_error'
              'pg_result_seek'
              'pg_result_status'
              'pg_select'
              'pg_send_query'
              'pg_set_client_encoding'
              'pg_trace'
              'pg_tty'
              'pg_unescape_bytea'
              'pg_untrace'
              'pg_update'
              'pg_version'
              'php_check_syntax'
              'php_ini_scanned_files'
              'php_logo_guid'
              'php_register_url_stream_wrapper'
              'php_sapi_name'
              'php_stream_can_cast'
              'php_stream_cast'
              'php_stream_close'
              'php_stream_closedir'
              'php_stream_copy_to_mem'
              'php_stream_copy_to_stream'
              'php_stream_eof'
              'php_stream_filter_register_factory'
              'php_stream_filter_unregister_factory'
              'php_stream_flush'
              'php_stream_fopen_from_file'
              'php_stream_fopen_temporary_file'
              'php_stream_fopen_tmpfile'
              'php_stream_getc'
              'php_stream_gets'
              'php_stream_is'
              'php_stream_is_persistent'
              'php_stream_make_seekable'
              'php_stream_open_wrapper'
              'php_stream_open_wrapper_as_file'
              'php_stream_open_wrapper_ex'
              'php_stream_opendir'
              'php_stream_passthru'
              'php_stream_read'
              'php_stream_readdir'
              'php_stream_rewinddir'
              'php_stream_seek'
              'php_stream_sock_open_from_socket'
              'php_stream_sock_open_host'
              'php_stream_sock_open_unix'
              'php_stream_stat'
              'php_stream_stat_path'
              'php_stream_tell'
              'php_stream_write'
              'php_strip_whitespace'
              'php_uname'
              'php_unregister_url_stream_wrapper'
              'phpcredits'
              'phpinfo'
              'phpversion'
              'pi'
              'png2wbmp'
              'popen'
              'pos'
              'posix_ctermid'
              'posix_get_last_error'
              'posix_getcwd'
              'posix_getegid'
              'posix_geteuid'
              'posix_getgid'
              'posix_getgrgid'
              'posix_getgrnam'
              'posix_getgroups'
              'posix_getlogin'
              'posix_getpgid'
              'posix_getpgrp'
              'posix_getpid'
              'posix_getppid'
              'posix_getpwnam'
              'posix_getpwuid'
              'posix_getrlimit'
              'posix_getsid'
              'posix_getuid'
              'posix_isatty'
              'posix_kill'
              'posix_mkfifo'
              'posix_setegid'
              'posix_seteuid'
              'posix_setgid'
              'posix_setpgid'
              'posix_setsid'
              'posix_setuid'
              'posix_strerror'
              'posix_times'
              'posix_ttyname'
              'posix_uname'
              'pow'
              'preg_grep'
              'preg_match'
              'preg_match_all'
              'preg_quote'
              'preg_replace'
              'preg_replace_callback'
              'preg_split'
              'prev'
              'print'
              'print_r'
              'printer_abort'
              'printer_close'
              'printer_create_brush'
              'printer_create_dc'
              'printer_create_font'
              'printer_create_pen'
              'printer_delete_brush'
              'printer_delete_dc'
              'printer_delete_font'
              'printer_delete_pen'
              'printer_draw_bmp'
              'printer_draw_chord'
              'printer_draw_elipse'
              'printer_draw_line'
              'printer_draw_pie'
              'printer_draw_rectangle'
              'printer_draw_roundrect'
              'printer_draw_text'
              'printer_end_doc'
              'printer_end_page'
              'printer_get_option'
              'printer_list'
              'printer_logical_fontheight'
              'printer_open'
              'printer_select_brush'
              'printer_select_font'
              'printer_select_pen'
              'printer_set_option'
              'printer_start_doc'
              'printer_start_page'
              'printer_write'
              'printf'
              'proc_close'
              'proc_get_status'
              'proc_nice'
              'proc_open'
              'proc_terminate'
              'pspell_add_to_personal'
              'pspell_add_to_session'
              'pspell_check'
              'pspell_clear_session'
              'pspell_config_create'
              'pspell_config_data_dir'
              'pspell_config_dict_dir'
              'pspell_config_ignore'
              'pspell_config_mode'
              'pspell_config_personal'
              'pspell_config_repl'
              'pspell_config_runtogether'
              'pspell_config_save_repl'
              'pspell_new'
              'pspell_new_config'
              'pspell_new_personal'
              'pspell_save_wordlist'
              'pspell_store_replacement'
              'pspell_suggest'
              'putenv'
              'qdom_error'
              'qdom_tree'
              'quoted_printable_decode'
              'quotemeta'
              'rad2deg'
              'rand'
              'range'
              'Rar::extract'
              'Rar::getAttr'
              'Rar::getCrc'
              'Rar::getFileTime'
              'Rar::getHostOs'
              'Rar::getMethod'
              'Rar::getName'
              'Rar::getPackedSize'
              'Rar::getUnpackedSize'
              'Rar::getVersion'
              'rar_close'
              'rar_entry_get'
              'rar_list'
              'rar_open'
              'rawurldecode'
              'rawurlencode'
              'read_exif_data'
              'readdir'
              'readfile'
              'readgzfile'
              'readline'
              'readline_add_history'
              'readline_callback_handler_install'
              'readline_callback_handler_remove'
              'readline_callback_read_char'
              'readline_clear_history'
              'readline_completion_function'
              'readline_info'
              'readline_list_history'
              'readline_on_new_line'
              'readline_read_history'
              'readline_redisplay'
              'readline_write_history'
              'readlink'
              'realpath'
              'recode'
              'recode_file'
              'recode_string'
              'RecursiveDirectoryIterator::getChildren'
              'RecursiveDirectoryIterator::hasChildren'
              'RecursiveDirectoryIterator::key'
              'RecursiveDirectoryIterator::next'
              'RecursiveDirectoryIterator::rewind'
              'RecursiveIteratorIterator::current'
              'RecursiveIteratorIterator::getDepth'
              'RecursiveIteratorIterator::getSubIterator'
              'RecursiveIteratorIterator::key'
              'RecursiveIteratorIterator::next'
              'RecursiveIteratorIterator::rewind'
              'RecursiveIteratorIterator::valid'
              'register_shutdown_function'
              'register_tick_function'
              'rename'
              'rename_function'
              'reset'
              'restore_error_handler'
              'restore_exception_handler'
              'restore_include_path'
              'result->current_field'
              'result->data_seek'
              'result->fetch_array'
              'result->fetch_field'
              'result->fetch_field_direct'
              'result->fetch_fields'
              'result->fetch_object'
              'result->fetch_row'
              'result->field_count'
              'result->field_seek'
              'result->free'
              'result->lengths'
              'rewind'
              'rewinddir'
              'rmdir'
              'round'
              'rsort'
              'rtrim'
              'scandir'
              'sem_acquire'
              'sem_get'
              'sem_release'
              'sem_remove'
              'serialize'
              'sesam_affected_rows'
              'sesam_commit'
              'sesam_connect'
              'sesam_diagnostic'
              'sesam_disconnect'
              'sesam_errormsg'
              'sesam_execimm'
              'sesam_fetch_array'
              'sesam_fetch_result'
              'sesam_fetch_row'
              'sesam_field_array'
              'sesam_field_name'
              'sesam_free_result'
              'sesam_num_fields'
              'sesam_query'
              'sesam_rollback'
              'sesam_seek_row'
              'sesam_settransaction'
              'session_cache_expire'
              'session_cache_limiter'
              'session_commit'
              'session_decode'
              'session_destroy'
              'session_encode'
              'session_get_cookie_params'
              'session_id'
              'session_is_registered'
              'session_module_name'
              'session_name'
              'session_regenerate_id'
              'session_register'
              'session_save_path'
              'session_set_cookie_params'
              'session_set_save_handler'
              'session_start'
              'session_unregister'
              'session_unset'
              'session_write_close'
              'set_error_handler'
              'set_exception_handler'
              'set_file_buffer'
              'set_include_path'
              'set_magic_quotes_runtime'
              'set_time_limit'
              'setcookie'
              'setlocale'
              'setrawcookie'
              'settype'
              'sha1'
              'sha1_file'
              'shell_exec'
              'shm_attach'
              'shm_detach'
              'shm_get_var'
              'shm_put_var'
              'shm_remove'
              'shm_remove_var'
              'shmop_close'
              'shmop_delete'
              'shmop_open'
              'shmop_read'
              'shmop_size'
              'shmop_write'
              'show_source'
              'shuffle'
              'similar_text'
              'simplexml_import_dom'
              'simplexml_load_file'
              'simplexml_load_string'
              'SimpleXMLElement->asXML'
              'SimpleXMLElement->attributes'
              'SimpleXMLElement->children'
              'SimpleXMLElement->xpath'
              'SimpleXMLIterator::current'
              'SimpleXMLIterator::getChildren'
              'SimpleXMLIterator::hasChildren'
              'SimpleXMLIterator::key'
              'SimpleXMLIterator::next'
              'SimpleXMLIterator::rewind'
              'SimpleXMLIterator::valid'
              'sin'
              'sinh'
              'sizeof'
              'sleep'
              'snmp_get_quick_print'
              'snmp_get_valueretrieval'
              'snmp_read_mib'
              'snmp_set_enum_print'
              'snmp_set_oid_numeric_print'
              'snmp_set_quick_print'
              'snmp_set_valueretrieval'
              'snmpget'
              'snmpgetnext'
              'snmprealwalk'
              'snmpset'
              'snmpwalk'
              'snmpwalkoid'
              'SoapClient::__call'
              'SoapClient::__getFunctions'
              'SoapClient::__getLastRequest'
              'SoapClient::__getLastResponse'
              'SoapClient::__getTypes'
              'SoapClient::SoapClient'
              'SoapFault::SoapFault'
              'SoapHeader::SoapHeader'
              'SoapParam::SoapParam'
              'SoapServer::addFunction'
              'SoapServer::getFunctions'
              'SoapServer::handle'
              'SoapServer::setClass'
              'SoapServer::setPersistence'
              'SoapServer::SoapServer'
              'SoapVar::SoapVar'
              'socket_accept'
              'socket_bind'
              'socket_clear_error'
              'socket_close'
              'socket_connect'
              'socket_create'
              'socket_create_listen'
              'socket_create_pair'
              'socket_get_option'
              'socket_get_status'
              'socket_getpeername'
              'socket_getsockname'
              'socket_last_error'
              'socket_listen'
              'socket_read'
              'socket_recv'
              'socket_recvfrom'
              'socket_select'
              'socket_send'
              'socket_sendto'
              'socket_set_block'
              'socket_set_blocking'
              'socket_set_nonblock'
              'socket_set_option'
              'socket_set_timeout'
              'socket_shutdown'
              'socket_strerror'
              'socket_write'
              'sort'
              'soundex'
              'spl_classes'
              'split'
              'spliti'
              'sprintf'
              'sql_regcase'
              'sqlite_array_query'
              'sqlite_busy_timeout'
              'sqlite_changes'
              'sqlite_close'
              'sqlite_column'
              'sqlite_create_aggregate'
              'sqlite_create_function'
              'sqlite_current'
              'sqlite_error_string'
              'sqlite_escape_string'
              'sqlite_exec'
              'sqlite_factory'
              'sqlite_fetch_all'
              'sqlite_fetch_array'
              'sqlite_fetch_column_types'
              'sqlite_fetch_object'
              'sqlite_fetch_single'
              'sqlite_fetch_string'
              'sqlite_field_name'
              'sqlite_has_more'
              'sqlite_has_prev'
              'sqlite_last_error'
              'sqlite_last_insert_rowid'
              'sqlite_libencoding'
              'sqlite_libversion'
              'sqlite_next'
              'sqlite_num_fields'
              'sqlite_num_rows'
              'sqlite_open'
              'sqlite_popen'
              'sqlite_prev'
              'sqlite_query'
              'sqlite_rewind'
              'sqlite_seek'
              'sqlite_single_query'
              'sqlite_udf_decode_binary'
              'sqlite_udf_encode_binary'
              'sqlite_unbuffered_query'
              'sqrt'
              'srand'
              'sscanf'
              'ssh2_auth_none'
              'ssh2_auth_password'
              'ssh2_auth_pubkey_file'
              'ssh2_connect'
              'ssh2_exec'
              'ssh2_fetch_stream'
              'ssh2_fingerprint'
              'ssh2_methods_negotiated'
              'ssh2_scp_recv'
              'ssh2_scp_send'
              'ssh2_sftp'
              'ssh2_sftp_lstat'
              'ssh2_sftp_mkdir'
              'ssh2_sftp_readlink'
              'ssh2_sftp_realpath'
              'ssh2_sftp_rename'
              'ssh2_sftp_rmdir'
              'ssh2_sftp_stat'
              'ssh2_sftp_symlink'
              'ssh2_sftp_unlink'
              'ssh2_shell'
              'ssh2_tunnel'
              'stat'
              'stmt->bind_param'
              'stmt->bind_result'
              'stmt->data_seek'
              'stmt->execute'
              'stmt->fetch'
              'stmt->free_result'
              'stmt->num_rows'
              'stmt->param_count'
              'stmt->prepare'
              'stmt->reset'
              'stmt->send_long_data'
              'str_ireplace'
              'str_pad'
              'str_repeat'
              'str_replace'
              'str_rot13'
              'str_shuffle'
              'str_split'
              'str_word_count'
              'strcasecmp'
              'strchr'
              'strcmp'
              'strcoll'
              'strcspn'
              'stream_context_create'
              'stream_context_get_default'
              'stream_context_get_options'
              'stream_context_set_option'
              'stream_context_set_params'
              'stream_copy_to_stream'
              'stream_filter_append'
              'stream_filter_prepend'
              'stream_filter_register'
              'stream_filter_remove'
              'stream_get_contents'
              'stream_get_filters'
              'stream_get_line'
              'stream_get_meta_data'
              'stream_get_transports'
              'stream_get_wrappers'
              'stream_register_wrapper'
              'stream_select'
              'stream_set_blocking'
              'stream_set_timeout'
              'stream_set_write_buffer'
              'stream_socket_accept'
              'stream_socket_client'
              'stream_socket_enable_crypto'
              'stream_socket_get_name'
              'stream_socket_pair'
              'stream_socket_recvfrom'
              'stream_socket_sendto'
              'stream_socket_server'
              'stream_wrapper_register'
              'stream_wrapper_restore'
              'stream_wrapper_unregister'
              'strftime'
              'strip_tags'
              'stripcslashes'
              'stripos'
              'stripslashes'
              'stristr'
              'strlen'
              'strnatcasecmp'
              'strnatcmp'
              'strncasecmp'
              'strncmp'
              'strpbrk'
              'strpos'
              'strptime'
              'strrchr'
              'strrev'
              'strripos'
              'strrpos'
              'strspn'
              'strstr'
              'strtok'
              'strtolower'
              'strtotime'
              'strtoupper'
              'strtr'
              'strval'
              'substr'
              'substr_compare'
              'substr_count'
              'substr_replace'
              'swf_actiongeturl'
              'swf_actiongotoframe'
              'swf_actiongotolabel'
              'swf_actionnextframe'
              'swf_actionplay'
              'swf_actionprevframe'
              'swf_actionsettarget'
              'swf_actionstop'
              'swf_actiontogglequality'
              'swf_actionwaitforframe'
              'swf_addbuttonrecord'
              'swf_addcolor'
              'swf_closefile'
              'swf_definebitmap'
              'swf_definefont'
              'swf_defineline'
              'swf_definepoly'
              'swf_definerect'
              'swf_definetext'
              'swf_endbutton'
              'swf_enddoaction'
              'swf_endshape'
              'swf_endsymbol'
              'swf_fontsize'
              'swf_fontslant'
              'swf_fonttracking'
              'swf_getbitmapinfo'
              'swf_getfontinfo'
              'swf_getframe'
              'swf_labelframe'
              'swf_lookat'
              'swf_modifyobject'
              'swf_mulcolor'
              'swf_nextid'
              'swf_oncondition'
              'swf_openfile'
              'swf_ortho'
              'swf_ortho2'
              'swf_perspective'
              'swf_placeobject'
              'swf_polarview'
              'swf_popmatrix'
              'swf_posround'
              'swf_pushmatrix'
              'swf_removeobject'
              'swf_rotate'
              'swf_scale'
              'swf_setfont'
              'swf_setframe'
              'swf_shapearc'
              'swf_shapecurveto'
              'swf_shapecurveto3'
              'swf_shapefillbitmapclip'
              'swf_shapefillbitmaptile'
              'swf_shapefilloff'
              'swf_shapefillsolid'
              'swf_shapelinesolid'
              'swf_shapelineto'
              'swf_shapemoveto'
              'swf_showframe'
              'swf_startbutton'
              'swf_startdoaction'
              'swf_startshape'
              'swf_startsymbol'
              'swf_textwidth'
              'swf_translate'
              'swf_viewport'
              'swfaction'
              'swfbitmap'
              'SWFBitmap->getHeight'
              'SWFBitmap->getWidth'
              'swfbutton'
              'swfbutton_keypress'
              'SWFbutton->addAction'
              'SWFbutton->addShape'
              'SWFbutton->setAction'
              'SWFbutton->setdown'
              'SWFbutton->setHit'
              'SWFbutton->setOver'
              'SWFbutton->setUp'
              'swfdisplayitem'
              'SWFDisplayItem->addColor'
              'SWFDisplayItem->move'
              'SWFDisplayItem->moveTo'
              'SWFDisplayItem->multColor'
              'SWFDisplayItem->remove'
              'SWFDisplayItem->Rotate'
              'SWFDisplayItem->rotateTo'
              'SWFDisplayItem->scale'
              'SWFDisplayItem->scaleTo'
              'SWFDisplayItem->setDepth'
              'SWFDisplayItem->setName'
              'SWFDisplayItem->setRatio'
              'SWFDisplayItem->skewX'
              'SWFDisplayItem->skewXTo'
              'SWFDisplayItem->skewY'
              'SWFDisplayItem->skewYTo'
              'swffill'
              'SWFFill->moveTo'
              'SWFFill->rotateTo'
              'SWFFill->scaleTo'
              'SWFFill->skewXTo'
              'SWFFill->skewYTo'
              'swffont'
              'swffont->getwidth'
              'swfgradient'
              'SWFGradient->addEntry'
              'swfmorph'
              'SWFMorph->getshape1'
              'SWFMorph->getshape2'
              'swfmovie'
              'SWFMovie->add'
              'SWFMovie->nextframe'
              'SWFMovie->output'
              'swfmovie->remove'
              'SWFMovie->save'
              'SWFMovie->setbackground'
              'SWFMovie->setdimension'
              'SWFMovie->setframes'
              'SWFMovie->setrate'
              'SWFMovie->streammp3'
              'swfshape'
              'SWFShape->addFill'
              'SWFShape->drawCurve'
              'SWFShape->drawCurveTo'
              'SWFShape->drawLine'
              'SWFShape->drawLineTo'
              'SWFShape->movePen'
              'SWFShape->movePenTo'
              'SWFShape->setLeftFill'
              'SWFShape->setLine'
              'SWFShape->setRightFill'
              'swfsprite'
              'swfsprite->add'
              'SWFSprite->nextframe'
              'SWFSprite->remove'
              'SWFSprite->setframes'
              'swftext'
              'SWFText->addString'
              'SWFText->getWidth'
              'SWFText->moveTo'
              'SWFText->setColor'
              'SWFText->setFont'
              'SWFText->setHeight'
              'SWFText->setSpacing'
              'swftextfield'
              'SWFTextField->addstring'
              'SWFTextField->align'
              'SWFTextField->setbounds'
              'SWFTextField->setcolor'
              'SWFTextField->setFont'
              'SWFTextField->setHeight'
              'SWFTextField->setindentation'
              'SWFTextField->setLeftMargin'
              'SWFTextField->setLineSpacing'
              'SWFTextField->setMargins'
              'SWFTextField->setname'
              'SWFTextField->setrightMargin'
              'sybase_affected_rows'
              'sybase_close'
              'sybase_connect'
              'sybase_data_seek'
              'sybase_deadlock_retry_count'
              'sybase_fetch_array'
              'sybase_fetch_assoc'
              'sybase_fetch_field'
              'sybase_fetch_object'
              'sybase_fetch_row'
              'sybase_field_seek'
              'sybase_free_result'
              'sybase_get_last_message'
              'sybase_min_client_severity'
              'sybase_min_error_severity'
              'sybase_min_message_severity'
              'sybase_min_server_severity'
              'sybase_num_fields'
              'sybase_num_rows'
              'sybase_pconnect'
              'sybase_query'
              'sybase_result'
              'sybase_select_db'
              'sybase_set_message_handler'
              'sybase_unbuffered_query'
              'symlink'
              'syslog'
              'system'
              'tan'
              'tanh'
              'tcpwrap_check'
              'tempnam'
              'textdomain'
              'tidy::__construct'
              'tidy_access_count'
              'tidy_clean_repair'
              'tidy_config_count'
              'tidy_diagnose'
              'tidy_error_count'
              'tidy_get_body'
              'tidy_get_config'
              'tidy_get_error_buffer'
              'tidy_get_head'
              'tidy_get_html'
              'tidy_get_html_ver'
              'tidy_get_output'
              'tidy_get_release'
              'tidy_get_root'
              'tidy_get_status'
              'tidy_getopt'
              'tidy_is_xhtml'
              'tidy_is_xml'
              'tidy_load_config'
              'tidy_node->children'
              'tidy_node->get_attr'
              'tidy_node->get_nodes'
              'tidy_node->hasChildren'
              'tidy_node->hasSiblings'
              'tidy_node->isComment'
              'tidy_node->isHtml'
              'tidy_node->isJste'
              'tidy_node->isText'
              'tidy_node->isXhtml'
              'tidy_node->isXml'
              'tidy_node->next'
              'tidy_node->prev'
              'tidy_parse_file'
              'tidy_parse_string'
              'tidy_repair_file'
              'tidy_repair_string'
              'tidy_reset_config'
              'tidy_save_config'
              'tidy_set_encoding'
              'tidy_setopt'
              'tidy_warning_count'
              'tidyNode->isAsp'
              'tidyNode->isPhp'
              'time'
              'time_nanosleep'
              'tmpfile'
              'token_get_all'
              'token_name'
              'touch'
              'trigger_error'
              'trim'
              'uasort'
              'ucfirst'
              'ucwords'
              'udm_add_search_limit'
              'udm_alloc_agent'
              'udm_alloc_agent_array'
              'udm_api_version'
              'udm_cat_list'
              'udm_cat_path'
              'udm_check_charset'
              'udm_check_stored'
              'udm_clear_search_limits'
              'udm_close_stored'
              'udm_crc32'
              'udm_errno'
              'udm_error'
              'udm_find'
              'udm_free_agent'
              'udm_free_ispell_data'
              'udm_free_res'
              'udm_get_doc_count'
              'udm_get_res_field'
              'udm_get_res_param'
              'udm_hash32'
              'udm_load_ispell_data'
              'udm_open_stored'
              'udm_set_agent_param'
              'uksort'
              'umask'
              'uniqid'
              'unixtojd'
              'unlink'
              'unpack'
              'unregister_tick_function'
              'unserialize'
              'unset'
              'urldecode'
              'urlencode'
              'user_error'
              'usleep'
              'usort'
              'utf8_decode'
              'utf8_encode'
              'var_dump'
              'var_export'
              'variant'
              'variant_abs'
              'variant_add'
              'variant_and'
              'variant_cast'
              'variant_cat'
              'variant_cmp'
              'variant_date_from_timestamp'
              'variant_date_to_timestamp'
              'variant_div'
              'variant_eqv'
              'variant_fix'
              'variant_get_type'
              'variant_idiv'
              'variant_imp'
              'variant_int'
              'variant_mod'
              'variant_mul'
              'variant_neg'
              'variant_not'
              'variant_or'
              'variant_pow'
              'variant_round'
              'variant_set'
              'variant_set_type'
              'variant_sub'
              'variant_xor'
              'version_compare'
              'vfprintf'
              'virtual'
              'vpopmail_add_alias_domain'
              'vpopmail_add_alias_domain_ex'
              'vpopmail_add_domain'
              'vpopmail_add_domain_ex'
              'vpopmail_add_user'
              'vpopmail_alias_add'
              'vpopmail_alias_del'
              'vpopmail_alias_del_domain'
              'vpopmail_alias_get'
              'vpopmail_alias_get_all'
              'vpopmail_auth_user'
              'vpopmail_del_domain'
              'vpopmail_del_domain_ex'
              'vpopmail_del_user'
              'vpopmail_error'
              'vpopmail_passwd'
              'vpopmail_set_user_quota'
              'vprintf'
              'vsprintf'
              'w32api_deftype'
              'w32api_init_dtype'
              'w32api_invoke_function'
              'w32api_register_function'
              'w32api_set_call_method'
              'wddx_add_vars'
              'wddx_deserialize'
              'wddx_packet_end'
              'wddx_packet_start'
              'wddx_serialize_value'
              'wddx_serialize_vars'
              'wordwrap'
              'xattr_get'
              'xattr_list'
              'xattr_remove'
              'xattr_set'
              'xattr_supported'
              'xdiff_file_diff'
              'xdiff_file_diff_binary'
              'xdiff_file_merge3'
              'xdiff_file_patch'
              'xdiff_file_patch_binary'
              'xdiff_string_diff'
              'xdiff_string_diff_binary'
              'xdiff_string_merge3'
              'xdiff_string_patch'
              'xdiff_string_patch_binary'
              'xml_error_string'
              'xml_get_current_byte_index'
              'xml_get_current_column_number'
              'xml_get_current_line_number'
              'xml_get_error_code'
              'xml_parse'
              'xml_parse_into_struct'
              'xml_parser_create'
              'xml_parser_create_ns'
              'xml_parser_free'
              'xml_parser_get_option'
              'xml_parser_set_option'
              'xml_set_character_data_handler'
              'xml_set_default_handler'
              'xml_set_element_handler'
              'xml_set_end_namespace_decl_handler'
              'xml_set_external_entity_ref_handler'
              'xml_set_notation_decl_handler'
              'xml_set_object'
              'xml_set_processing_instruction_handler'
              'xml_set_start_namespace_decl_handler'
              'xml_set_unparsed_entity_decl_handler'
              'xmlrpc_decode'
              'xmlrpc_decode_request'
              'xmlrpc_encode'
              'xmlrpc_encode_request'
              'xmlrpc_get_type'
              'xmlrpc_is_fault'
              'xmlrpc_parse_method_descriptions'
              'xmlrpc_server_add_introspection_data'
              'xmlrpc_server_call_method'
              'xmlrpc_server_create'
              'xmlrpc_server_destroy'
              'xmlrpc_server_register_introspection_callback'
              'xmlrpc_server_register_method'
              'xmlrpc_set_type'
              'xpath_eval'
              'xpath_eval_expression'
              'xpath_new_context'
              'xptr_eval'
              'xptr_new_context'
              'xsl_xsltprocessor_get_parameter'
              'xsl_xsltprocessor_has_exslt_support'
              'xsl_xsltprocessor_import_stylesheet'
              'xsl_xsltprocessor_register_php_functions'
              'xsl_xsltprocessor_remove_parameter'
              'xsl_xsltprocessor_set_parameter'
              'xsl_xsltprocessor_transform_to_doc'
              'xsl_xsltprocessor_transform_to_uri'
              'xsl_xsltprocessor_transform_to_xml'
              'xslt_backend_info'
              'xslt_backend_name'
              'xslt_backend_version'
              'xslt_create'
              'xslt_errno'
              'xslt_error'
              'xslt_free'
              'xslt_getopt'
              'xslt_process'
              'xslt_set_base'
              'xslt_set_encoding'
              'xslt_set_error_handler'
              'xslt_set_log'
              'xslt_set_object'
              'xslt_set_sax_handler'
              'xslt_set_sax_handlers'
              'xslt_set_scheme_handler'
              'xslt_set_scheme_handlers'
              'xslt_setopt'
              'yaz_addinfo'
              'yaz_ccl_conf'
              'yaz_ccl_parse'
              'yaz_close'
              'yaz_connect'
              'yaz_database'
              'yaz_element'
              'yaz_errno'
              'yaz_error'
              'yaz_es_result'
              'yaz_get_option'
              'yaz_hits'
              'yaz_itemorder'
              'yaz_present'
              'yaz_range'
              'yaz_record'
              'yaz_scan'
              'yaz_scan_result'
              'yaz_schema'
              'yaz_search'
              'yaz_set_option'
              'yaz_sort'
              'yaz_syntax'
              'yaz_wait'
              'yp_all'
              'yp_cat'
              'yp_err_string'
              'yp_errno'
              'yp_first'
              'yp_get_default_domain'
              'yp_master'
              'yp_match'
              'yp_next'
              'yp_order'
              'zend_logo_guid'
              'zend_version'
              'zip_close'
              'zip_entry_close'
              'zip_entry_compressedsize'
              'zip_entry_compressionmethod'
              'zip_entry_filesize'
              'zip_entry_name'
              'zip_entry_open'
              'zip_entry_read'
              'zip_open'
              'zip_read'
              'zlib_get_coding_type')
            IgnoreCase = True
          end>
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpAny
        TreeItemStyle = 'reserved_functions'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'var ='
        ConditionList = <
          item
            TagList.Strings = (
              '=')
            TokenTypes = 16
          end
          item
            CondType = tcSkip
            TokenTypes = 64
          end
          item
            TokenTypes = 256
          end>
        NameFmt = '%s0'
        GroupFmt = 'var'
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'field ='
        ConditionList = <
          item
            TagList.Strings = (
              '('
              '=')
            TokenTypes = 80
          end
          item
            TokenTypes = 2
          end
          item
            TagList.Strings = (
              '>')
            TokenTypes = 16
          end
          item
            TagList.Strings = (
              '-')
            TokenTypes = 16
          end
          item
            TokenTypes = 256
          end>
        NameFmt = '%s0~s-3'
        GroupFmt = 'var'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '(_start'
        StyleName = 'Actual_block'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 64
          end>
        BlockEnd = ')_end'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 64
          end>
        BlockEnd = '(_start'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func abstract'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 2
          end
          item
            CondType = tcSkip
            TokenTypes = 2
          end
          item
            TagList.Strings = (
              'abstract')
            TokenTypes = 2
          end>
        NameFmt = '%sz0'
        RefToCondEnd = True
        HighlightPos = cpAny
        NoEndRule = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '[_start'
        StyleName = 'Actual_block'
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 64
          end>
        BlockEnd = ']_end'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ']_end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 64
          end>
        BlockEnd = '[_start'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <
      item
        Name = 'if'
        Description = 'if ( ) {...}'
        Code.Strings = (
          'if (<caret>){'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'func'
        Description = 'function ( ) {...}'
        Code.Strings = (
          'function <caret>(){'
          ''
          '}'
          '  ')
        Advanced = True
      end
      item
        Name = 'for'
        Description = 'for($i=0; $i<x; $i++) {...}'
        Code.Strings = (
          'for($i=0; $i<<caret>; $i++){'
          ''
          '}')
        Advanced = True
      end
      item
        Name = 'while'
        Description = 'while ( ) {...}'
        Code.Strings = (
          'while (<caret>){'
          ''
          '}'
          '    ')
        Advanced = True
      end
      item
        Name = 'do'
        Description = 'do {...} while'
        Code.Strings = (
          'do{'
          ''
          '}'
          'while (<caret>);')
        Advanced = True
      end
      item
        Name = 'switch'
        Description = 'swith...case'
        Code.Strings = (
          'switch ($<caret>i){'
          '  case 0:'
          ''
          '    break;'
          '  case 1:'
          ''
          '    break;'
          '  case 2:'
          ''
          '    break;'
          '}')
        Advanced = True
      end
      item
        Name = 'print'
        Description = 'print " "'
        Code.Strings = (
          'print "<caret>";')
        Advanced = True
      end
      item
        Name = 'echo'
        Description = 'echo " "'
        Code.Strings = (
          'echo "<caret>";')
        Advanced = True
      end
      item
        Name = 'mail'
        Description = 'mail template'
        Code.Strings = (
          'mail($<caret>email, $subject, $message, "From: $from_email");')
        Advanced = True
      end
      item
        Name = 'setcookie'
        Description = 'cookie for 1 hr'
        Code.Strings = (
          'setcookie ("<caret>", $value, time()+3600);')
        Advanced = True
      end
      item
        Name = 'mysql_con'
        Description = 'connect to MySQL'
        Code.Strings = (
          
            '$link = mysql_connect("<caret>mysql_host", "mysql_login", "mysql' +
            '_password")'
          '  or die ("Could not connect to MySQL");'
          ''
          'mysql_select_db("my_database")'
          '  or die ("Could not select database");')
        Advanced = True
      end
      item
        Name = 'mysql_query'
        Description = 'mysql query'
        Code.Strings = (
          '$query = "<caret>SELECT * FROM my_table";'
          '$result = mysql_query($query)'
          '  or die("Query failed");'
          ''
          '// Output in HTML'
          ''
          'print "<table>\n";'
          'while ($line = mysql_fetch_array($result))'
          '{'
          '  print "\t<tr>\n";'
          '  while (list($col_name, $col_value) = each($line))'
          '  {'
          '    print "\t\t<td>$col_value</td>\n";'
          '  }'
          '  print "\t</tr>\n";'
          '}'
          'print "</table>\n";')
        Advanced = True
      end
      item
        Name = 'header'
        Description = 'header'
        Code.Strings = (
          'Header("Content-type: <caret>image/png");')
        Advanced = True
      end
      item
        Name = 'loc'
        Description = 'loc'
        Code.Strings = (
          'Header("Location: http://<caret>");')
        Advanced = True
      end
      item
        Name = 'fwrite'
        Description = 'file output template'
        Code.Strings = (
          '$fp = fopen("<caret>file.txt", "w+");'
          'fwrite($fp, "Test");'
          'fclose($fp);')
        Advanced = True
      end
      item
        Name = 'if_else'
        Description = 'if...else'
        Code.Strings = (
          'if (<caret>){'
          ''
          '}'
          'else{'
          ''
          '}')
        Advanced = True
      end>
    SubAnalyzers = <
      item
        DisplayName = 'PHP_dev_HTML'
        StartExpression = '\?>'
        EndExpression = '<\?'
        SyntAnalyzer = SyntAnal96
        FromTextBegin = True
      end>
    SampleText.Strings = (
      '<html>'
      '<title>Test</title>'
      '<body>'
      '<?php //Example'
      ''
      'function Pp(int a){'
      '  $a = 10;'
      '  $b = 20;'
      '  $this->var = 100;'
      '  $this->proc($var);'
      '  echo '#39'\\'#39';'
      '  echo '#39'test'#39'."\\";'
      '  if (a){'
      '  }'
      '  else {'
      '  };'
      '}'
      ''
      'class f {'
      '  function a(){'
      '    if (a) { a++; }'
      '    i++;'
      '  }'
      '  function b(){'
      '  }'
      '}'
      ''
      'class ff extends f {'
      '  function a(){'
      '    i++;'
      '  }'
      ''
      '  function b(){'
      '    if (a>b) {'
      '      a++;'
      '    }'
      '  }'
      '}'
      ''
      'function pp(int a; int b){'
      '  i++;'
      '  if (a){'
      '  }'
      '}'
      ''
      '?>'
      '</body>'
      '</html>')
    TokenTypeNames.Strings = (
      'Coments'
      'Id'
      'Digits'
      'DIM'
      'Operators'
      'Selection'
      'Singl Simbol'
      'String'
      'Variable'
      'Reserved Words'
      'HTML'
      '')
    CollapseStyleName = 'slide_marker'
    Extentions = 'php php2 php3 php4 php5'
    LexerName = 'PHP (dev)'
    Notes.Strings = (
      'Created by 480499497 from http://forum.wincmd.ru'
      'Fixed by Alex (uvviewsoft.com)')
    RestartFromLineStart = True
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal98: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Cmt'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Op'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Val'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Str'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symb'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Num'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'NewDoc'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Cmt'
        StyleName = 'Cmt'
        TokenType = 1
        Expression = '\s* \# .*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'NewDoc'
        StyleName = 'NewDoc'
        TokenType = 1
        Expression = '^---.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Op'
        StyleName = 'Op'
        TokenType = 2
        Expression = '^[\-\s]*?\w*\s*\:'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Str'
        StyleName = 'Str'
        TokenType = 4
        Expression = '('#39'|").*?\1'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Val'
        Enabled = False
        StyleName = 'Val'
        Expression = '(?<=\s*\:).*|.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Num'
        Enabled = False
        StyleName = 'Num'
        TokenType = 5
        Expression = '\d+ \. \d+ | \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symb'
        StyleName = 'Symb'
        TokenType = 3
        Expression = '[\:\.,;\-\+/\*\(\)\{\}\[\]<>=%!\#]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'import_transform: "lambda x: x.split('#39';'#39')"'
      ''
      '# List of all the transformer classes.'
      'transformers:'
      '  # A sample using a CSV file with a header.'
      '- model: models.Customer'
      '  connector: csv'
      '  connector_options:'
      '    encoding: utf-8'
      '    columns: from_header'
      '  property_map:'
      '    - property: __key__'
      '      external_name: ID'
      '      export_transform: datastore.Key.name'
      '    - property: name'
      '      import_template: "%(First Name)s %(Last Name)s"'
      '      export:'
      '        - external_name: First Name'
      
        '          export_transform: transform.regexp_extract('#39'([^ ]+) ?.' +
        '*$'#39')'
      '        - external_name: Last Name'
      
        '          export_transform: transform.regexp_extract('#39'[^ ]+ (.*)' +
        '$'#39')'
      '    - property: phone'
      '      external_name: Phone'
      '    - property: created'
      '      external_name: Created'
      '      import_transform: transform.import_date_time('#39'%m/%d/%Y'#39')'
      '      export_transform: transform.export_date_time('#39'%m/%d/%Y'#39')'
      '')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'yml yaml'
    LexerName = 'YAML'
    SkipSpaces = False
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com')
    LineComment = '#'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal99: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 16711808
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftColor
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Var'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Macro'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = ';.*'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comm 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\* .*? (\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39') .*? \1'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IdVar'
        StyleName = 'Var'
        TokenType = 2
        Expression = '\$\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IdMacro'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '@\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ \. \d* (e \d+)?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IntHex'
        StyleName = 'Number'
        TokenType = 7
        Expression = '&[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\.!\?/\+\-\*:=<>&/\|\^~%]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'KeywMacro'
        StyleName = 'Macro'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '@Address'
              '@Build'
              '@Color'
              '@Comment'
              '@CPU'
              '@CRLF'
              '@CSD'
              '@CurDir'
              '@Date'
              '@Day'
              '@Domain'
              '@DOS'
              '@Error'
              '@FullName'
              '@HomeDir'
              '@HomeDrive'
              '@HomeShr'
              '@HostName'
              '@InWin'
              '@IPAddressX'
              '@KiX'
              '@LanRoot'
              '@LDomain'
              '@LDrive'
              '@LM'
              '@LogonMode'
              '@LongHomeDir'
              '@LServer'
              '@MaxPWAge'
              '@MDayNo'
              '@MHz'
              '@Month'
              '@MonthNo'
              '@MSecs'
              '@OnWoW64'
              '@PID'
              '@PrimaryGroup'
              '@Priv'
              '@ProductSuite'
              '@ProductType'
              '@PWAge'
              '@RAS'
              '@Result'
              '@RServer'
              '@ScriptDir'
              '@ScriptExe'
              '@ScriptName'
              '@SError'
              '@SID'
              '@Site'
              '@StartDir'
              '@SysLang'
              '@Ticks'
              '@Time'
              '@TsSession'
              '@UserID'
              '@UserLang'
              '@WDayNo'
              '@WkSta'
              '@WUserID'
              '@YDayNo'
              '@Year')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Keyw'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'Abs'
              'AddKey'
              'AddPrinterConnection'
              'AddProgramGroup'
              'AddProgramItem'
              'and'
              'Asc'
              'AScan'
              'At'
              'BackupEventLog'
              'Beep'
              'Big'
              'Box'
              'Break'
              'Call'
              'Case'
              'CD'
              'CDbl'
              'Chr'
              'CInt'
              'ClearEventLog'
              'Close'
              'CLS'
              'Color'
              'CompareFileTimes'
              'Cookie1'
              'Copy'
              'CreateObject'
              'CStr'
              'Debug'
              'DecToHex'
              'Del'
              'DelKey'
              'DelPrinterConnection'
              'DelProgramGroup'
              'DelProgramItem'
              'DelTree'
              'DelValue'
              'Dim'
              'Dir'
              'Display'
              'Do'
              'Each'
              'Else'
              'EndFunction'
              'Endif'
              'EndSelect'
              'EnumGroup'
              'EnumIpInfo'
              'EnumKey'
              'EnumLocalGroup'
              'EnumValue'
              'Execute'
              'Exist'
              'Exit'
              'ExpandEnvironmentVars'
              'Fix'
              'FlushKb'
              'For'
              'FormatNumber'
              'FreeFileHandle'
              'Function'
              'Get'
              'GetCommandLine'
              'GetDiskSpace'
              'GetFileAttr'
              'GetFileSize'
              'GetFileTime'
              'GetFileVersion'
              'GetObject'
              'GetS'
              'Global'
              'Go'
              'Gosub'
              'Goto'
              'If'
              'IIF'
              'in'
              'Include'
              'InGroup'
              'InStr'
              'InStrRev'
              'Int'
              'IsDeclared'
              'Join'
              'KbHit'
              'KeyExist'
              'LCase'
              'Left'
              'Len'
              'LoadHive'
              'LoadKey'
              'LogEvent'
              'Logoff'
              'Loop'
              'LTrim'
              'MD'
              'MemorySize'
              'MessageBox'
              'mod'
              'Move'
              'Next'
              'not'
              'Off'
              'On'
              'Open'
              'or'
              'Play'
              'Quit'
              'RD'
              'ReadLine'
              'ReadProfileString'
              'ReadType'
              'ReadValue'
              'ReDim'
              'RedirectOutput'
              'Return'
              'Right'
              'Rnd'
              'Round'
              'RTrim'
              'Run'
              'SaveKey'
              'Select'
              'SendKeys'
              'SendMessage'
              'Set'
              'SetASCII'
              'SetConsole'
              'SetDefaultPrinter'
              'SetFileAttr'
              'SetFocus'
              'SetL'
              'SetM'
              'SetOption'
              'SetSystemState'
              'SetTime'
              'SetTitle'
              'SetWallpaper'
              'Shell'
              'ShowProgramGroup'
              'ShutDown'
              'SidToName'
              'Sleep'
              'Small'
              'Split'
              'SRnd'
              'Substr'
              'Trim'
              'Ubound'
              'UCase'
              'UnloadHive'
              'Until'
              'Use'
              'Val'
              'VarType'
              'VarTypeName'
              'While'
              'WriteLine'
              'WriteProfileString'
              'WriteValue')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'if'
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'if-end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'if-end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endif')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'sel'
        ConditionList = <
          item
            TagList.Strings = (
              'select')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'sel-end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'sel-end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endselect')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'func-end'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func-end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endfunction')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'for'
        ConditionList = <
          item
            TagList.Strings = (
              'for')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'for-end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'for-end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'next')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'do'
        ConditionList = <
          item
            TagList.Strings = (
              'do')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'do-end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'do-end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'until')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'while'
        ConditionList = <
          item
            TagList.Strings = (
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'while-end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'while-end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* Long'
      'comment */'
      ''
      '? @Kix, @Build'
      '? @SomeStr, &AB'
      ''
      'Function ShowError()'
      #9'? "Error # @ERROR"'
      #9'?'
      #9'Syntax'
      'EndFunction'
      ''
      '; Check KiXtart version'
      '$KixMajorVer = SubStr( @Kix, 1, InStr( @Kix, "." ) - 1 )'
      'If $KixMajorVer < 4'
      #9'GoTo Syntax'
      'EndIf'
      ''
      '; Check command line parameters'
      'Select'
      #9'Case $PC = ""'
      #9#9'; Default if none specified is local computer (".")'
      #9#9'$strComputer = @WKSTA'
      #9'Case 1'
      #9#9'; Command line parameter $PC can either be a'
      #9#9'; computer name or "/?" to request online help'
      #9#9'$strComputer = $PC'
      #9#9'If InStr( $strComputer, "?" ) > 0'
      #9#9#9'GoTo Syntax'
      #9#9'EndIf'
      'EndSelect')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'kix kx'
    LexerName = 'KiXtart'
    Notes.Strings = (
      'Author: A.Torgashin (uvviewsoft.com)'
      'Test'
      'http://www.robvanderwoude.com/kixtartexamples.php'
      'Keywords'
      
        'http://www.scriptlogic.com/Kixtart/htmlhelp/Reference/!keyword-i' +
        'ndex.asp')
    LineComment = ';'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal100: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Func'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s) ^%\{ .*? ^%\}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '%.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = 
          '#first '#39' must not be after wordchar, ), ]'#13#10'(?<![\w\)\]]) '#39' .*? (' +
          #39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
          'hout exp. dot is required'#13#10'\d* \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\\/\*,\.;:\(\)=<>\+\-\[\]\{\}'#39'"~!\?@\$\^&\|]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keyw'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'break'
              'case'
              'catch'
              'classdef'
              'continue'
              'else'
              'elseif'
              'end'
              'enumeration'
              'events'
              'for'
              'function'
              'global'
              'if'
              'methods'
              'otherwise'
              'parfor'
              'persistent'
              'properties'
              'return'
              'spmd'
              'switch'
              'try'
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Func'
        StyleName = 'Func'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abs'
              'acos'
              'acosh'
              'add_annotation'
              'add_block'
              'add_line'
              'add_param'
              'all'
              'and'
              'any'
              'asin'
              'asinh'
              'assignin'
              'atan'
              'atan2'
              'atanh'
              'balance'
              'beep'
              'bitand'
              'bitcmp'
              'bitget'
              'bitor'
              'bitset'
              'bitshift'
              'bitxor'
              'builtin'
              'callstats'
              'cat'
              'cd'
              'ceil'
              'cell'
              'cell2struct'
              'cellhorzcat'
              'cells'
              'char'
              'chdir'
              'check_system'
              'chol'
              'cholinc'
              'cholupdate'
              'class'
              'clc'
              'clear'
              'clock'
              'close_system'
              'colon'
              'compare_system'
              'computer'
              'conj'
              'contourc'
              'conv2'
              'copyobj'
              'cos'
              'cosh'
              'cputime'
              'ctranspose'
              'cumprod'
              'cumsum'
              'dbclear'
              'dbcont'
              'dbdown'
              'dbquit'
              'dbstack'
              'dbstatus'
              'dbstep'
              'dbstop'
              'dbtype'
              'dbup'
              'delete'
              'delete_annotation'
              'delete_block'
              'delete_line'
              'delete_param'
              'det'
              'diag'
              'diary'
              'diff'
              'disp'
              'display'
              'dongarra'
              'dos'
              'double'
              'dragrect'
              'drawnow'
              'echo'
              'eig'
              'eps'
              'eq'
              'error'
              'errortrap'
              'eval'
              'evalc'
              'evalin'
              'exist'
              'exit'
              'exp'
              'expm'
              'eye'
              'fclose'
              'feature'
              'feof'
              'ferror'
              'feval'
              'fft'
              'fftn'
              'fftw'
              'fgets'
              'fieldnames'
              'fields'
              'filesep'
              'fill'
              'fill3'
              'filter'
              'find'
              'find_system'
              'findpackage'
              'findstr'
              'findtype'
              'finite'
              'fix'
              'floor'
              'fopen'
              'format'
              'fprintf'
              'frame2im'
              'fread'
              'fscanf'
              'fschange'
              'fseek'
              'ftell'
              'full'
              'func2str'
              'functions'
              'functionscalled'
              'fwrite'
              'ge'
              'getenv'
              'getframe'
              'gs_get_buttonmotion'
              'gt'
              'handle'
              'handle2struct'
              'hardcopy'
              'hcreate'
              'help'
              'hess'
              'hittest'
              'home'
              'horzcat'
              'hregister'
              'ieee'
              'ifft'
              'ifftn'
              'im2frame'
              'imag'
              'import'
              'inf'
              'inferiorto'
              'inmem'
              'input'
              'inputname'
              'int16'
              'int32'
              'int8'
              'inv'
              'isa'
              'iscell'
              'ischar'
              'isempty'
              'isequal'
              'isfinite'
              'isglobal'
              'ishandle'
              'isieee'
              'isinf'
              'isjava'
              'isletter'
              'islogical'
              'isnan'
              'isreal'
              'isruntime'
              'isspace'
              'issparse'
              'isstr'
              'isstudent'
              'java'
              'java_array'
              'java_method'
              'java_object'
              'javaArray'
              'javaMethod'
              'javaObject'
              'keyboard'
              'lasterr'
              'lastwarn'
              'ldivide'
              'le'
              'length'
              'license'
              'load'
              'log'
              'log2'
              'logical'
              'loglog'
              'lookfor'
              'lower'
              'lt'
              'ltitr'
              'lu'
              'luinc'
              'magic'
              'matlabpath'
              'matlabroot'
              'max'
              'methods'
              'mexext'
              'mfilename'
              'mimofr'
              'min'
              'minus'
              'mislocked'
              'mldivide'
              'mlock'
              'mod'
              'more'
              'movie'
              'mpower'
              'mrdivide'
              'mtimes'
              'munlock'
              'nan'
              'nargin'
              'nargout'
              'ndims'
              'ne'
              'new_system'
              'norm'
              'not'
              'numel'
              'ones'
              'open_system'
              'or'
              'pack'
              'pause'
              'permute'
              'pfile'
              'pi'
              'plot'
              'plot3'
              'plus'
              'pow2'
              'power'
              'prod'
              'qr'
              'qrupdate'
              'quit'
              'qz'
              'rand'
              'randn'
              'rbbox'
              'rcond'
              'rdivide'
              'real'
              'rehash'
              'rem'
              'reset'
              'reshape'
              'rmappdata'
              'round'
              'rtwgen'
              'runtime'
              'save'
              'save_system'
              'schur'
              'selectmoveresize'
              'semilogx'
              'semilogy'
              'setappdata'
              'setstr'
              'sign'
              'sim'
              'simulink'
              'simver'
              'sin'
              'single'
              'sinh'
              'size'
              'sldebug'
              'sort'
              'sparse'
              'sparsfun'
              'sprintf'
              'sqrt'
              'sscanf'
              'str2func'
              'strcmp'
              'strcmpi'
              'strfind'
              'string'
              'strncmp'
              'strncmpi'
              'strrep'
              'struct'
              'struct2cell'
              'struct2handle'
              'subsasgn'
              'subsindex'
              'subsref'
              'sum'
              'superiorto'
              'svd'
              'system'
              'system_dependent'
              'tan'
              'tanh'
              'tic'
              'times'
              'toc'
              'transpose'
              'tril'
              'triu'
              'trmginput'
              'type'
              'u_convert_to_gobject'
              'uigetfile'
              'uimenufcn'
              'uint16'
              'uint32'
              'uint8'
              'uipushtool'
              'uiputfile'
              'uisetcolor'
              'uisetfont'
              'uitoggletool'
              'uitoolbar'
              'uminus'
              'unix'
              'uplus'
              'upper'
              'version'
              'vertcat'
              'vms'
              'waitfor'
              'waitforbuttonpress'
              'warning'
              'what'
              'which'
              'who'
              'whos'
              'xlate'
              'zeros')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin'
        ConditionList = <
          item
            TagList.Strings = (
              'classdef'
              'enumeration'
              'events'
              'for'
              'function'
              'if'
              'methods'
              'parfor'
              'properties'
              'switch'
              'try'
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'm'
    LexerName = 'MATLAB'
    Notes.Strings = (
      'Author: A.Torgashin (uvviewsoft.com)'
      'Test'
      'http://math.la.asu.edu/~kuang/class/dmfile.htm')
    LineComment = '%'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal101: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 16711808
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Enabled = False
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        Enabled = False
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        Enabled = False
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(.|\\")*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
          'hout exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^\.,;!%~\^\?\{\}\[\]\(\)]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keyw'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'false'
              'null'
              'true')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ':')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        EndOfTextClose = True
        NameFmt = '%s2'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s2'
        IgnoreAsParent = False
      end
      item
        DisplayName = '{ in ['
        BlockName = '['
        StrictParent = True
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        NameFmt = '%s-1~s-3'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s-1~s-3'
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '['
        ConditionList = <
          item
            TagList.Strings = (
              '[')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ':')
            TokenTypes = 8
          end>
        BlockEnd = ']'
        EndOfTextClose = True
        NameFmt = 'array %s2'
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = 'array %s2'
        IgnoreAsParent = False
      end
      item
        DisplayName = ']'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '{'
      '    "glossary": {'
      '        "title": "example glossary",'
      #9#9'"GlossDiv": {'
      '            "title": "S",'
      #9#9#9'"GlossList": {'
      '                "GlossEntry": {'
      '                    "ID": "SGML",'
      #9#9#9#9#9'"SortAs": "SGML",'
      #9#9#9#9#9'"GlossTerm": "Standard Generalized Markup Language",'
      #9#9#9#9#9'"GlossDef": {'
      
        '                        "para": "A meta-markup language, used to' +
        ' create markup languages such as DocBook.",'
      #9#9#9#9#9#9'"GlossSeeAlso": ["GML", "XML"]'
      '                    },'
      '                    "ArrayId": ['
      '                      {"id": "1"},'
      '                      {"id": "2", "Text": "TT"}'
      '                    ]                    '
      '                }'
      '            }'
      '        }'
      '    }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'json'
    LexerName = 'JSON'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Test'
      'http://json.org/example.html'
      'http://www.jquery4u.com/json/10-example-json-files/')
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal35: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(.|\\")*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
          'hout exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\$[a-f0-9]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\\/\+\-\*:=<>&/\|\^\.!\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keyw'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'Abs'
              'Apply'
              'Assert'
              'Audiobits'
              'Audiochannels'
              'Audiolength'
              'AudiolengthF'
              'Audiorate'
              'catch'
              'Ceil'
              'Chr'
              'clip'
              'cos'
              'default'
              'defined'
              'Eval'
              'Exist'
              'Exp'
              'false'
              'FindStr'
              'Float'
              'Floor'
              'Frac'
              'FrameCount'
              'FrameRate'
              'FramerateDenominator'
              'FramerateNumerator'
              'function'
              'GetParity'
              'global'
              'HasAudio'
              'HasVideo'
              'Height'
              'hexValue'
              'Import'
              'Int'
              'IsAudioFloat'
              'IsAudioInt'
              'IsBool'
              'IsClip'
              'IsFieldBased'
              'IsFloat'
              'IsFrameBased'
              'IsInt'
              'IsInterleaved'
              'IsPlanar'
              'IsRGB'
              'IsRGB24'
              'IsRGB32'
              'IsString'
              'IsYUV'
              'IsYUY2'
              'IsYV12'
              'LCase'
              'LeftStr'
              'Log'
              'max'
              'MidStr'
              'min'
              'Muldiv'
              'NOP'
              'Pi'
              'Pow'
              'Rand'
              'return'
              'RevStr'
              'Round'
              'Select'
              'SetmemoryMax'
              'SetPlanarLegacyAlignment'
              'SetWorkingDir'
              'Sign'
              'sin'
              'Spline'
              'Sqrt'
              'string'
              'StrLen'
              'Time'
              'true'
              'try'
              'UCase'
              'Value'
              'VersionNumber'
              'VersionString'
              'Width')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Func'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = '}'
        EndOfTextClose = True
        NameFmt = 'Func %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        CollapseFmt = 'Func %s-1'
        NoEndRule = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'Function NTSC2PAL(clip c) {'
      '    Assert(c.height == 480, "Error")'
      '    Bob(c, height=576)'
      '    return Weave()'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'avs avsi'
    LexerName = 'AviSynth'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com')
    LineComment = '#'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal3: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Std func'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)("|'#39') (\\\1|.)*? (\1|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ L? |'#13#10'\d* \. \d+ L?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]+ L?'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+ L?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\./\+\-\*:=<>&/\|\^~!\?\$%]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keyw'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'break'
              'else'
              'FALSE'
              'for'
              'function'
              'if'
              'in'
              'Inf'
              'NA'
              'NA_character_'
              'NA_complex_'
              'NA_integer_'
              'NA_real_'
              'NaN'
              'next'
              'NULL'
              'repeat'
              'TRUE'
              'while')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'KeywFunc'
        StyleName = 'Std func'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abbreviate'
              'abline'
              'abs'
              'acf'
              'acos'
              'acosh'
              'addmargins'
              'aggregate'
              'agrep'
              'alarm'
              'alias'
              'alist'
              'all'
              'anova'
              'any'
              'aov'
              'aperm'
              'append'
              'apply'
              'approx'
              'approxfun'
              'apropos'
              'ar'
              'args'
              'arima'
              'array'
              'arrows'
              'asin'
              'asinh'
              'assign'
              'assocplot'
              'atan'
              'atanh'
              'attach'
              'attr'
              'attributes'
              'autoload'
              'autoloader'
              'ave'
              'axis'
              'backsolve'
              'barplot'
              'basename'
              'beta'
              'bindtextdomain'
              'binomial'
              'biplot'
              'bitmap'
              'bmp'
              'body'
              'box'
              'boxplot'
              'bquote'
              'browser'
              'builtins'
              'bxp'
              'by'
              'bzfile'
              'c'
              'call'
              'cancor'
              'capabilities'
              'casefold'
              'cat'
              'category'
              'cbind'
              'ccf'
              'ceiling'
              'character'
              'charmatch'
              'chartr'
              'chol'
              'choose'
              'chull'
              'citation'
              'class'
              'close'
              'cm'
              'cmdscale'
              'codes'
              'coef'
              'coefficients'
              'col'
              'colnames'
              'colors'
              'colorspaces'
              'colours'
              'comment'
              'complex'
              'confint'
              'conflicts'
              'contour'
              'contrasts'
              'contributors'
              'convolve'
              'cophenetic'
              'coplot'
              'cor'
              'cos'
              'cosh'
              'cov'
              'covratio'
              'cpgram'
              'crossprod'
              'cummax'
              'cummin'
              'cumprod'
              'cumsum'
              'curve'
              'cut'
              'cutree'
              'cycle'
              'data'
              'dataentry'
              'date'
              'dbeta'
              'dbinom'
              'dcauchy'
              'dchisq'
              'de'
              'debug'
              'debugger'
              'decompose'
              'delay'
              'deltat'
              'demo'
              'dendrapply'
              'density'
              'deparse'
              'deriv'
              'det'
              'detach'
              'determinant'
              'deviance'
              'dexp'
              'df'
              'dfbeta'
              'dfbetas'
              'dffits'
              'dgamma'
              'dgeom'
              'dget'
              'dhyper'
              'diag'
              'diff'
              'diffinv'
              'difftime'
              'digamma'
              'dim'
              'dimnames'
              'dir'
              'dirname'
              'dist'
              'dlnorm'
              'dlogis'
              'dmultinom'
              'dnbinom'
              'dnorm'
              'dotchart'
              'double'
              'dpois'
              'dput'
              'drop'
              'dsignrank'
              'dt'
              'dump'
              'dunif'
              'duplicated'
              'dweibull'
              'dwilcox'
              'eapply'
              'ecdf'
              'edit'
              'effects'
              'eigen'
              'emacs'
              'embed'
              'end'
              'environment'
              'eval'
              'evalq'
              'example'
              'exists'
              'exp'
              'expression'
              'factanal'
              'factor'
              'factorial'
              'family'
              'fft'
              'fifo'
              'file'
              'filter'
              'find'
              'fitted'
              'fivenum'
              'fix'
              'floor'
              'flush'
              'force'
              'formals'
              'format'
              'formula'
              'forwardsolve'
              'fourfoldplot'
              'frame'
              'frequency'
              'ftable'
              'gamma'
              'gaussian'
              'gc'
              'gcinfo'
              'gctorture'
              'get'
              'getenv'
              'geterrmessage'
              'gettext'
              'gettextf'
              'getwd'
              'gl'
              'glm'
              'globalenv'
              'gray'
              'grep'
              'grey'
              'grid'
              'gsub'
              'gzcon'
              'gzfile'
              'hat'
              'hatvalues'
              'hcl'
              'hclust'
              'head'
              'heatmap'
              'help'
              'hist'
              'history'
              'hsv'
              'httpclient'
              'iconv'
              'iconvlist'
              'identical'
              'identify'
              'ifelse'
              'image'
              'influence'
              'inherits'
              'integer'
              'integrate'
              'interaction'
              'interactive'
              'intersect'
              'invisible'
              'isoreg'
              'jitter'
              'jpeg'
              'julian'
              'kappa'
              'kernapply'
              'kernel'
              'kmeans'
              'knots'
              'kronecker'
              'ksmooth'
              'labels'
              'lag'
              'lapply'
              'layout'
              'lbeta'
              'lchoose'
              'lcm'
              'legend'
              'length'
              'letters'
              'levels'
              'lfactorial'
              'lgamma'
              'library'
              'licence'
              'license'
              'line'
              'lines'
              'list'
              'lm'
              'load'
              'loadhistory'
              'loadings'
              'local'
              'locator'
              'loess'
              'log'
              'logb'
              'logical'
              'loglin'
              'lowess'
              'ls'
              'lsfit'
              'machine'
              'mad'
              'mahalanobis'
              'makepredictcall'
              'manova'
              'mapply'
              'match'
              'matlines'
              'matplot'
              'matpoints'
              'matrix'
              'max'
              'mean'
              'median'
              'medpolish'
              'menu'
              'merge'
              'message'
              'methods'
              'mget'
              'min'
              'missing'
              'mode'
              'monthplot'
              'months'
              'mosaicplot'
              'mtext'
              'mvfft'
              'names'
              'napredict'
              'naprint'
              'naresid'
              'nargs'
              'nchar'
              'ncol'
              'nextn'
              'ngettext'
              'nlevels'
              'nlm'
              'nls'
              'noquote'
              'nrow'
              'numeric'
              'objects'
              'offset'
              'open'
              'optim'
              'optimise'
              'optimize'
              'options'
              'order'
              'ordered'
              'outer'
              'pacf'
              'page'
              'pairlist'
              'pairs'
              'palette'
              'par'
              'parse'
              'paste'
              'pbeta'
              'pbinom'
              'pbirthday'
              'pcauchy'
              'pchisq'
              'pdf'
              'pentagamma'
              'person'
              'persp'
              'pexp'
              'pf'
              'pgamma'
              'pgeom'
              'phyper'
              'pi'
              'pico'
              'pictex'
              'pie'
              'piechart'
              'pipe'
              'plclust'
              'plnorm'
              'plogis'
              'plot'
              'pmatch'
              'pmax'
              'pmin'
              'pnbinom'
              'png'
              'pnorm'
              'points'
              'poisson'
              'poly'
              'polygon'
              'polym'
              'polyroot'
              'postscript'
              'power'
              'ppoints'
              'ppois'
              'ppr'
              'prcomp'
              'predict'
              'preplot'
              'pretty'
              'princomp'
              'print'
              'prmatrix'
              'prod'
              'profile'
              'profiler'
              'proj'
              'promax'
              'prompt'
              'provide'
              'psigamma'
              'psignrank'
              'pt'
              'ptukey'
              'punif'
              'pweibull'
              'pwilcox'
              'q'
              'qbeta'
              'qbinom'
              'qbirthday'
              'qcauchy'
              'qchisq'
              'qexp'
              'qf'
              'qgamma'
              'qgeom'
              'qhyper'
              'qlnorm'
              'qlogis'
              'qnbinom'
              'qnorm'
              'qpois'
              'qqline'
              'qqnorm'
              'qqplot'
              'qr'
              'qsignrank'
              'qt'
              'qtukey'
              'quantile'
              'quarters'
              'quasi'
              'quasibinomial'
              'quasipoisson'
              'quit'
              'qunif'
              'quote'
              'qweibull'
              'qwilcox'
              'rainbow'
              'range'
              'rank'
              'raw'
              'rbeta'
              'rbind'
              'rbinom'
              'rcauchy'
              'rchisq'
              'readline'
              'real'
              'recover'
              'rect'
              'reformulate'
              'regexpr'
              'relevel'
              'remove'
              'reorder'
              'rep'
              'replace'
              'replicate'
              'replications'
              'require'
              'reshape'
              'resid'
              'residuals'
              'restart'
              'return'
              'rev'
              'rexp'
              'rf'
              'rgamma'
              'rgb'
              'rgeom'
              'rhyper'
              'rle'
              'rlnorm'
              'rlogis'
              'rm'
              'rmultinom'
              'rnbinom'
              'rnorm'
              'round'
              'row'
              'rownames'
              'rowsum'
              'rpois'
              'rsignrank'
              'rstandard'
              'rstudent'
              'rt'
              'rug'
              'runif'
              'runmed'
              'rweibull'
              'rwilcox'
              'sample'
              'sapply'
              'save'
              'savehistory'
              'scale'
              'scan'
              'screen'
              'screeplot'
              'sd'
              'search'
              'searchpaths'
              'seek'
              'segments'
              'seq'
              'sequence'
              'serialize'
              'setdiff'
              'setequal'
              'setwd'
              'shell'
              'sign'
              'signif'
              'sin'
              'single'
              'sinh'
              'sink'
              'smooth'
              'solve'
              'sort'
              'source'
              'spectrum'
              'spline'
              'splinefun'
              'split'
              'sprintf'
              'sqrt'
              'stack'
              'stars'
              'start'
              'stderr'
              'stdin'
              'stdout'
              'stem'
              'step'
              'stepfun'
              'stl'
              'stop'
              'stopifnot'
              'str'
              'strftime'
              'strheight'
              'stripchart'
              'strptime'
              'strsplit'
              'strtrim'
              'structure'
              'strwidth'
              'strwrap'
              'sub'
              'subset'
              'substitute'
              'substr'
              'substring'
              'sum'
              'summary'
              'sunflowerplot'
              'supsmu'
              'svd'
              'sweep'
              'switch'
              'symbols'
              'symnum'
              'system'
              't'
              'table'
              'tabulate'
              'tail'
              'tan'
              'tanh'
              'tapply'
              'tempdir'
              'tempfile'
              'termplot'
              'terms'
              'tetragamma'
              'text'
              'time'
              'title'
              'toeplitz'
              'tolower'
              'topenv'
              'toupper'
              'trace'
              'traceback'
              'transform'
              'trigamma'
              'trunc'
              'truncate'
              'try'
              'ts'
              'tsdiag'
              'tsp'
              'typeof'
              'unclass'
              'undebug'
              'union'
              'unique'
              'uniroot'
              'unix'
              'unlink'
              'unlist'
              'unname'
              'unserialize'
              'unsplit'
              'unstack'
              'untrace'
              'unz'
              'update'
              'upgrade'
              'url'
              'var'
              'varimax'
              'vcov'
              'vector'
              'version'
              'vi'
              'vignette'
              'warning'
              'warnings'
              'weekdays'
              'weights'
              'which'
              'window'
              'windows'
              'with'
              'write'
              'wsbrowser'
              'xedit'
              'xemacs'
              'xfig'
              'xinch'
              'xor'
              'xtabs'
              'xyinch'
              'yinch'
              'zapsmall')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Func'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '<-')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'Func end'
        NameFmt = 'func %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Func end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <
      item
        Name = 'tread'
        Description = 'Read Table'
        Code.Strings = (
          't0 <- read.table("|", sep = "\t", header = FALSE)')
      end
      item
        Name = 'func'
        Description = 'Function'
        Code.Strings = (
          '| <- function() {'
          ''
          '}')
      end
      item
        Name = 'if'
        Description = 'If Statement'
        Code.Strings = (
          'if(|) {'
          ''
          '}')
      end
      item
        Name = 'ifelse'
        Description = 'If Else Statement'
        Code.Strings = (
          'if (|) {'
          ''
          '} else {'
          ''
          '}')
      end
      item
        Name = 'ifel'
        Description = 'IfElse Function'
        Code.Strings = (
          'ifelse(|, , )')
      end
      item
        Name = 'forin'
        Description = 'For In Statement'
        Code.Strings = (
          'for (| in ) {'
          ''
          '}')
      end
      item
        Name = 'while'
        Description = 'While Statement'
        Code.Strings = (
          'while(|) {'
          ''
          '}')
      end
      item
        Name = 'repeat'
        Description = 'Repeat Statement'
        Code.Strings = (
          'repeat(|) {'
          ''
          '}')
      end
      item
        Name = 'switch'
        Description = 'Switch Function'
        Code.Strings = (
          'switch(|, )')
      end
      item
        Name = 'src'
        Description = 'Load Source file'
        Code.Strings = (
          'source("|")')
      end
      item
        Name = 'di'
        Description = 'Import SPSS Data'
        Code.Strings = (
          
            'library(foreign); Dataset <- read.spss("|", use.value.labels=TRU' +
            'E, max.value.labels=Inf, to.data.frame=TRUE) ')
      end
      item
        Name = 'cd'
        Description = 'Change Working Directory'
        Code.Strings = (
          'setwd("|")')
      end
      item
        Name = 'hs'
        Description = 'Search for Help'
        Code.Strings = (
          'help.search("|")')
      end
      item
        Name = 'ha'
        Description = 'Apropos'
        Code.Strings = (
          'apropos("|")')
      end
      item
        Name = 'lp'
        Description = 'Load Package'
        Code.Strings = (
          
            '{.pkg <- select.list(sort(.packages(all.available = TRUE))); if(' +
            'nchar(.pkg)) library(.pkg, character.only=TRUE); rm(.pkg)}')
      end
      item
        Name = 'ro'
        Description = 'Remove all Objects'
        Code.Strings = (
          
            '.ans <- winDialog('#39'yesno'#39', '#39'Are you sure?'#39'); if (.ans == '#39'YES'#39') ' +
            'rm(list=ls(all=TRUE)) else rm(.ans)')
      end
      item
        Name = 'ps'
        Description = 'PostScript Output'
        Code.Strings = (
          'postscript(file = "|", width = 5,'
          '  height = 5, horizontzal = FALSE, paper = "special",'
          '  onefile = FALSE)')
      end
      item
        Name = 'pdf'
        Description = 'PDF Output'
        Code.Strings = (
          'pdf(file = "|", width = 5,'
          '  height = 5, onefile = FALSE)')
      end>
    SubAnalyzers = <>
    SampleText.Strings = (
      'n <- .1 + 1.2 + 1e2 + 1e-2 + 1.2L + 1e-2L'
      'n <- 10L + 1e3L + 0x0ABFFL'
      'nStr <- '#39'Test'
      'string'#39
      ''
      'square <- function(x) {'
      '  return(x*x)'
      '}'
      'cat("The square of 3 is ", square(3), "\n")'
      ''
      '# default value of the arg is set to 5.'
      'cube <- function(x=5) {'
      '  return(x*x*x);'
      '}'
      'cat("Calling cube with 2 : ", cube(2), "\n")    # will give 2^3'
      
        'cat("Calling cube        : ", cube(), "\n")     # will default t' +
        'o 5^3.')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'r'
    LexerName = 'R'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Ref:'
      'http://cran.r-project.org/doc/manuals/R-lang.pdf'
      'Test:'
      'http://www.mayin.org/ajayshah/KB/R/index.html')
    LineComment = '#'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal6: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Variable'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Cmd'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s) <\# .*? (\#>|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(") (\\\1|.)*? (\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IdVariable'
        StyleName = 'Variable'
        TokenType = 2
        Expression = '\$\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_][\w-]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\./\+\-\*:=<>&/\|\^~!\?%]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keyw'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'Begin'
              'Break'
              'Catch'
              'Continue'
              'Data'
              'Do'
              'Dynamicparam'
              'Else'
              'Elseif'
              'End'
              'Exit'
              'Filter'
              'Finally'
              'For'
              'Foreach'
              'From'
              'Function'
              'If'
              'In'
              'Local'
              'Param'
              'Private'
              'Process'
              'Return'
              'Switch'
              'Throw'
              'Trap'
              'Try'
              'Until'
              'Where'
              'While')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Cmd'
        StyleName = 'Cmd'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'add-content'
              'add-history'
              'add-member'
              'add-pssnapin'
              'clear-content'
              'clear-item'
              'clear-itemproperty'
              'clear-variable'
              'compare-object'
              'convertfrom-securestring'
              'convert-path'
              'convertto-html'
              'convertto-securestring'
              'copy-item'
              'copy-itemproperty'
              'export-alias'
              'export-clixml'
              'export-console'
              'export-csv'
              'foreach-object'
              'format-custom'
              'format-list'
              'format-table'
              'format-wide'
              'get-acl'
              'get-alias'
              'get-authenticodesignature'
              'get-childitem'
              'get-command'
              'get-content'
              'get-credential'
              'get-culture'
              'get-date'
              'get-eventlog'
              'get-executionpolicy'
              'get-help'
              'get-history'
              'get-host'
              'get-item'
              'get-itemproperty'
              'get-location'
              'get-member'
              'get-pfxcertificate'
              'get-process'
              'get-psdrive'
              'get-psprovider'
              'get-pssnapin'
              'get-service'
              'get-tracesource'
              'get-uiculture'
              'get-unique'
              'get-variable'
              'get-wmiobject'
              'group-object'
              'import-alias'
              'import-clixml'
              'import-csv'
              'invoke-expression'
              'invoke-history'
              'invoke-item'
              'join-path'
              'measure-command'
              'measure-object'
              'move-item'
              'move-itemproperty'
              'new-alias'
              'new-item'
              'new-itemproperty'
              'new-object'
              'new-psdrive'
              'new-service'
              'new-timespan'
              'new-variable'
              'out-default'
              'out-file'
              'out-host'
              'out-null'
              'out-printer'
              'out-string'
              'pop-location'
              'push-location'
              'read-host'
              'remove-item'
              'remove-itemproperty'
              'remove-psdrive'
              'remove-pssnapin'
              'remove-variable'
              'rename-item'
              'rename-itemproperty'
              'resolve-path'
              'restart-service'
              'resume-service'
              'select-object'
              'select-string'
              'set-acl'
              'set-alias'
              'set-authenticodesignature'
              'set-content'
              'set-date'
              'set-executionpolicy'
              'set-item'
              'set-itemproperty'
              'set-location'
              'set-psdebug'
              'set-service'
              'set-tracesource'
              'set-variable'
              'sort-object'
              'split-path'
              'start-service'
              'start-sleep'
              'start-transcript'
              'stop-process'
              'stop-service'
              'stop-transcript'
              'suspend-service'
              'tee-object'
              'test-path'
              'trace-command'
              'update-formatdata'
              'update-typedata'
              'where-object'
              'write-debug'
              'write-error'
              'write-host'
              'write-output'
              'write-progress'
              'write-verbose'
              'write-warning')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '# Convert any text file to UTF-8'
      
        'param( [string] $infile = $(throw "Please specify a filename.") ' +
        ')'
      '$outfile = "$infile.utf8"'
      'get-content -Path $infile | out-file $outfile -encoding utf8'
      ''
      '<#  '
      'Block comment'
      '#>')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'ps1'
    LexerName = 'PowerShell'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Test:'
      'http://www.robvanderwoude.com/powershellexamples.php')
    LineComment = '# '
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal20: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Function separator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clRed
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clInactiveCaptionText
        FormatType = ftColor
      end
      item
        DisplayName = 'Current function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 16769505
        FormatType = ftBackGround
      end>
    TokenRules = <
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'#witho' +
          'ut exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\(\*.*?(\*\)|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\{.*?(\}|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 3'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'HEX'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\$[a-f\d]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '\#(\d+|\$[\da-f]+)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preprocessor'
        StyleName = 'Preprocessor'
        TokenType = 1
        Expression = '^\s*\#.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abstract'
              'and'
              'array'
              'as'
              'asm'
              'begin'
              'case'
              'class'
              'const'
              'constructor'
              'contains'
              'destructor'
              'dispinterface'
              'div'
              'do'
              'downto'
              'dynamic'
              'else'
              'end'
              'except'
              'exports'
              'file'
              'finalization'
              'finally'
              'for'
              'function'
              'goto'
              'if'
              'implementation'
              'in'
              'index'
              'inherited'
              'initialization'
              'inline'
              'interface'
              'is'
              'label'
              'library'
              'mod'
              'nil'
              'not'
              'object'
              'of'
              'or'
              'out'
              'override'
              'package'
              'packed'
              'pascal'
              'private'
              'procedure'
              'program'
              'property'
              'protected'
              'public'
              'published'
              'raise'
              'read'
              'record'
              'register'
              'repeat'
              'requires'
              'resourcestring'
              'safecall'
              'set'
              'shl'
              'shr'
              'stdcall'
              'string'
              'then'
              'threadvar'
              'to'
              'try'
              'type'
              'unit'
              'until'
              'uses'
              'var'
              'virtual'
              'while'
              'with'
              'write'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              'begin'
              'case'
              'try')
            TokenTypes = 4
          end>
        BlockEnd = 'End'
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpRange
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'asm'
        ConditionList = <
          item
            TagList.Strings = (
              'asm')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'End'
        Highlight = True
        InvertColors = True
        DisplayInTree = False
        DynHighlight = dhRangeNoBound
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'until'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'until')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'repeat'
        ConditionList = <
          item
            TagList.Strings = (
              'repeat')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'until'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        StyleName = 'Current block'
        ConditionList = <
          item
            TagList.Strings = (
              '('
              '[')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NotCollapsed = True
        DisplayInTree = False
        DynHighlight = dhBound
        HighlightPos = cpBoundTag
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')'
              ']')
            TokenTypes = 8
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1021
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Function separator'
        StyleName = 'Function separator'
        BlockType = btLineBreak
        ConditionList = <
          item
            TagList.Strings = (
              'constructor'
              'destructor'
              'function'
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Single function'
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            CondType = tcNotEqual
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'function'
              'procedure')
            TokenTypes = 4
          end>
        IdentIndex = 1
        BlockOffset = 2
        BlockEnd = 'End of function'
        NameFmt = '%s2 %s1'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End of function'
        BlockName = 'Single function'
        StrictParent = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <
      item
        Name = 'be'
        Description = 'begin end'
        Code.Strings = (
          'begin'
          '  | '
          'end;')
      end
      item
        Name = 'arrayd'
        Description = 'array declaration (var)'
        Code.Strings = (
          'array[0..|] of ;')
      end
      item
        Name = 'arrayc'
        Description = 'array declaration (const)'
        Code.Strings = (
          'array[0..|] of = ();')
      end
      item
        Name = 'cases'
        Description = 'case statement'
        Code.Strings = (
          'case | of'
          '  : ;'
          '  : ;'
          'end;')
      end
      item
        Name = 'casee'
        Description = 'case statement (with else)'
        Code.Strings = (
          'case | of'
          '  : ;'
          '  : ;'
          'else ;'
          'end;')
      end
      item
        Name = 'classf'
        Description = 'class declaration (all parts)'
        Code.Strings = (
          'T| = class(T)'
          'private'
          ''
          'protected'
          ''
          'public'
          ''
          'published'
          ''
          'end;')
      end
      item
        Name = 'classd'
        Description = 'class declaration (no parts)'
        Code.Strings = (
          'T| = class(T)'
          ''
          'end;')
      end
      item
        Name = 'classc'
        Description = 'class declaration (with Create/Destroy overrides)'
        Code.Strings = (
          'T| = class(T)'
          'private'
          ''
          'protected'
          ''
          'public'
          '  constructor Create; override;'
          '  destructor Destroy; override;'
          'published'
          ''
          'end;')
      end
      item
        Name = 'fors'
        Description = 'for (no begin/end)'
        Code.Strings = (
          'for | :=  to  do')
      end
      item
        Name = 'forb'
        Description = 'for statement'
        Code.Strings = (
          'for | :=  to  do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'function'
        Description = 'function declaration'
        Code.Strings = (
          'function |(): ;'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'ifs'
        Description = 'if (no begin/end)'
        Code.Strings = (
          'if | then')
      end
      item
        Name = 'ifb'
        Description = 'if statement'
        Code.Strings = (
          'if | then'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'ife'
        Description = 'if then (no begin/end) else (no begin/end)'
        Code.Strings = (
          'if | then'
          ''
          'else')
      end
      item
        Name = 'ifeb'
        Description = 'if then else'
        Code.Strings = (
          'if | then'
          'begin'
          ''
          'end'
          'else'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'procedure'
        Description = 'procedure declaration'
        Code.Strings = (
          'procedure |();'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'trye'
        Description = 'try except'
        Code.Strings = (
          'try'
          '  |'
          'except'
          ''
          'end;')
      end
      item
        Name = 'tryf'
        Description = 'try finally'
        Code.Strings = (
          'try'
          '  |'
          'finally'
          ''
          'end;')
      end
      item
        Name = 'trycf'
        Description = 'try finally (with Create/Free)'
        Code.Strings = (
          '|variable := typename.Create;'
          'try'
          ''
          'finally'
          '  variable.Free;'
          'end;')
      end
      item
        Name = 'whileb'
        Description = 'while statement'
        Code.Strings = (
          'while | do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'whiles'
        Description = 'while (no begin)'
        Code.Strings = (
          'while | do')
      end
      item
        Name = 'withb'
        Description = 'with statement'
        Code.Strings = (
          'with | do'
          'begin'
          ''
          'end;')
      end
      item
        Name = 'withs'
        Description = 'with (no begin)'
        Code.Strings = (
          'with | do')
      end
      item
        Name = 'prop'
        Description = 'property'
        Code.Strings = (
          'property | read  write;')
      end>
    SubAnalyzers = <>
    SampleText.Strings = (
      '{Syntax highlighting}'
      '  #ifdef'
      '  #endif'
      'procedure Button1Click(Sender: TObject);'
      'var'
      ' Number: integer;'
      ' FloatNumber: double;'
      'begin'
      ' Number := 123;  // View integer number style'
      
        ' Form.Caprion := '#39'This Number is '#39' + IntToStr(Number); // View s' +
        'tring style'
      ' Inc(Number, $1FA7); // View HEX style'
      ' {Assembler style}'
      ' asm'
      '   MOV  AX, 1234H'
      '   MOV Number, AX'
      ' end;'
      'end;')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    MarkedBlockStyle = 'Marked block'
    LexerName = 'Pascal script'
    SkipSpaces = False
    Notes.Strings = (
      'This lexer is used in Inno Setup to hilite [Code] blocks.')
    Internal = True
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal24: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftColor
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftColor
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'function tree'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'class tree'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Line break'
        TokenType = 9
        Expression = '\z'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String3'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)""".*?("""|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String2'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\{\}\^@!%]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keywords'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'and'
              'assert'
              'break'
              'class'
              'continue'
              'def'
              'del'
              'elif'
              'else'
              'except'
              'exec'
              'finally'
              'for'
              'from'
              'global'
              'if'
              'import'
              'in'
              'is'
              'lambda'
              'not'
              'or'
              'pass'
              'print'
              'raise'
              'return'
              'try'
              'while'
              'yield')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        TokenType = 10
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Functions'
        StyleName = 'Function'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__future__'
              '__import__'
              'abs'
              'apply'
              'as'
              'buffer'
              'callable'
              'chr'
              'cmp'
              'coerce'
              'compile'
              'complex'
              'delattr'
              'dict'
              'dir'
              'divmod'
              'eval'
              'execfile'
              'False'
              'file'
              'filter'
              'float'
              'getattr'
              'globals'
              'hasattr'
              'hash'
              'help'
              'hex'
              'id'
              'input'
              'int'
              'intern'
              'isinstance'
              'issubclass'
              'iter'
              'len'
              'list'
              'locals'
              'long'
              'map'
              'max'
              'min'
              'None'
              'NotImplemented'
              'oct'
              'open'
              'ord'
              'pow'
              'range'
              'raw_input'
              'reduce'
              'reload'
              'repr'
              'round'
              'self'
              'setattr'
              'slice'
              'str'
              'True'
              'tuple'
              'type'
              'unichr'
              'unicode'
              'vars'
              'xrange'
              'zip')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        StrictParent = True
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 512
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 2
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Blocks not for tree (if,for,while)'
        ConditionList = <
          item
            TagList.Strings = (
              'else'
              'elseif'
              'for'
              'if'
              'while')
            TokenTypes = 1024
          end>
        BlockEnd = 'End of block'
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpAny
        CollapseFmt = '%s0 ...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'def'
        ConditionList = <
          item
            TagList.Strings = (
              'def')
            TokenTypes = 1024
          end>
        IdentIndex = -1
        BlockEnd = 'End of block'
        EndOfTextClose = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1 ...'
        TreeItemStyle = 'function tree'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class'
        ConditionList = <
          item
            TagList.Strings = (
              'class')
            TokenTypes = 1024
          end>
        IdentIndex = -1
        EndOfTextClose = True
        HighlightPos = cpAny
        CollapseFmt = '%s0 %s-1 ...'
        SelfClose = True
        TreeItemStyle = 'class tree'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'End of block'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 512
          end>
        BlockOffset = 2
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#!/usr/local/bin/python'
      'import string, sys'
      '""" multiline string '
      'edsdasd """'
      'if len(sys.argv)==1:'
      '    print '#39'Usage: celsius temp1 temp2 ...'#39
      '    sys.exit(0)      '
      '    ')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Line break'
      'Keyword')
    MarkedBlockStyle = 'Marked block'
    DefaultStyleName = 'Default'
    LexerName = 'Python (no folding)'
    SkipSpaces = False
    ParseEndOfLine = True
    LineComment = '#'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal29: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Std id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Preprocessor'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s) \(\* .*? (\*\) | \Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s) " (\\"|.)*? ("|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_][\w'#39']*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f][\da-f_]* |'#13#10'0o[0-7][0-7_]* |'#13#10'0b[01][01_]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+ [\d_]* (\.[\d_]*)? (e [\+\-]? \d[\d_]*)?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d[\d_]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = 
          #39'[^\\"'#39']'#39' |'#13#10#39'\\ [\\"'#39'ntbr]'#39' |'#13#10#39'\\ \d\d\d'#39' |'#13#10#39'\\x [\da-f][\da-' +
          'f]'#39
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Preproc'
        StyleName = 'Preprocessor'
        TokenType = 9
        Expression = '^\#\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\./\+\-\*:=<>&/\|\^~!\?\$%'#39']+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keyw'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'and'
              'as'
              'asr'
              'assert'
              'begin'
              'class'
              'constraint'
              'do'
              'done'
              'downto'
              'else'
              'end'
              'exception'
              'external'
              'false'
              'for'
              'fun'
              'function'
              'functor'
              'if'
              'in'
              'include'
              'inherit'
              'initializer'
              'land'
              'lazy'
              'let'
              'lor'
              'lsl'
              'lsr'
              'lxor'
              'match'
              'method'
              'mod'
              'module'
              'mutable'
              'new'
              'object'
              'of'
              'open'
              'or'
              'parser'
              'private'
              'rec'
              'sig'
              'struct'
              'then'
              'to'
              'true'
              'try'
              'type'
              'val'
              'virtual'
              'when'
              'while'
              'with')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'KeywId'
        StyleName = 'Std id'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abs'
              'abs_float'
              'acos'
              'array'
              'asin'
              'asr'
              'at_exit'
              'atan'
              'atan2'
              'bool'
              'bool_of_string'
              'ceil'
              'char'
              'char_of_int'
              'classify_float'
              'close_in'
              'close_in_noerr'
              'close_out'
              'close_out_noerr'
              'compare'
              'cos'
              'cosh'
              'decr'
              'do_at_exit'
              'epsilon_float'
              'exit'
              'exp'
              'expm1'
              'failwith'
              'float'
              'float_of_int'
              'float_of_string'
              'floor'
              'flush'
              'flush_all'
              'format'
              'format_of_string'
              'format4'
              'FP_infinite'
              'FP_nan'
              'FP_normal'
              'FP_subnormal'
              'FP_zero'
              'fpclass'
              'frexp'
              'fst'
              'ignore'
              'in_channel'
              'in_channel_length'
              'incr'
              'infinity'
              'input'
              'input_binary_int'
              'input_byte'
              'input_char'
              'input_line'
              'input_value'
              'int'
              'int_of_char'
              'int_of_float'
              'int_of_string'
              'int32'
              'int64'
              'invalid_arg'
              'land'
              'LargeFile'
              'lazy_t'
              'ldexp'
              'list'
              'lnot'
              'log'
              'log10'
              'log1p'
              'lor'
              'lsl'
              'lsr'
              'lxor'
              'max'
              'max_float'
              'max_int'
              'min'
              'min_float'
              'min_int'
              'mod'
              'mod_float'
              'modf'
              'nan'
              'nativeint'
              'neg_infinity'
              'None'
              'not'
              'Open_append'
              'Open_binary'
              'Open_creat'
              'open_flag'
              'open_in'
              'open_in_bin'
              'open_in_gen'
              'Open_nonblock'
              'open_out'
              'open_out_bin'
              'open_out_gen'
              'Open_rdonly'
              'Open_text'
              'Open_trunc'
              'Open_wronly'
              'option'
              'or'
              'Oupen_excl'
              'out_channel'
              'out_channel_length'
              'output'
              'output_binary_int'
              'output_byte'
              'output_char'
              'output_string'
              'output_value'
              'pos_in'
              'pos_out'
              'pred'
              'prerr_char'
              'prerr_endline'
              'prerr_float'
              'prerr_int'
              'prerr_newline'
              'prerr_string'
              'print_char'
              'print_endline'
              'print_float'
              'print_int'
              'print_newline'
              'print_string'
              'raise'
              'read_float'
              'read_int'
              'read_line'
              'really_input'
              'ref'
              'seek_in'
              'seek_out'
              'set_binary_mode_in'
              'set_binary_mode_out'
              'sin'
              'sinh'
              'snd'
              'Some'
              'sqrt'
              'stderr'
              'stdin'
              'stdout'
              'string'
              'string_of_bool'
              'string_of_float'
              'string_of_format'
              'string_of_int'
              'succ'
              'tan'
              'tanh'
              'truncate'
              'unit'
              'unsafe_really_input'
              'valid_float_lexem')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '(* ... *)'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin'
        ConditionList = <
          item
            TagList.Strings = (
              'begin')
            TokenTypes = 4
          end>
        BlockEnd = 'end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '1._2 + 1.2e+0_3 + '
      '0b11_00 + 0o12_ + 0xFF_AA'
      #39'a'#39' + '#39'\n'#39' + '#39'\'#39#39' + '#39'\"'#39' + '#39'\123'#39' + '#39'\xAB'#39
      '(*...........*)'
      '(*...........*)'
      '#load "test.txt";;'
      'let answer = input_line stdin in'
      'print_string ("Hello " ^ answer);'
      'print_string ", nice to meet you!\n";'
      'exit 0;;'
      '(*...........'
      '...........*)')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      'Preprocessor')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'ml mli sml thy'
    LexerName = 'Caml'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Ref:'
      'http://caml.inria.fr'
      'Test:'
      'http://caml.inria.fr/pub/old_caml_site/Examples/')
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal31: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id Func'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id SysFunc'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 11493215
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id Keyword'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id Operator'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 12615680
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id SysObject'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id Type'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id @Param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = ':Line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clRed
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '--.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)('#39'|") (\1\1|.)*? (\1|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '@Param'
        StyleName = 'Id @Param'
        Expression = '@\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-z_@][\w@]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Line :'
        StyleName = ':Line'
        Expression = '^:.+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\./\+\-\*:=<>&/\|\^~!\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'IdOp'
        StyleName = 'Id Operator'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ALL'
              'AND'
              'ANY'
              'BETWEEN'
              'EXISTS'
              'JOIN'
              'LIKE'
              'NOT'
              'NULL'
              'OR'
              'OUTER'
              'SOME')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'IdKeyw'
        StyleName = 'Id Keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'add'
              'alter'
              'as'
              'asc'
              'authorization'
              'backup'
              'begin'
              'break'
              'browse'
              'bulk'
              'by'
              'cascade'
              'case'
              'catch'
              'check'
              'checkpoint'
              'close'
              'clustered'
              'collection'
              'column'
              'commit'
              'committed'
              'compute'
              'confirm'
              'constraint'
              'contains'
              'containstable'
              'continue'
              'controlrow'
              'count'
              'create'
              'cross'
              'current'
              'current_date'
              'current_time'
              'cursor'
              'database'
              'dbcc'
              'deallocate'
              'declare'
              'default'
              'delete'
              'deny'
              'desc'
              'disk'
              'distinct'
              'distributed'
              'double'
              'drop'
              'dummy'
              'dump'
              'else'
              'end'
              'errlvl'
              'errorexit'
              'escape'
              'except'
              'exec'
              'execute'
              'exit'
              'fetch'
              'file'
              'fillfactor'
              'floppy'
              'for'
              'foreign'
              'freetext'
              'freetexttable'
              'from'
              'full'
              'function'
              'go'
              'goto'
              'grant'
              'group'
              'having'
              'holdlock'
              'identity'
              'identity_insert'
              'identitycol'
              'if'
              'in'
              'index'
              'inner'
              'insert'
              'intersect'
              'into'
              'is'
              'isolation'
              'key'
              'kill'
              'level'
              'lineno'
              'load'
              'max'
              'min'
              'mirrorexit'
              'national'
              'nocheck'
              'nonclustered'
              'of'
              'off'
              'offsets'
              'on'
              'once'
              'only'
              'open'
              'opendatasource'
              'openquery'
              'openrowset'
              'option'
              'order'
              'over'
              'percent'
              'perm'
              'permanent'
              'pipe'
              'plan'
              'precision'
              'prepare'
              'primary'
              'print'
              'privileges'
              'proc'
              'procedure'
              'processexit'
              'public'
              'raiserror'
              'read'
              'readtext'
              'reconfigure'
              'references'
              'repeatable'
              'replication'
              'restore'
              'restrict'
              'return'
              'returns'
              'revoke'
              'rollback'
              'rowcount'
              'rowguidcol'
              'rule'
              'save'
              'schema'
              'select'
              'serializable'
              'set'
              'setuser'
              'shutdown'
              'statistics'
              'table'
              'tape'
              'temp'
              'temporary'
              'textsize'
              'then'
              'to'
              'top'
              'tran'
              'transaction'
              'trigger'
              'truncate'
              'try'
              'tsequal'
              'uncommitted'
              'union'
              'unique'
              'update'
              'updatetext'
              'use'
              'values'
              'varying'
              'view'
              'waitfor'
              'when'
              'where'
              'while'
              'with'
              'work'
              'writetext'
              'xml')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'IdFunc'
        StyleName = 'Id Func'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '@@CONNECTIONS'
              '@@CPU_BUSY'
              '@@CURSOR_ROWS'
              '@@DATEFIRST'
              '@@DBTS'
              '@@ERROR'
              '@@FETCH_STATUS'
              '@@IDENTITY'
              '@@IDLE'
              '@@IO_BUSY'
              '@@LANGID'
              '@@LANGUAGE'
              '@@LOCK_TIMEOUT'
              '@@MAX_CONNECTIONS'
              '@@MAX_PRECISION'
              '@@NESTLEVEL'
              '@@OPTIONS'
              '@@PACK_RECEIVED'
              '@@PACK_SENT'
              '@@PACKET_ERRORS'
              '@@PROCID'
              '@@REMSERVER'
              '@@ROWCOUNT'
              '@@SERVERNAME'
              '@@SERVICENAME'
              '@@SPID'
              '@@TEXTSIZE'
              '@@TIMETICKS'
              '@@TOTAL_ERRORS'
              '@@TOTAL_READ'
              '@@TOTAL_WRITE'
              '@@TRANCOUNT'
              '@@VERSION'
              'ABS'
              'ACOS'
              'APP_NAME'
              'ASCII'
              'ASIN'
              'ATAN'
              'ATN2'
              'AVG'
              'CAST'
              'CEILING'
              'CHARINDEX'
              'COALESCE'
              'COL_LENGTH'
              'COL_NAME'
              'COLLATIONPROPERTY'
              'COLUMNPROPERTY'
              'CONVERT'
              'COS'
              'COT'
              'CURRENT_TIMESTAMP'
              'CURRENT_USER'
              'CURSOR_STATUS'
              'DATABASEPROPERTY'
              'DATABASEPROPERTYEX'
              'DATALENGTH'
              'DATEADD'
              'DATEDIFF'
              'DATENAME'
              'DATEPART'
              'DAY'
              'DB_ID'
              'DB_NAME'
              'DEGREES'
              'DIFFERENCE'
              'EXP'
              'FILE_ID'
              'FILE_NAME'
              'FILEGROUP_ID'
              'FILEGROUP_NAME'
              'FILEGROUPPROPERTY'
              'FILEPROPERTY'
              'FLOOR'
              'FN_HELPCOLLATIONS'
              'FN_LISTEXTENDEDPROPERTY'
              'FN_SERVERSHAREDDRIVES'
              'FN_TRACE_GETEVENTINFO'
              'FN_TRACE_GETFILTERINFO'
              'FN_TRACE_GETINFO'
              'FN_TRACE_GETTABLE'
              'FN_VIRTUALFILESTATS'
              'FORMATMESSAGE'
              'FULLTEXTCATALOGPROPERTY'
              'FULLTEXTSERVICEPROPERTY'
              'GETANSINULL'
              'GETDATE'
              'GETUTCDATE'
              'HAS_DBACCESS'
              'HOST_ID'
              'HOST_NAME'
              'IDENT_CURRENT'
              'IDENT_INCR'
              'IDENT_SEED'
              'INDEX_COL'
              'INDEXKEY_PROPERTY'
              'INDEXPROPERTY'
              'IS_MEMBER'
              'IS_SRVROLEMEMBER'
              'ISDATE'
              'ISNULL'
              'ISNUMERIC'
              'LEFT'
              'LEN'
              'LOG'
              'LOG10'
              'LOWER'
              'LTRIM'
              'MONTH'
              'NEWID'
              'NULLIF'
              'OBJECT_ID'
              'OBJECT_NAME'
              'OBJECTPROPERTY'
              'PARSENAME'
              'PATINDEX'
              'PERMISSIONS'
              'PI'
              'POWER'
              'QUOTENAME'
              'RADIANS'
              'RAND'
              'REPLACE'
              'REPLICATE'
              'REVERSE'
              'RIGHT'
              'ROUND'
              'ROWCOUNT_BIG'
              'RTRIM'
              'SCOPE_IDENTITY'
              'SERVERPROPERTY'
              'SESSION_USER'
              'SESSIONPROPERTY'
              'SIGN'
              'SIN'
              'SOUNDEX'
              'SPACE'
              'SQL_VARIANT_PROPERTY'
              'SQRT'
              'SQUARE'
              'STATS_DATE'
              'STR'
              'STUFF'
              'SUBSTRING'
              'SUM'
              'SUSER_SID'
              'SUSER_SNAME'
              'SYSTEM_USER'
              'TAN'
              'TEXTPTR'
              'TEXTVALID'
              'TYPEPROPERTY'
              'UNICODE'
              'UPPER'
              'USER'
              'USER_ID'
              'USER_NAME'
              'YEAR')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'IdSysFunc'
        StyleName = 'Id SysFunc'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'sp_abort_xact'
              'sp_add_agent_parameter'
              'sp_add_agent_profile'
              'sp_add_server_sortinfo'
              'sp_addalias'
              'sp_addapprole'
              'sp_addarticle'
              'sp_adddistpublisher'
              'sp_adddistributiondb'
              'sp_adddistributor'
              'sp_addextendedproc'
              'sp_addgroup'
              'sp_addlinkedserver'
              'sp_addlinkedsrvlogin'
              'sp_addlogin'
              'sp_addmergearticle'
              'sp_addmergefilter'
              'sp_addmergepublication'
              'sp_addmergepullsubscription'
              'sp_addmergepullsubscription_agent'
              'sp_addmergesubscription'
              'sp_addmessage'
              'sp_addpublication'
              'sp_addpublication_snapshot'
              'sp_addpublisher'
              'sp_addpullsubscription'
              'sp_addpullsubscription_agent'
              'sp_addremotelogin'
              'sp_addrole'
              'sp_addrolemember'
              'sp_addserver'
              'sp_addsrvrolemember'
              'sp_addsubscriber'
              'sp_addsubscriber_schedule'
              'sp_addsubscription'
              'sp_addsynctriggers'
              'sp_addtype'
              'sp_addumpdevice'
              'sp_adduser'
              'sp_altermessage'
              'sp_approlepassword'
              'sp_article_validation'
              'sp_articlecolumn'
              'sp_articlefilter'
              'sp_articlesynctranprocs'
              'sp_articleview'
              'sp_attach_db'
              'sp_attach_single_file_db'
              'sp_autostats'
              'sp_bindefault'
              'sp_bindrule'
              'sp_bindsession'
              'sp_blockcnt'
              'sp_catalogs'
              'sp_catalogs_rowset'
              'sp_certify_removable'
              'sp_change_subscription_properties'
              'sp_change_users_login'
              'sp_changearticle'
              'sp_changedbowner'
              'sp_changedistpublisher'
              'sp_changedistributiondb'
              'sp_changedistributor_password'
              'sp_changedistributor_property'
              'sp_changegroup'
              'sp_changemergearticle'
              'sp_changemergefilter'
              'sp_changemergepublication'
              'sp_changemergepullsubscription'
              'sp_changemergesubscription'
              'sp_changeobjectowner'
              'sp_changepublication'
              'sp_changesubscriber'
              'sp_changesubscriber_schedule'
              'sp_changesubscription'
              'sp_changesubstatus'
              'sp_check_for_sync_trigger'
              'sp_check_removable'
              'sp_check_removable_sysusers'
              'sp_check_sync_trigger'
              'sp_checknames'
              'sp_cleanupwebtask'
              'sp_column_privileges'
              'sp_column_privileges_ex'
              'sp_column_privileges_rowset'
              'sp_columns'
              'sp_columns_ex'
              'sp_columns_rowset'
              'sp_commit_xact'
              'sp_configure'
              'sp_create_removable'
              'sp_createorphan'
              'sp_createstats'
              'sp_cursor'
              'sp_cursor_list'
              'sp_cursorclose'
              'sp_cursorexecute'
              'sp_cursorfetch'
              'sp_cursoropen'
              'sp_cursoroption'
              'sp_cursorprepare'
              'sp_cursorunprepare'
              'sp_databases'
              'sp_datatype_info'
              'sp_db_upgrade'
              'sp_dbcmptlevel'
              'sp_dbfixedrolepermission'
              'sp_dboption'
              'sp_dbremove'
              'sp_ddopen'
              'sp_defaultdb'
              'sp_defaultlanguage'
              'sp_deletemergeconflictrow'
              'sp_denylogin'
              'sp_depends'
              'sp_describe_cursor'
              'sp_describe_cursor_columns'
              'sp_describe_cursor_tables'
              'sp_detach_db'
              'sp_diskdefault'
              'sp_distcounters'
              'sp_drop_agent_parameter'
              'sp_drop_agent_profile'
              'sp_dropalias'
              'sp_dropapprole'
              'sp_droparticle'
              'sp_dropdevice'
              'sp_dropdistpublisher'
              'sp_dropdistributiondb'
              'sp_dropdistributor'
              'sp_dropextendedproc'
              'sp_dropgroup'
              'sp_droplinkedsrvlogin'
              'sp_droplogin'
              'sp_dropmergearticle'
              'sp_dropmergefilter'
              'sp_dropmergepublication'
              'sp_dropmergepullsubscription'
              'sp_dropmergesubscription'
              'sp_dropmessage'
              'sp_droporphans'
              'sp_droppublication'
              'sp_droppublisher'
              'sp_droppullsubscription'
              'sp_dropremotelogin'
              'sp_droprole'
              'sp_droprolemember'
              'sp_dropserver'
              'sp_dropsrvrolemember'
              'sp_dropsubscriber'
              'sp_dropsubscription'
              'sp_droptype'
              'sp_dropuser'
              'sp_dropwebtask'
              'sp_dsninfo'
              'sp_enumcodepages'
              'sp_enumcustomresolvers'
              'sp_enumdsn'
              'sp_enumfullsubscribers'
              'sp_enumoledbdatasources'
              'sp_execute'
              'sp_executesql'
              'sp_fallback_MS_sel_fb_svr'
              'sp_fetchshowcmdsinput'
              'sp_fixindex'
              'sp_fkeys'
              'sp_foreign_keys_rowset'
              'sp_foreignkeys'
              'sp_fulltext_catalog'
              'sp_fulltext_column'
              'sp_fulltext_database'
              'sp_fulltext_getdata'
              'sp_fulltext_service'
              'sp_fulltext_table'
              'sp_generatefilters'
              'sp_get_distributor'
              'sp_getarticlepkcolbitmap'
              'sp_getbindtoken'
              'sp_GetMBCSCharLen'
              'sp_getmergedeletetype'
              'sp_gettypestring'
              'sp_grant_publication_access'
              'sp_grantdbaccess'
              'sp_grantlogin'
              'sp_help'
              'sp_help_agent_default'
              'sp_help_agent_parameter'
              'sp_help_agent_profile'
              'sp_help_fulltext_catalogs'
              'sp_help_fulltext_catalogs_cursor'
              'sp_help_fulltext_columns'
              'sp_help_fulltext_columns_cursor'
              'sp_help_fulltext_tables'
              'sp_help_fulltext_tables_cursor'
              'sp_help_publication_access'
              'sp_helpallowmerge_publication'
              'sp_helparticle'
              'sp_helparticlecolumns'
              'sp_helpconstraint'
              'sp_helpdb'
              'sp_helpdbfixedrole'
              'sp_helpdevice'
              'sp_helpdistpublisher'
              'sp_helpdistributiondb'
              'sp_helpdistributor'
              'sp_helpdistributor_properties'
              'sp_helpextendedproc'
              'sp_helpfile'
              'sp_helpfilegroup'
              'sp_helpgroup'
              'sp_helpindex'
              'sp_helplanguage'
              'sp_helplog'
              'sp_helplogins'
              'sp_helpmergearticle'
              'sp_helpmergearticleconflicts'
              'sp_helpmergeconflictrows'
              'sp_helpmergedeleteconflictrows'
              'sp_helpmergefilter'
              'sp_helpmergepublication'
              'sp_helpmergepullsubscription'
              'sp_helpmergesubscription'
              'sp_helpntgroup'
              'sp_helppublication'
              'sp_helppublication_snapshot'
              'sp_helppublicationsync'
              'sp_helppullsubscription'
              'sp_helpremotelogin'
              'sp_helpreplicationdb'
              'sp_helpreplicationdboption'
              'sp_helpreplicationoption'
              'sp_helprole'
              'sp_helprolemember'
              'sp_helprotect'
              'sp_helpserver'
              'sp_helpsort'
              'sp_helpsql'
              'sp_helpsrvrole'
              'sp_helpsrvrolemember'
              'sp_helpstartup'
              'sp_helpsubscriber'
              'sp_helpsubscriberinfo'
              'sp_helpsubscription'
              'sp_helpsubscription_properties'
              'sp_helptext'
              'sp_helptrigger'
              'sp_helpuser'
              'sp_indexes'
              'sp_indexes_rowset'
              'sp_indexoption'
              'sp_isarticlecolbitset'
              'sp_IsMBCSLeadByte'
              'sp_link_publication'
              'sp_linkedservers'
              'sp_linkedservers_rowset'
              'sp_lock'
              'sp_lockinfo'
              'sp_logdevice'
              'sp_makestartup'
              'sp_makewebtask'
              'sp_mergedummyupdate'
              'sp_mergesubscription_cleanup'
              'sp_mergesubscriptioncleanup'
              'sp_monitor'
              'sp_MS_marksystemobject'
              'sp_MS_replication_installed'
              'sp_MS_upd_sysobj_category'
              'sp_MSactivate_auto_sub'
              'sp_MSadd_distributor_alerts_and_responses'
              'sp_MSadd_mergereplcommand'
              'sp_MSadd_repl_job'
              'sp_MSaddanonymousreplica'
              'sp_MSaddarticletocontents'
              'sp_MSaddexecarticle'
              'sp_MSaddguidcolumn'
              'sp_MSaddguidindex'
              'sp_MSaddinitialarticle'
              'sp_MSaddinitialpublication'
              'sp_MSaddinitialsubscription'
              'sp_MSaddlogin_implicit_ntlogin'
              'sp_MSaddmergepub_snapshot'
              'sp_MSaddmergetriggers'
              'sp_MSaddpub_snapshot'
              'sp_MSaddpubtocontents'
              'sp_MSaddupdatetrigger'
              'sp_MSadduser_implicit_ntlogin'
              'sp_MSarticlecleanup'
              'sp_MSarticletextcol'
              'sp_MSbelongs'
              'sp_MSchange_priority'
              'sp_MSchangearticleresolver'
              'sp_MScheck_agent_instance'
              'sp_MScheck_uid_owns_anything'
              'sp_MScheckatpublisher'
              'sp_MScheckexistsgeneration'
              'sp_MScheckmetadatamatch'
              'sp_MScleanup_subscription'
              'sp_MScleanuptask'
              'sp_MScontractsubsnb'
              'sp_MScreate_dist_tables'
              'sp_MScreate_distributor_tables'
              'sp_MScreate_mergesystables'
              'sp_MScreate_pub_tables'
              'sp_MScreate_replication_checkup_agent'
              'sp_MScreate_replication_status_table'
              'sp_MScreate_sub_tables'
              'sp_MScreateglobalreplica'
              'sp_MScreateretry'
              'sp_MSdbuseraccess'
              'sp_MSdbuserpriv'
              'sp_MSdeletecontents'
              'sp_MSdeletepushagent'
              'sp_MSdeleteretry'
              'sp_MSdelrow'
              'sp_MSdelsubrows'
              'sp_MSdependencies'
              'sp_MSdoesfilterhaveparent'
              'sp_MSdrop_6x_replication_agent'
              'sp_MSdrop_distributor_alerts_and_responses'
              'sp_MSdrop_mergesystables'
              'sp_MSdrop_object'
              'sp_MSdrop_pub_tables'
              'sp_MSdrop_replcom'
              'sp_MSdrop_repltran'
              'sp_MSdrop_rladmin'
              'sp_MSdrop_rlcore'
              'sp_MSdrop_rlrecon'
              'sp_MSdroparticleprocs'
              'sp_MSdroparticletombstones'
              'sp_MSdroparticletriggers'
              'sp_MSdropconstraints'
              'sp_MSdropmergepub_snapshot'
              'sp_MSdropretry'
              'sp_MSdummyupdate'
              'sp_MSenum_replication_agents'
              'sp_MSenum_replication_job'
              'sp_MSenum3rdpartypublications'
              'sp_MSenumallpublications'
              'sp_MSenumchanges'
              'sp_MSenumcolumns'
              'sp_MSenumdeletesmetadata'
              'sp_MSenumgenerations'
              'sp_MSenummergepublications'
              'sp_MSenumpartialchanges'
              'sp_MSenumpartialdeletes'
              'sp_MSenumpubreferences'
              'sp_MSenumreplicas'
              'sp_MSenumretries'
              'sp_MSenumschemachange'
              'sp_MSenumtranpublications'
              'sp_MSexists_file'
              'sp_MSexpandbelongs'
              'sp_MSexpandnotbelongs'
              'sp_MSexpandsubsnb'
              'sp_MSfilterclause'
              'sp_MSflush_access_cache'
              'sp_MSflush_command'
              'sp_MSforeach_worker'
              'sp_MSforeachdb'
              'sp_MSforeachtable'
              'sp_MSgen_sync_tran_procs'
              'sp_MSgenreplnickname'
              'sp_MSgentablenickname'
              'sp_MSget_col_position'
              'sp_MSget_colinfo'
              'sp_MSget_oledbinfo'
              'sp_MSget_publisher_rpc'
              'sp_MSget_qualifed_name'
              'sp_MSget_synctran_commands'
              'sp_MSget_type'
              'sp_MSgetalertinfo'
              'sp_MSgetchangecount'
              'sp_MSgetconflictinsertproc'
              'sp_MSgetlastrecgen'
              'sp_MSgetlastsentgen'
              'sp_MSgetonerow'
              'sp_MSgetreplicainfo'
              'sp_MSgetreplnick'
              'sp_MSgetrowmetadata'
              'sp_MSguidtostr'
              'sp_MShelp_distdb'
              'sp_MShelp_replication_status'
              'sp_MShelpcolumns'
              'sp_MShelpfulltextindex'
              'sp_MShelpindex'
              'sp_MShelpmergearticles'
              'sp_MShelpobjectpublications'
              'sp_MShelptype'
              'sp_MSIfExistsRemoteLogin'
              'sp_MSindexcolfrombin'
              'sp_MSindexspace'
              'sp_MSinit_replication_perfmon'
              'sp_MSinsertcontents'
              'sp_MSinsertdeleteconflict'
              'sp_MSinsertgenhistory'
              'sp_MSinsertschemachange'
              'sp_MSis_col_replicated'
              'sp_MSis_pk_col'
              'sp_MSkilldb'
              'sp_MSload_replication_status'
              'sp_MSlocktable'
              'sp_MSloginmappings'
              'sp_MSmakearticleprocs'
              'sp_MSmakeconflictinsertproc'
              'sp_MSmakeexpandproc'
              'sp_MSmakegeneration'
              'sp_MSmakeinsertproc'
              'sp_MSmakejoinfilter'
              'sp_MSmakeselectproc'
              'sp_MSmakesystableviews'
              'sp_MSmaketempinsertproc'
              'sp_MSmakeupdateproc'
              'sp_MSmakeviewproc'
              'sp_MSmaptype'
              'sp_MSmark_proc_norepl'
              'sp_MSmatchkey'
              'sp_MSmergepublishdb'
              'sp_MSmergesubscribedb'
              'sp_MSobjectprivs'
              'sp_MSpad_command'
              'sp_MSproxiedmetadata'
              'sp_MSpublicationcleanup'
              'sp_MSpublicationview'
              'sp_MSpublishdb'
              'sp_MSrefcnt'
              'sp_MSregistersubscription'
              'sp_MSreinit_failed_subscriptions'
              'sp_MSrepl_addrolemember'
              'sp_MSrepl_dbrole'
              'sp_MSrepl_droprolemember'
              'sp_MSrepl_encrypt'
              'sp_MSrepl_linkedservers_rowset'
              'sp_MSrepl_startup'
              'sp_MSreplcheck_connection'
              'sp_MSreplcheck_publish'
              'sp_MSreplcheck_pull'
              'sp_MSreplcheck_subscribe'
              'sp_MSreplicationcompatlevel'
              'sp_MSreplrole'
              'sp_MSreplsup_table_has_pk'
              'sp_MSscript_beginproc'
              'sp_MSscript_begintrig1'
              'sp_MSscript_begintrig2'
              'sp_MSscript_delete_statement'
              'sp_MSscript_dri'
              'sp_MSscript_endproc'
              'sp_MSscript_endtrig'
              'sp_MSscript_insert_statement'
              'sp_MSscript_multirow_trigger'
              'sp_MSscript_params'
              'sp_MSscript_security'
              'sp_MSscript_singlerow_trigger'
              'sp_MSscript_sync_del_proc'
              'sp_MSscript_sync_del_trig'
              'sp_MSscript_sync_ins_proc'
              'sp_MSscript_sync_ins_trig'
              'sp_MSscript_sync_upd_proc'
              'sp_MSscript_sync_upd_trig'
              'sp_MSscript_trigger_assignment'
              'sp_MSscript_trigger_exec_rpc'
              'sp_MSscript_trigger_fetch_statement'
              'sp_MSscript_trigger_update_checks'
              'sp_MSscript_trigger_updates'
              'sp_MSscript_trigger_variables'
              'sp_MSscript_update_statement'
              'sp_MSscript_where_clause'
              'sp_MSscriptdatabase'
              'sp_MSscriptdb_worker'
              'sp_MSsetaccesslist'
              'sp_MSsetalertinfo'
              'sp_MSsetartprocs'
              'sp_MSsetbit'
              'sp_MSsetconflictscript'
              'sp_MSsetconflicttable'
              'sp_MSsetfilteredstatus'
              'sp_MSsetfilterparent'
              'sp_MSsetlastrecgen'
              'sp_MSsetlastsentgen'
              'sp_MSsetreplicainfo'
              'sp_MSsetreplicastatus'
              'sp_MSsetrowmetadata'
              'sp_MSsettopology'
              'sp_MSsetupbelongs'
              'sp_MSSQLDMO70_version'
              'sp_MSSQLOLE_version'
              'sp_MSSQLOLE65_version'
              'sp_MSsubscribedb'
              'sp_MSsubscriptions'
              'sp_MSsubscriptionvalidated'
              'sp_MSsubsetpublication'
              'sp_MStable_has_unique_index'
              'sp_MStable_not_modifiable'
              'sp_MStablechecks'
              'sp_MStablekeys'
              'sp_MStablenamefromnick'
              'sp_MStablenickname'
              'sp_MStablerefs'
              'sp_MStablespace'
              'sp_MStestbit'
              'sp_MStextcolstatus'
              'sp_MSunc_to_drive'
              'sp_MSuniquecolname'
              'sp_MSuniquename'
              'sp_MSuniqueobjectname'
              'sp_MSuniquetempname'
              'sp_MSunmarkreplinfo'
              'sp_MSunregistersubscription'
              'sp_MSupdate_agenttype_default'
              'sp_MSupdate_replication_status'
              'sp_MSupdatecontents'
              'sp_MSupdategenhistory'
              'sp_MSupdateschemachange'
              'sp_MSupdatesysmergearticles'
              'sp_msupg_createcatalogcomputedcols'
              'sp_msupg_dosystabcatalogupgrades'
              'sp_msupg_dropcatalogcomputedcols'
              'sp_msupg_recreatecatalogfaketables'
              'sp_msupg_recreatesystemviews'
              'sp_msupg_removesystemcomputedcolumns'
              'sp_msupg_upgradecatalog'
              'sp_MSuplineageversion'
              'sp_MSvalidatearticle'
              'sp_OACreate'
              'sp_OADestroy'
              'sp_OAGetErrorInfo'
              'sp_OAGetProperty'
              'sp_OAMethod'
              'sp_OASetProperty'
              'sp_OAStop'
              'sp_objectfilegroup'
              'sp_oledbinfo'
              'sp_password'
              'sp_pkeys'
              'sp_prepare'
              'sp_primary_keys_rowset'
              'sp_primarykeys'
              'sp_probe_xact'
              'sp_procedure_params_rowset'
              'sp_procedures_rowset'
              'sp_processinfo'
              'sp_processmail'
              'sp_procoption'
              'sp_provider_types_rowset'
              'sp_publication_validation'
              'sp_publishdb'
              'sp_recompile'
              'sp_refreshsubscriptions'
              'sp_refreshview'
              'sp_reinitmergepullsubscription'
              'sp_reinitmergesubscription'
              'sp_reinitpullsubscription'
              'sp_reinitsubscription'
              'sp_remoteoption'
              'sp_remove_tempdb_file'
              'sp_remove_xact'
              'sp_removedbreplication'
              'sp_removesrvreplication'
              'sp_rename'
              'sp_renamedb'
              'sp_replcmds'
              'sp_replcounters'
              'sp_repldone'
              'sp_replflush'
              'sp_replica'
              'sp_replication_agent_checkup'
              'sp_replicationdboption'
              'sp_replicationoption'
              'sp_replincrementlsn'
              'sp_replpostcmd'
              'sp_replsetoriginator'
              'sp_replshowcmds'
              'sp_replsync'
              'sp_repltrans'
              'sp_replupdateschema'
              'sp_reset_connection'
              'sp_revoke_publication_access'
              'sp_revokedbaccess'
              'sp_revokelogin'
              'sp_runwebtask'
              'sp_scan_xact'
              'sp_schemata_rowset'
              'sp_script_synctran_commands'
              'sp_scriptdelproc'
              'sp_scriptinsproc'
              'sp_scriptmappedupdproc'
              'sp_scriptpkwhereclause'
              'sp_scriptupdateparams'
              'sp_scriptupdproc'
              'sp_sdidebug'
              'sp_sem_start_mail'
              'sp_server_info'
              'sp_serveroption'
              'sp_setapprole'
              'sp_setnetname'
              'sp_spaceused'
              'sp_special_columns'
              'sp_sproc_columns'
              'sp_sqlexec'
              'sp_sqlregister'
              'sp_srvrolepermission'
              'sp_start_xact'
              'sp_stat_xact'
              'sp_statistics'
              'sp_statistics_rowset'
              'sp_stored_procedures'
              'sp_subscribe'
              'sp_subscription_cleanup'
              'sp_subscriptioncleanup'
              'sp_table_privileges'
              'sp_table_privileges_ex'
              'sp_table_privileges_rowset'
              'sp_table_validation'
              'sp_tableoption'
              'sp_tables'
              'sp_tables_ex'
              'sp_tables_info_rowset'
              'sp_tables_rowset'
              'sp_tempdbspace'
              'sp_unbindefault'
              'sp_unbindrule'
              'sp_unmakestartup'
              'sp_unprepare'
              'sp_unsubscribe'
              'sp_updatestats'
              'sp_user_counter1'
              'sp_user_counter10'
              'sp_user_counter2'
              'sp_user_counter3'
              'sp_user_counter4'
              'sp_user_counter5'
              'sp_user_counter6'
              'sp_user_counter7'
              'sp_user_counter8'
              'sp_user_counter9'
              'sp_validatelogins'
              'sp_validlang'
              'sp_validname'
              'sp_who'
              'sp_who2'
              'spt_committab'
              'spt_datatype_info'
              'spt_datatype_info_ext'
              'spt_fallback_db'
              'spt_fallback_dev'
              'spt_fallback_usg'
              'spt_monitor'
              'spt_provider_types'
              'spt_server_info'
              'spt_values'
              'xp_availablemedia'
              'xp_check_query_results'
              'xp_cleanupwebtask'
              'xp_cmdshell'
              'xp_deletemail'
              'xp_dirtree'
              'xp_displayparamstmt'
              'xp_dropwebtask'
              'xp_dsninfo'
              'xp_enum_activescriptengines'
              'xp_enum_oledb_providers'
              'xp_enumcodepages'
              'xp_enumdsn'
              'xp_enumerrorlogs'
              'xp_enumgroups'
              'xp_eventlog'
              'xp_execresultset'
              'xp_fileexist'
              'xp_findnextmsg'
              'xp_fixeddrives'
              'xp_get_mapi_default_profile'
              'xp_get_mapi_profiles'
              'xp_get_tape_devices'
              'xp_getfiledetails'
              'xp_getnetname'
              'xp_grantlogin'
              'xp_initcolvs'
              'xp_intersectbitmaps'
              'xp_load_dummy_handlers'
              'xp_logevent'
              'xp_loginconfig'
              'xp_logininfo'
              'xp_makewebtask'
              'xp_mergexpusage'
              'xp_msver'
              'xp_msx_enlist'
              'xp_ntsec_enumdomains'
              'xp_ntsec_enumgroups'
              'xp_ntsec_enumusers'
              'xp_oledbinfo'
              'xp_param_dump'
              'xp_perfend'
              'xp_perfmonitor'
              'xp_perfsample'
              'xp_perfstart'
              'xp_printstatements'
              'xp_proxiedmetadata'
              'xp_qv'
              'xp_readerrorlog'
              'xp_readmail'
              'xp_regaddmultistring'
              'xp_regdeletekey'
              'xp_regdeletevalue'
              'xp_regenumvalues'
              'xp_regread'
              'xp_regremovemultistring'
              'xp_regwrite'
              'xp_revokelogin'
              'xp_runwebtask'
              'xp_sendmail'
              'xp_servicecontrol'
              'xp_showcolv'
              'xp_showlineage'
              'xp_snmp_getstate'
              'xp_snmp_raisetrap'
              'xp_sprintf'
              'xp_sqlagent_enum_jobs'
              'xp_sqlagent_is_starting'
              'xp_sqlagent_monitor'
              'xp_sqlagent_notify'
              'xp_sqlinventory'
              'xp_sqlmaint'
              'xp_sqlregister'
              'xp_sqltrace'
              'xp_sscanf'
              'xp_startmail'
              'xp_stopmail'
              'xp_subdirs'
              'xp_terminate_process'
              'xp_test_mapi_profile'
              'xp_trace_addnewqueue'
              'xp_trace_deletequeuedefinition'
              'xp_trace_destroyqueue'
              'xp_trace_enumqueuedefname'
              'xp_trace_enumqueuehandles'
              'xp_trace_eventclassrequired'
              'xp_trace_flushqueryhistory'
              'xp_trace_generate_event'
              'xp_trace_getappfilter'
              'xp_trace_getconnectionidfilter'
              'xp_trace_getcpufilter'
              'xp_trace_getdbidfilter'
              'xp_trace_getdurationfilter'
              'xp_trace_geteventfilter'
              'xp_trace_geteventnames'
              'xp_trace_getevents'
              'xp_trace_gethostfilter'
              'xp_trace_gethpidfilter'
              'xp_trace_getindidfilter'
              'xp_trace_getntdmfilter'
              'xp_trace_getntnmfilter'
              'xp_trace_getobjidfilter'
              'xp_trace_getqueueautostart'
              'xp_trace_getqueuecreateinfo'
              'xp_trace_getqueuedestination'
              'xp_trace_getqueueproperties'
              'xp_trace_getreadfilter'
              'xp_trace_getserverfilter'
              'xp_trace_getseverityfilter'
              'xp_trace_getspidfilter'
              'xp_trace_gettextfilter'
              'xp_trace_getuserfilter'
              'xp_trace_getwritefilter'
              'xp_trace_loadqueuedefinition'
              'xp_trace_opentracefile'
              'xp_trace_pausequeue'
              'xp_trace_restartqueue'
              'xp_trace_savequeuedefinition'
              'xp_trace_setappfilter'
              'xp_trace_setconnectionidfilter'
              'xp_trace_setcpufilter'
              'xp_trace_setdbidfilter'
              'xp_trace_setdurationfilter'
              'xp_trace_seteventclassrequired'
              'xp_trace_seteventfilter'
              'xp_trace_sethostfilter'
              'xp_trace_sethpidfilter'
              'xp_trace_setindidfilter'
              'xp_trace_setntdmfilter'
              'xp_trace_setntnmfilter'
              'xp_trace_setobjidfilter'
              'xp_trace_setqueryhistory'
              'xp_trace_setqueueautostart'
              'xp_trace_setqueuecreateinfo'
              'xp_trace_setqueuedestination'
              'xp_trace_setreadfilter'
              'xp_trace_setserverfilter'
              'xp_trace_setseverityfilter'
              'xp_trace_setspidfilter'
              'xp_trace_settextfilter'
              'xp_trace_setuserfilter'
              'xp_trace_setwritefilter'
              'xp_trace_startconsumer'
              'xp_trace_toeventlogconsumer'
              'xp_trace_tofileconsumer'
              'xp_unc_to_drive'
              'xp_unload_dummy_handlers'
              'xp_updatecolvbm'
              'xp_updatelineage'
              'xp_varbintohexstr'
              'xp_writesqlinfo')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'IdSysObject'
        StyleName = 'Id SysObject'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'sysallocations'
              'sysalternates'
              'sysaltfiles'
              'syscacheobjects'
              'syscharsets'
              'syscolumns'
              'syscomments'
              'sysconfigures'
              'sysconstraints'
              'syscurconfigs'
              'syscursorcolumns'
              'syscursorrefs'
              'syscursors'
              'syscursortables'
              'sysdatabases'
              'sysdepends'
              'sysdevices'
              'sysfilegroups'
              'sysfiles'
              'sysfiles1'
              'sysforeignkeys'
              'sysfulltextcatalogs'
              'sysindexes'
              'sysindexkeys'
              'syslanguages'
              'syslockinfo'
              'syslocks'
              'syslogins'
              'sysmembers'
              'sysmessages'
              'sysobjects'
              'sysoledbusers'
              'sysperfinfo'
              'syspermissions'
              'sysprocesses'
              'sysprotects'
              'sysreferences'
              'SYSREMOTE_CATALOGS'
              'SYSREMOTE_COLUMN_PRIVILEGES'
              'SYSREMOTE_COLUMNS'
              'SYSREMOTE_FOREIGN_KEYS'
              'SYSREMOTE_INDEXES'
              'SYSREMOTE_PRIMARY_KEYS'
              'SYSREMOTE_PROVIDER_TYPES'
              'SYSREMOTE_SCHEMATA'
              'SYSREMOTE_STATISTICS'
              'SYSREMOTE_TABLE_PRIVILEGES'
              'SYSREMOTE_TABLES'
              'SYSREMOTE_VIEWS'
              'sysremotelogins'
              'syssegments'
              'sysservers'
              'systypes'
              'sysusers'
              'sysxlogins')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'IdTypes'
        StyleName = 'Id Type'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'bigint'
              'binary'
              'bit'
              'char'
              'character'
              'datetime'
              'dec'
              'decimal'
              'float'
              'image'
              'int'
              'integer'
              'money'
              'nchar'
              'ntext'
              'numeric'
              'nvarchar'
              'real'
              'smalldatetime'
              'smallint'
              'smallmoney'
              'sqlvariant'
              'sysname'
              'text'
              'timestamp'
              'tinyint'
              'uniqueidentifier'
              'varbinary'
              'varchar')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '/* ... */'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'region'
        ConditionList = <
          item
            TagList.Strings = (
              'region')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'region end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'region end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endregion')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'go'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';'
              'go')
            TokenTypes = 12
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'proc'
        ConditionList = <
          item
            TagList.Strings = (
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'create')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'go'
        NameFmt = '%sz0'
        RefToCondEnd = True
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1~s[AS]+1'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'view'
        ConditionList = <
          item
            TagList.Strings = (
              'view')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'create')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'go'
        NameFmt = '%sz0'
        RefToCondEnd = True
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1~s[AS]+1'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'trigger'
        ConditionList = <
          item
            TagList.Strings = (
              'trigger')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'create')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'go'
        NameFmt = '%sz0'
        RefToCondEnd = True
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1~s[ON]+1'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'table'
        ConditionList = <
          item
            TagList.Strings = (
              'table')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'alter'
              'create')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'go'
        NameFmt = '%sz0'
        RefToCondEnd = True
        HighlightPos = cpAny
        DrawStaple = True
        CollapseFmt = '%s0 %s-1~s[(]+1'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'create_alt'
        Enabled = False
        ConditionList = <>
        BlockEnd = 'go'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'tran'
        ConditionList = <
          item
            TagList.Strings = (
              'tran')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'begin')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'tran end'
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'tran end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'tran')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'commit')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'try'
        ConditionList = <
          item
            TagList.Strings = (
              'try')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'begin')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'try end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'try end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'try')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'catch'
        ConditionList = <
          item
            TagList.Strings = (
              'catch')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'begin')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'catch end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'catch end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'catch')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin'
        ConditionList = <
          item
            TagList.Strings = (
              'begin'
              'case')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'if exists (select * from sysdatabases where name='#39'pubs'#39')'
      'begin'
      '  raiserror('#39'Dropping existing pubs database ....'#39',0,1)'
      '  DROP database pubs'
      'end'
      'GO'
      ''
      '--Long line'
      'EXECUTE (N'#39'CREATE DATABASE Northwind'
      
        '  ON PRIMARY (NAME = N'#39#39'Northwind'#39#39', FILENAME = N'#39#39#39' + @device_d' +
        'irectory + N'#39'northwnd.mdf'#39#39')'
      
        '  LOG ON (NAME = N'#39#39'Northwind_log'#39#39',  FILENAME = N'#39#39#39' + @device_' +
        'directory + N'#39'northwnd.ldf'#39#39')'#39')'
      'go'
      ''
      'CREATE VIEW [dbo].[vDMPrep]'
      'AS'
      '  Select 1 from dbo'
      'GO  '
      ''
      '/*'
      'Table'
      '*/'
      'CREATE TABLE [dbo].[CustomerDemographics] '
      #9'([CustomerTypeID] [nchar] (10) NOT NULL ,'
      #9'[CustomerDesc] [ntext] NULL '
      ')  ON [PRIMARY] '
      'GO'#9#9
      ''
      '/*'
      'Stored proc'
      '*/'
      'CREATE PROCEDURE reptq3 @lolimit money, @hilimit money,'
      '@type char(12)'
      'AS'
      'select '
      
        #9'case when grouping(pub_id) = 1 then '#39'ALL'#39' else pub_id end as pu' +
        'b_id, '
      #9'case when grouping(type) = 1 then '#39'ALL'#39' else type end as type, '
      #9'count(title_id) as cnt'
      'from titles'
      
        'where price >@lolimit AND price <@hilimit AND type = @type OR ty' +
        'pe LIKE '#39'%cook%'#39
      'GO'
      ''
      ':On Error exit')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    Gramma.Gramma = 
      'name = <Identifier> | ('#39'['#39' <Identifier> '#39']'#39');'#13#10'names = name | (n' +
      'ame '#39'.'#39' name) | (name '#39'.'#39' name '#39'.'#39' name);'#13#10'create = ('#39'Create'#39'|'#39'A' +
      'lter'#39') ('#39'Table'#39'|'#39'View'#39'|'#39'Trigger'#39') names;'#13#10
    MarkedBlockStyle = 'Marked block'
    Extentions = 'sql tql'
    LexerName = 'T-SQL'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Test:'
      'http://www.microsoft.com/download/en/details.aspx?id=23654'
      'http://codeplex.com/SqlServerSamples'
      ''
      '--'
      'Rules proc/view/trigger/table: '
      'name formatting is %sz0, may be chged to which '
      'specified in "Icon for collapsed text" if "AS/ON" '
      'matching made case-insensitive.'
      ' ')
    LineComment = '--'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal37: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String { }'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id Keyw'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id Func'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Char'
        StyleName = 'String'
        TokenType = 8
        Expression = '\#'#39' .*? ('#39'|$) | #Java not.'#13#10'\#\\\w+         #Scheme not.'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s) ".*? ("|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = ';.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s) \#\| .*? (\|\# |\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-z_\#] [\w!\?\-<>=]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String 2'
        StyleName = 'String { }'
        TokenType = 4
        Expression = '(?s) \{ .*? (\}|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:<>\(\)=\+\-\[\]\{\}\?!\$@&%'#39'`]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '(\d+ \.? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+) [FD]?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+ [LD]?'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Id Func'
        StyleName = 'Id Func'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abs'
              'acos'
              'and'
              'angle'
              'append'
              'apply'
              'asin'
              'assoc'
              'assq'
              'assv'
              'atan'
              'begin'
              'boolean?'
              'caaaar'
              'caaadr'
              'caaar'
              'caadar'
              'caaddr'
              'caadr'
              'caar'
              'cadaar'
              'cadadr'
              'cadar'
              'caddar'
              'cadddr'
              'caddr'
              'cadr'
              'call/cc'
              'call-with-current-continuation'
              'call-with-input-file'
              'call-with-output-file'
              'call-with-values'
              'car'
              'case'
              'cdaaar'
              'cdaadr'
              'cdaar'
              'cdadar'
              'cdaddr'
              'cdadr'
              'cdar'
              'cddaar'
              'cddadr'
              'cddar'
              'cdddar'
              'cddddr'
              'cdddr'
              'cddr'
              'cdr'
              'ceiling'
              'char?'
              'char<?'
              'char<=?'
              'char=?'
              'char>?'
              'char>=?'
              'char->integer'
              'char-alphabetic?'
              'char-ci<?'
              'char-ci<=?'
              'char-ci=?'
              'char-ci>?'
              'char-ci>=?'
              'char-downcase'
              'char-lower-case?'
              'char-numeric?'
              'char-ready?'
              'char-upcase'
              'char-upper-case?'
              'char-whitespace?'
              'close-input-port'
              'close-output-port'
              'complex?'
              'cond'
              'cons'
              'cos'
              'current-input-port'
              'current-output-port'
              'define'
              'define-syntax'
              'delay'
              'denominator'
              'display'
              'do'
              'dynamic-wind'
              'else'
              'eof-object?'
              'eq?'
              'equal?'
              'eqv?'
              'eval'
              'even?'
              'exact?'
              'exact->inexact'
              'exp'
              'expt'
              'floor'
              'force'
              'for-each'
              'gcd'
              'if'
              'imag-part'
              'inexact?'
              'inexact->exact'
              'input-port?'
              'integer?'
              'integer->char'
              'interaction-environment'
              'lambda'
              'lcm'
              'length'
              'let'
              'let*'
              'letrec'
              'letrec-syntax'
              'let-syntax'
              'list'
              'list?'
              'list->string'
              'list->vector'
              'list-ref'
              'list-tail'
              'load'
              'log'
              'magnitude'
              'make-polar'
              'make-rectangular'
              'make-string'
              'make-vector'
              'map'
              'max'
              'member'
              'memq'
              'memv'
              'min'
              'modulo'
              'negative?'
              'newline'
              'not'
              'null?'
              'null-environment'
              'number?'
              'number->string'
              'numerator'
              'odd?'
              'open-input-file'
              'open-output-file'
              'or'
              'output-port?'
              'pair?'
              'peek-char'
              'positive?'
              'procedure?'
              'quasiquote'
              'quote'
              'quotient'
              'rational?'
              'rationalize'
              'read'
              'read-char'
              'real?'
              'real-part'
              'remainder'
              'reverse'
              'round'
              'scheme-report-environment'
              'set!'
              'set-car!'
              'set-cdr!'
              'sin'
              'sqrt'
              'string'
              'string?'
              'string<?'
              'string<=?'
              'string=?'
              'string>?'
              'string>=?'
              'string->list'
              'string->number'
              'string->symbol'
              'string-append'
              'string-ci<?'
              'string-ci<=?'
              'string-ci=?'
              'string-ci>?'
              'string-ci>=?'
              'string-copy'
              'string-fill!'
              'string-length'
              'string-ref'
              'string-set!'
              'substring'
              'symbol?'
              'symbol->string'
              'syntax-rules'
              'transcript-off'
              'transcript-on'
              'truncate'
              'unquote'
              'unquote-splicing'
              'values'
              'vector'
              'vector?'
              'vector->list'
              'vector-fill!'
              'vector-length'
              'vector-ref'
              'vector-set!'
              'with-input-from-file'
              'with-output-to-file'
              'write'
              'write-char'
              'zero?')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Id keyw'
        StyleName = 'Id Keyw'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '#f'
              '#null'
              '#t'
              'begin'
              'case'
              'cond'
              'define'
              'define-syntax'
              'do'
              'else'
              'fluid-let'
              'for-each'
              'if'
              'let'
              'let*'
              'letrec'
              'letrec-syntax'
              'let-syntax'
              'load'
              'set!'
              'set-car!'
              'set-cdr!'
              'syntax-case'
              'syntax-rules')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        EndOfTextClose = True
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '/* ... */'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 1
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func begin (compact)'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'define')
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NameFmt = 'func %s-3~s[)]1'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func begin (lambda)'
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TagList.Strings = (
              'lambda')
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'define')
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        NameFmt = 'func %s-2 %s-5~s[)]'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = ')'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ')')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '('
        ConditionList = <
          item
            TagList.Strings = (
              '(')
            TokenTypes = 8
          end>
        BlockEnd = ')'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      ';Test'
      ';Const'
      '#t + #f + #null'
      '12 + 0xFFCCAA + 132L'
      '123.45 + 1.2345E-2 + 123.45F + 42D'
      '#'#39'a'#39' + #'#39'\n'#39' + #'#39'\040'#39' + #'#39'\u4FA3'#39
      '#\space + #\a + "Test"  '
      ';Strings'
      '(define (li c x) {<li class="[c]">[x]</li>})'
      '(li '#39'warning {<a href="#licence">Licensing information</a>})'
      ''
      '#| Funcs '
      '|#'
      'for-each'
      'string>=?'
      'string>?'
      'string?'
      'substring'
      'symbol->string'
      'symbol?'
      ''
      ';Tree'
      '(define (banner-compact)'
      '    (display "Hello world"))'
      ''
      '(define banner-lambda (lambda ()'
      '    (display "Hello world")))'
      ''
      '(define banner-lambda-2 (lambda (n1 n2)'
      '    (display "Hello world")))')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'scm ss smd'
    LexerName = 'Scheme'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Ref:'
      'http://jscheme.sourceforge.net/jscheme/doc/refman.html'
      'Test:'
      'http://jscheme.sourceforge.net/jscheme/src/using/package.html')
    LineComment = ';'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal39: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Var'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id keyword'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id keyword2'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Var'
        StyleName = 'Var'
        Expression = '\$\{.+?\}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\{\}%]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        EndOfTextClose = True
        DisplayInTree = False
        RefToCondEnd = True
        HighlightPos = cpBound
        CollapseFmt = '...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment'
        RefToCondEnd = True
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Keyw'
        StyleName = 'Id keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'add_custom_command'
              'add_custom_target'
              'add_definitions'
              'add_dependencies'
              'add_executable'
              'add_library'
              'add_subdirectory'
              'add_test'
              'aux_source_directory'
              'build_command'
              'build_name'
              'cmake_minimum_required'
              'configure_file'
              'create_test_sourcelist'
              'else'
              'elseif'
              'enable_language'
              'enable_testing'
              'endforeach'
              'endfunction'
              'endif'
              'endmacro'
              'endwhile'
              'exec_program'
              'execute_process'
              'export_library_dependencies'
              'file'
              'find_file'
              'find_library'
              'find_package'
              'find_path'
              'find_program'
              'fltk_wrap_ui'
              'foreach'
              'function'
              'get_cmake_property'
              'get_directory_property'
              'get_filename_component'
              'get_source_file_property'
              'get_target_property'
              'get_test_property'
              'if'
              'include'
              'include_directories'
              'include_external_msproject'
              'include_regular_expression'
              'install'
              'install_files'
              'install_programs'
              'install_targets'
              'link_directories'
              'link_libraries'
              'list'
              'load_cache'
              'load_command'
              'macro'
              'make_directory'
              'mark_as_advanced'
              'math'
              'message'
              'option'
              'output_required_files'
              'project'
              'qt_wrap_cpp'
              'qt_wrap_ui'
              'remove'
              'remove_definitions'
              'separate_arguments'
              'set'
              'set_directory_properties'
              'set_source_files_properties'
              'set_target_properties'
              'set_tests_properties'
              'site_name'
              'source_group'
              'string'
              'subdir_depends'
              'subdirs'
              'target_link_libraries'
              'try_compile'
              'try_run'
              'use_mangled_mesa'
              'utility_source'
              'variable_requires'
              'vtk_make_instantiator'
              'vtk_wrap_java'
              'vtk_wrap_python'
              'vtk_wrap_tcl'
              'while'
              'write_file')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Keyw 2'
        StyleName = 'Id keyword2'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'ABSOLUTE'
              'ABSTRACT'
              'ADDITIONAL_MAKE_CLEAN_FILES'
              'ALL'
              'AND'
              'APPEND'
              'APPLE'
              'ARGS'
              'ASCII'
              'BEFORE'
              'BORLAND'
              'CACHE'
              'CACHE_VARIABLES'
              'CLEAR'
              'CMAKE_COMPILER_2005'
              'COMMAND'
              'COMMAND_NAME'
              'COMMANDS'
              'COMMENT'
              'COMPARE'
              'COMPILE_FLAGS'
              'COPYONLY'
              'CYGWIN'
              'DEFINE_SYMBOL'
              'DEFINED'
              'DEPENDS'
              'DOC'
              'EQUAL'
              'ESCAPE_QUOTES'
              'EXCLUDE'
              'EXCLUDE_FROM_ALL'
              'EXISTS'
              'EXPORT_MACRO'
              'EXT'
              'EXTRA_INCLUDE'
              'FATAL_ERROR'
              'FILE'
              'FILES'
              'FORCE'
              'GENERATED'
              'GLOB'
              'GLOB_RECURSE'
              'GREATER'
              'GROUP_SIZE'
              'HEADER_FILE_ONLY'
              'HEADER_LOCATION'
              'IMMEDIATE'
              'INCLUDE_DIRECTORIES'
              'INCLUDE_INTERNALS'
              'INCLUDE_REGULAR_EXPRESSION'
              'INCLUDES'
              'LESS'
              'LINK_DIRECTORIES'
              'LINK_FLAGS'
              'LOCATION'
              'MACOSX_BUNDLE'
              'MACROS'
              'MAIN_DEPENDENCY'
              'MAKE_DIRECTORY'
              'MATCH'
              'MATCHALL'
              'MATCHES'
              'MINGW'
              'MODULE'
              'MSVC'
              'MSVC_IDE'
              'MSVC60'
              'MSVC70'
              'MSVC71'
              'MSVC80'
              'MSYS'
              'NAME'
              'NAME_WE'
              'NO_SYSTEM_PATH'
              'NOT'
              'NOTEQUAL'
              'OBJECT_DEPENDS'
              'OFF'
              'ON'
              'OPTIONAL'
              'OR'
              'OUTPUT'
              'OUTPUT_VARIABLE'
              'PATH'
              'PATHS'
              'POST_BUILD'
              'POST_INSTALL_SCRIPT'
              'PRE_BUILD'
              'PRE_INSTALL_SCRIPT'
              'PRE_LINK'
              'PREFIX'
              'PREORDER'
              'PROGRAM'
              'PROGRAM_ARGS'
              'PROPERTIES'
              'QUIET'
              'RANGE'
              'READ'
              'REGEX'
              'REGULAR_EXPRESSION'
              'REPLACE'
              'REQUIRED'
              'RETURN_VALUE'
              'RUNTIME_DIRECTORY'
              'SEND_ERROR'
              'SHARED'
              'SOURCES'
              'STATIC'
              'STATUS'
              'STREQUAL'
              'STRGREATER'
              'STRLESS'
              'SUFFIX'
              'TARGET'
              'TOLOWER'
              'TOUPPER'
              'VAR'
              'VARIABLES'
              'VERSION'
              'WATCOM'
              'WIN32'
              'WRAP_EXCLUDE'
              'WRITE')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'if'
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'if end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'if end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endif')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'macro'
        ConditionList = <
          item
            TagList.Strings = (
              'macro')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'macro end'
        NameFmt = '%sz0'
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'macro end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endmacro')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'foreach'
        ConditionList = <
          item
            TagList.Strings = (
              'foreach')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'foreach end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'foreach end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endforeach')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func'
        ConditionList = <
          item
            TagList.Strings = (
              'function')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'func end'
        NameFmt = '%sz0'
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endfunction')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'while'
        ConditionList = <
          item
            TagList.Strings = (
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'while end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'while end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'endwhile')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#Text'
      '#Text'
      'function(verify_app)'
      '  exec_program(${CMAKE_COMPILER}'
      '    ARGS -dumpversion)'
      '  if(NOT verified)'
      '    message(FATAL_ERROR "error: verify_app failed")'
      '  endif(NOT verified)'
      'endfunction(verify_app)')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'cmake'
    LexerName = 'CMake'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Test:'
      'CMake distributive')
    LineComment = '#'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal42: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Text'
        Font.Charset = ANSI_CHARSET
        Font.Color = clWindowText
        Font.Height = -12
        Font.Name = 'Lucida Console'
        Font.Style = []
        FormatType = ftCustomFont
      end>
    TokenRules = <>
    BlockRules = <>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown')
    DefaultStyleName = 'Text'
    Extentions = 'nfo diz'
    LexerName = 'NFO files'
    SkipSpaces = False
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal44: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Comment2'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'DSCComment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 25088
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Key words'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'EvaluatedName'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'LiteralName'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Params'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Int'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'DSCComment2'
        StyleName = 'Comment2'
        TokenType = 1
        Expression = '(?<=%%.*?\:).*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'DSCComment'
        StyleName = 'DSCComment'
        TokenType = 1
        Expression = '(%%.*?\:)|(%%.*)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '%.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Dictionary'
        StyleName = 'Default'
        Expression = '(?s)<<.*?>>'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'StringDef'
        StyleName = 'String'
        Expression = '(?s)\(.*?\)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'StringHexASCII'
        StyleName = 'String'
        Expression = '(?s)\<.*?\>'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Int'
        StyleName = 'Int'
        Expression = '\b\d+\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Keyword'
        TokenType = 2
        Expression = '(\.)?\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'EvaluatedName'
        StyleName = 'EvaluatedName'
        Expression = '\/\/.*?(?=(\{|\s+|\(|\<|\[))'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'LiteralName'
        StyleName = 'LiteralName'
        Expression = '\/.*?(?=(\{|\s+|\(|\<|\[))'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Key words'
        StyleName = 'Key words'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '.begintransparencygroup'
              '.begintransparencymask'
              '.bytestring'
              '.charboxpath'
              '.currentaccuratecurves'
              '.currentblendmode'
              '.currentcurvejoin'
              '.currentdashadapt'
              '.currentdotlength'
              '.currentfilladjust2'
              '.currentlimitclamp'
              '.currentopacityalpha'
              '.currentoverprintmode'
              '.currentrasterop'
              '.currentshapealpha'
              '.currentsourcetransparent'
              '.currenttextknockout'
              '.currenttexturetransparent'
              '.dashpath'
              '.dicttomark'
              '.discardtransparencygroup'
              '.discardtransparencymask'
              '.endtransparencygroup'
              '.endtransparencymask'
              '.execn'
              '.filename'
              '.fileposition'
              '.forceput'
              '.forceundef'
              '.forgetsave'
              '.getbitsrect'
              '.getdevice'
              '.inittransparencymask'
              '.knownget'
              '.locksafe'
              '.makeoperator'
              '.namestring'
              '.oserrno'
              '.oserrorstring'
              '.peekstring'
              '.rectappend'
              '.runandhide'
              '.setaccuratecurves'
              '.setblendmode'
              '.setcurvejoin'
              '.setdashadapt'
              '.setdebug'
              '.setdefaultmatrix'
              '.setdotlength'
              '.setfilladjust2'
              '.setlimitclamp'
              '.setmaxlength'
              '.setopacityalpha'
              '.setoverprintmode'
              '.setrasterop'
              '.setsafe'
              '.setshapealpha'
              '.setsourcetransparent'
              '.settextknockout'
              '.settexturetransparent'
              '.stringbreak'
              '.stringmatch'
              '.tempfile'
              '.type1decrypt'
              '.type1encrypt'
              '.type1execchar'
              '.unread'
              'abs'
              'add'
              'aload'
              'anchorsearch'
              'and'
              'arc'
              'arccos'
              'arcn'
              'arcsin'
              'arct'
              'arcto'
              'array'
              'ashow'
              'astore'
              'atan'
              'awidthshow'
              'begin'
              'bind'
              'bitshift'
              'bytesavailable'
              'cachestatus'
              'ceiling'
              'charpath'
              'clear'
              'cleardictstack'
              'cleartomark'
              'clip'
              'clippath'
              'cliprestore'
              'clipsave'
              'closefile'
              'closepath'
              'colorimage'
              'composefont'
              'concat'
              'concatmatrix'
              'copy'
              'copydevice'
              'copypage'
              'copyscanlines'
              'cos'
              'count'
              'countdictstack'
              'countexecstack'
              'counttomark'
              'cshow'
              'currentblackgeneration'
              'currentcacheparams'
              'currentcmykcolor'
              'currentcolor'
              'currentcolorrendering'
              'currentcolorscreen'
              'currentcolorspace'
              'currentcolortransfer'
              'currentdash'
              'currentdevice'
              'currentdevparams'
              'currentdict'
              'currentfile'
              'currentflat'
              'currentfont'
              'currentglobal'
              'currentgray'
              'currentgstate'
              'currenthalftone'
              'currenthsbcolor'
              'currentlinecap'
              'currentlinejoin'
              'currentlinewidth'
              'currentmatrix'
              'currentmiterlimit'
              'currentobjectformat'
              'currentoverprint'
              'currentpacking'
              'currentpagedevice'
              'currentpoint'
              'currentrgbcolor'
              'currentscreen'
              'currentshared'
              'currentsmoothness'
              'currentstrokeadjust'
              'currentsystemparams'
              'currenttransfer'
              'currentundercolorremoval'
              'currentuserparams'
              'cvi'
              'cvlit'
              'cvn'
              'cvr'
              'cvrs'
              'cvs'
              'cvx'
              'def'
              'defaultmatrix'
              'definefont'
              'defineresource'
              'defineuserobject'
              'deletefile'
              'dict'
              'dictstack'
              'div'
              'dtransform'
              'dup'
              'echo'
              'end'
              'eoclip'
              'eofill'
              'eq'
              'erasepage'
              'errordict'
              'exch'
              'exec'
              'execform'
              'execstack'
              'execuserobject'
              'executeonly'
              'executive'
              'exit'
              'exp'
              'false'
              'file'
              'filenameforall'
              'fileposition'
              'fill'
              'filter'
              'findcolorrendering'
              'finddevice'
              'findencoding'
              'findfont'
              'findlibfile'
              'findprotodevice'
              'findresource'
              'flattenpath'
              'floor'
              'flush'
              'flushfile'
              'flushpage'
              'FontDirectory'
              'for'
              'forall'
              'gcheck'
              'ge'
              'get'
              'getdeviceprops'
              'getenv'
              'getinterval'
              'globaldict'
              'GlobalFontDirectory'
              'glyphshow'
              'grestore'
              'grestoreall'
              'gsave'
              'gstate'
              'gt'
              'idetmatrix'
              'idiv'
              'idtransform'
              'if'
              'ifelse'
              'image'
              'imagemask'
              'index'
              'ineofill'
              'infill'
              'initclip'
              'initgraphics'
              'initmatrix'
              'instroke'
              'inueofill'
              'inufill'
              'inustroke'
              'invertmatrix'
              'ISOLatin1Encoding'
              'itransform'
              'known'
              'kshow'
              'languagelevel'
              'le'
              'length'
              'lineto'
              'ln'
              'load'
              'log'
              'loop'
              'lt'
              'makefont'
              'makeimagedevice'
              'makepattern'
              'makewordimagedevice'
              'mark'
              'matrix'
              'max'
              'maxlength'
              'min'
              'mod'
              'moveto'
              'mul'
              'ne'
              'neg'
              'newpath'
              'noaccess'
              'nor'
              'not'
              'null'
              'nulldevice'
              'or'
              'packedarray'
              'pathbbox'
              'pathforall'
              'pop'
              'print'
              'printobject'
              'product'
              'prompt'
              'pstack'
              'put'
              'putdeviceprops'
              'putinterval'
              'quit'
              'rand'
              'rcheck'
              'rcurveto'
              'read'
              'readhexstring'
              'readline'
              'readonly'
              'readstring'
              'realtime'
              'rectclip'
              'rectfill'
              'rectstroke'
              'renamefile'
              'repeat'
              'resetfile'
              'resourceforall'
              'resourcestatus'
              'restore'
              'reversepath'
              'revision'
              'rlineto'
              'rmoveto'
              'roll'
              'rootfont'
              'rotate'
              'round'
              'rrand'
              'run'
              'save'
              'scale'
              'scalefont'
              'scheck'
              'search'
              'selectfont'
              'serialnumber'
              'setbbox'
              'setblackgeneration'
              'setcachedevice'
              'setcachedevice2'
              'setcachelimit'
              'setcacheparams'
              'setcharwidth'
              'setcmykcolor'
              'setcolor'
              'setcolorrendering'
              'setcolorscreen'
              'setcolorspace'
              'setcolortranfer'
              'setcolortransfer'
              'setdash'
              'setdevice'
              'setdevparams'
              'setfileposition'
              'setflat'
              'setfont'
              'setglobal'
              'setgray'
              'setgstate'
              'sethalftone'
              'sethsbcolor'
              'setlinecap'
              'setlinejoin'
              'setlinewidth'
              'setmatrix'
              'setmiterlimit'
              'setobjectformat'
              'setoverprint'
              'setpacking'
              'setpagedevice'
              'setpattern'
              'setrgbcolor'
              'setscreen'
              'setshared'
              'setsmoothness'
              'setstrokeadjust'
              'setsystemparams'
              'settransfer'
              'setucacheparams'
              'setundercolorremoval'
              'setuserparams'
              'setvmthreshold'
              'shareddict'
              'SharedFontDirectory'
              'shfill'
              'show'
              'showpage'
              'sin'
              'sqrt'
              'srand'
              'stack'
              'StandardEncoding'
              'start'
              'startjob'
              'status'
              'statusdict'
              'stop'
              'stopped'
              'store'
              'string'
              'stringwidth'
              'stroke'
              'strokepath'
              'sub'
              'systemdict'
              'token'
              'transform'
              'translate'
              'true'
              'truncate'
              'type'
              'uappend'
              'ucache'
              'ucachestatus'
              'ueofill'
              'ufill'
              'undef'
              'undefinefont'
              'undefineresource'
              'undefineuserobject'
              'upath'
              'userdict'
              'UserObject'
              'UserObjects'
              'usertime'
              'ustroke'
              'ustrokepath'
              'version'
              'vmreclaim'
              'vmstatus'
              'wcheck'
              'where'
              'widthshow'
              'write'
              'writehexstring'
              'writeobject'
              'writestring'
              'xcheck'
              'xor'
              'xshow'
              'xyshow'
              'yshow')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'ps eps'
    LexerName = 'PostScript'
    SkipSpaces = False
    Notes.Strings = (
      'Author: Matthias030, ghisler.ch'
      'Test:'
      'http://www.math.duke.edu/computing/tex/templates.html')
    LineComment = '%'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal45: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id Reserved'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id Reserved 2'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id Uppercase'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '--.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39')(.|\\\1)*?(\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id Upcase'
        StyleName = 'Id Uppercase'
        TokenType = 2
        Expression = '(?-i)[A-Z][A-Z_\d]{2,}'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;\\/\+\-\*:=<>&/\|\^\.!\?]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keyw'
        StyleName = 'Id Reserved'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'agent'
              'alias'
              'all'
              'and'
              'as'
              'assign'
              'attribute'
              'check'
              'class'
              'convert'
              'create'
              'creation'
              'debug'
              'deferred'
              'do'
              'else'
              'elseif'
              'end'
              'ensure'
              'expanded'
              'export'
              'external'
              'feature'
              'from'
              'frozen'
              'if'
              'implies'
              'indexing'
              'infix'
              'inherit'
              'inspect'
              'invariant'
              'is'
              'like'
              'local'
              'loop'
              'not'
              'note'
              'obsolete'
              'old'
              'once'
              'only'
              'or'
              'prefix'
              'redefine'
              'rename'
              'require'
              'rescue'
              'retry'
              'select'
              'separate'
              'then'
              'undefine'
              'until'
              'variant'
              'when'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Keyw2'
        StyleName = 'Id Reserved 2'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'BIT'
              'Current'
              'False'
              'Precursor'
              'Result'
              'Strip'
              'True'
              'TUPLE'
              'Unique'
              'Void')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin'
        ConditionList = <
          item
            TagList.Strings = (
              'class'
              'deferred'
              'do'
              'redefine')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'begin'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'class'
      '    APPLICATION'
      'create'
      '    make'
      'feature'
      '    make'
      '            -- Demonstrate string reversal.'
      '        do'
      '            my_string := "Hello World!"'
      '            my_string.mirror'
      '            print (my_string)'
      '        end'
      '    my_string: STRING'
      '            -- Used for reversal'
      'end')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'e'
    LexerName = 'Eiffel'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Test:'
      'http://docs.eiffel.com/book/examples'
      'http://www.erenkrantz.com/Geeks/SourceCodeExample2.shtml')
    LineComment = '--'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal7: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Const'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 206
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String Eval'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Var'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id Function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BorderTypeBottom = blDot
        BorderColorBottom = clTeal
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\* .*? (\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Param'
        StyleName = 'Param'
        BlockName = '{'
        TokenType = 7
        Expression = '[\w\.-]+ (?=\s*\:)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[;:,%\(\)\{\}\[\]\-\+\*~]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Const'
        StyleName = 'Const'
        TokenType = 5
        Expression = '\#[\da-f]+\b | \b\d+ (%|\w+)? '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String in URL'
        Enabled = False
        StyleName = 'String'
        Expression = '(?<=URL\s*\() .*? (?=\))'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39') .*? (\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Var'
        StyleName = 'Var'
        TokenType = 2
        Expression = '@\w[\w-]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 6
        Expression = '[\w\.\-\#]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Eval'
        StyleName = 'String Eval'
        TokenType = 4
        Expression = '` .*? (`|$) '
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keyw'
        StyleName = 'Id Function'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'alpha'
              'and'
              'ceil'
              'darken'
              'desaturate'
              'fade'
              'fadein'
              'fadeout'
              'floor'
              'hue'
              'iscolor'
              'isem'
              'iskeyword'
              'isnumber'
              'ispercentage'
              'ispixel'
              'isstring'
              'isurl'
              'lighten'
              'lightness'
              'mix'
              'not'
              'percentage'
              'rgb'
              'rgba'
              'round'
              'saturate'
              'saturation'
              'spin'
              'true'
              'when')
            TokenTypes = 64
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        Highlight = True
        InvertColors = True
        NameFmt = '%sl0'
        RefToCondEnd = True
        DynHighlight = dhRange
        HighlightPos = cpRange
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = '{'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Param begin'
        ConditionList = <
          item
            TagList.Strings = (
              ':')
            TokenTypes = 520
          end
          item
            TokenTypes = 128
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'Param end'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Param end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';'
              '}')
            TokenTypes = 8
          end>
        BlockOffset = 1
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '// Comment'
      '@base: #ff40aa;'
      '@height: `document.body.clientHeight`;'
      '@filter: ~"ms:alwaysHasItsOwnSyntax()";'
      ''
      '.box-shadow(@style, @c) when (iscolor(@c)) {'
      '  box-shadow:         @style @c;'
      '  -webkit-box-shadow: @style @c;'
      '}'
      '.box-shadow(@style, @alpha: 50%) when (isnumber(@alpha)) {'
      '  .box-shadow(@style, rgba(0, 0, 0, @alpha));'
      '}'
      '.box {'
      '  color: saturate(@base, 5%);'
      '  border-color: lighten(@base, 30%);'
      '  div { .box-shadow(0 0 5px, 30%) }'
      '}')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Var'
      'Symbol'
      'String'
      'Const'
      'Id'
      'Param')
    Extentions = 'less'
    LexerName = 'LESS'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Test:'
      'http://lesscss.org/')
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal18: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id reserved'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id:Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id Func'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '%.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '('#39'|")(\\\1|.)*?(\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id:Id'
        StyleName = 'Id:Id'
        Expression = '\w+\:\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id Func'
        StyleName = 'Id Func'
        TokenType = 8
        Expression = '^\w+ (?=\()'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-z_][\w]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\{\}%\?!\|]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 7
        Expression = '(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'\d+\.\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        StyleName = 'Number'
        TokenType = 6
        Expression = '\d+\#[\da-f]+ |'#13#10'\$.'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keyw'
        StyleName = 'Id reserved'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'after'
              'and'
              'andalso'
              'band'
              'begin'
              'bnot'
              'bor'
              'bsl'
              'bsr'
              'bxor'
              'case'
              'catch'
              'cond'
              'div'
              'end'
              'export'
              'fun'
              'if'
              'let'
              'module'
              'not'
              'of'
              'or'
              'orelse'
              'query'
              'receive'
              'rem'
              'try'
              'when'
              'xor')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin'
        ConditionList = <
          item
            TagList.Strings = (
              'case'
              'fun'
              'receive')
            TokenTypes = 4
          end>
        BlockEnd = 'end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func'
        ConditionList = <
          item
            TokenTypes = 256
          end>
        BlockEnd = 'func end'
        EndOfTextClose = True
        NameFmt = '%sz0'
        HighlightPos = cpAny
        SelfClose = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'func end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '.')
            TokenTypes = 8
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '-module(count_x).'
      '-author('#39'joe@__'#39').'
      '%% count the number of x'#39's in a file'
      '-export([file/1]).'
      ''
      'file(F) ->'
      '    lists:foldl(fun($x,N) -> N + 1;'
      #9#9'   (_, N) -> N'
      #9'        end,'
      #9#9'0,'
      #9#9'binary_to_list(element(2, file:read_file(F)))).')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Hex const'
      'Float const'
      'Id func')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'erl'
    LexerName = 'Erlang'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Ref: http://www.erlang.org/doc.html'
      'Test: http://www.erlang.org/article/tag/examples')
    LineComment = '%'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal34: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Chars'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id Keyword'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Enabled = False
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Num'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'DigitStr'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Str'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comm'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '--.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Bit'
        StyleName = 'DigitStr'
        TokenType = 4
        Expression = #39'[01]'#39
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Chars'
        StyleName = 'Chars'
        TokenType = 3
        Expression = '[\(\)\.,;:\[\]\{\}=<>@\|\~\?\-\+\*/\^!&'#39']'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IdEntity'
        StyleName = 'Id Keyword'
        TokenType = 8
        Expression = 
          '\b (architecture | entity | function | package \s+ body | packag' +
          'e | configuration) \b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-z][\w\d]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Num'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
          'hout exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Num'
        StyleName = 'Num'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Str'
        StyleName = 'Str'
        TokenType = 4
        Expression = '(?<=string'#39'\() " .*? ("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'DigitStr'
        StyleName = 'DigitStr'
        TokenType = 4
        Expression = '" [\dA-F]* ("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Words'
        StyleName = 'Id Keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abs'
              'access'
              'after'
              'alias'
              'all'
              'and'
              'architecture'
              'array'
              'assert'
              'attribute'
              'begin'
              'block'
              'body'
              'buffer'
              'bus'
              'case'
              'component'
              'configuration'
              'constant'
              'disconnect'
              'downto'
              'else'
              'elsif'
              'end'
              'entity'
              'exit'
              'file'
              'for'
              'function'
              'generate'
              'generic'
              'group'
              'guarded'
              'if'
              'impure'
              'in'
              'inertial'
              'inout'
              'is'
              'label'
              'library'
              'linkage'
              'literal'
              'loop'
              'map'
              'mod'
              'nand'
              'new'
              'next'
              'nor'
              'not'
              'null'
              'of'
              'on'
              'open'
              'or'
              'others'
              'out'
              'package'
              'port'
              'postponed'
              'procedure'
              'process'
              'pure'
              'range'
              'record'
              'register'
              'reject'
              'rem'
              'report'
              'return'
              'rol'
              'ror'
              'select'
              'severity'
              'shared'
              'signal'
              'sla'
              'sll'
              'sra'
              'srl'
              'subtype'
              'then'
              'to'
              'transport'
              'type'
              'unaffected'
              'units'
              'until'
              'use'
              'variable'
              'wait'
              'when'
              'while'
              'with'
              'xnor'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end <entity>'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 256
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'begin <entity>'
        SameIdent = True
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin <entity>'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 256
            IgnoreCase = True
          end>
        IdentIndex = -1
        BlockEnd = 'end <entity>'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
        AutoCloseMode = acmCloseOpened
        AutoCloseText = 'end %s0 %s-1;'
      end
      item
        DisplayName = 'end if'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'begin if'
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin if'
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end if'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end loop'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'begin loop'
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin loop'
        ConditionList = <
          item
            TagList.Strings = (
              'loop')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end loop'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end comp'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'component')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'begin comp'
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin comp'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'component')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end comp'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end process'
        Enabled = False
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TagList.Strings = (
              'process')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'begin process'
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin process'
        Enabled = False
        ConditionList = <
          item
            TagList.Strings = (
              'process')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'postponed')
            CondType = tcSkip
            TokenTypes = 4
          end>
        BlockEnd = 'end process'
        NameFmt = 'proc %s0 %s1 %s2'
        RefToCondEnd = True
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end for'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'for')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'begin for'
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin for'
        ConditionList = <
          item
            TagList.Strings = (
              'for')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end for'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'Entity bshift is   -- barrel shifter'
      '      port (left: in  std_logic; -- '#39'1'#39' for left, '#39'0'#39' for right'
      '            input: in  std_logic_vector (31 downto 0);'
      '            output: out std_logic_vector (31 downto 0) );'
      '  Entity test is -- test for folding only'
      'end entity bshift;'
      '  end entity test;'
      ''
      ' if clk='#39'0'#39' then'
      '   if cntr=x"000012" then '
      '     write(my_line, string'#39'("md="));'
      '     writeline(output, my_line);'
      '   end if;'
      ' end if;')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Preprocessor'
      'Id Entity')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'vhdl'
    LexerName = 'VHDL'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Test:'
      'http://www.csee.umbc.edu/portal/help/VHDL/samples/samples.shtml'
      'Keywords:'
      'http://www.csee.umbc.edu/portal/help/VHDL/reserved.html')
    LineComment = '--'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal47: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Chars'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id Keyword'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Preprocessor'
        Enabled = False
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Num'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Str'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comm'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '--.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Chars'
        StyleName = 'Chars'
        TokenType = 3
        Expression = '[\(\)\.,;:\[\]\{\}=<>@\|\~\?\-\+\*/\^!&\$]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IdEntity'
        StyleName = 'Id Keyword'
        TokenType = 8
        Expression = 
          '#must begin from line start'#13#10'^\s* (procedure | function | type) ' +
          '\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IdEntity end'
        StyleName = 'Id Keyword'
        TokenType = 9
        Expression = '\b (procedure | function | type) \b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[a-z][\w\d]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Num'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
          'hout exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Num'
        StyleName = 'Num'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'NumHex'
        StyleName = 'Num'
        TokenType = 5
        Expression = '\# [\dA-F]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Str'
        StyleName = 'Str'
        TokenType = 4
        Expression = '" (\\"|.)*? ("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Str2'
        StyleName = 'Str'
        TokenType = 4
        Expression = #39' .*? ('#39'|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Words'
        StyleName = 'Id Keyword'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'and'
              'by'
              'constant'
              'do'
              'else'
              'elsif'
              'end'
              'exit'
              'for'
              'function'
              'global'
              'if'
              'include'
              'not'
              'or'
              'procedure'
              'return'
              'then'
              'to'
              'type'
              'while'
              'with'
              'without'
              'xor')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end <entity>'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 512
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'begin <entity>'
        SameIdent = True
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin <entity>'
        ConditionList = <
          item
            TokenTypes = 4
          end
          item
            TokenTypes = 256
            IgnoreCase = True
          end>
        BlockEnd = 'end <entity>'
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end if'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'begin if'
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin if'
        ConditionList = <
          item
            TagList.Strings = (
              'if')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end if'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end for'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'for')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'begin for'
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin for'
        ConditionList = <
          item
            TagList.Strings = (
              'for')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end for'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'end while'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'begin while'
        HighlightPos = cpAny
        CancelNextRules = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'begin while'
        ConditionList = <
          item
            TagList.Strings = (
              'while')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'end while'
        DisplayInTree = False
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'procedure print_sorted_list()'
      '-- generate sorted_list from list '
      'end procedure'
      ''
      'print() -- must not be tree entry!'
      ''
      'for i = 1 to length(random) do'
      '    num = random[i]  -- the next random number'
      '    if remainder(num, 2) = 0 then'
      #9'even = append(even, num) -- add number at the end'
      '    else'
      #9'odd = prepend(odd, num) -- add number on at the beginning'
      '    end if'
      'end for'
      ''
      'puts(#FF, "Even numbers:\n")'
      '? even')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Preprocessor'
      'Id Entity'
      'Id Entiry end')
    MarkedBlockStyle = 'Marked block'
    Extentions = 'ex exw'
    LexerName = 'Euphoria'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Test:'
      'http://www.rapideuphoria.com')
    LineComment = '--'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal48: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Param'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clOlive
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Const'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = 206
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Var'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id Function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BorderTypeBottom = blDot
        BorderColorBottom = clTeal
      end
      item
        DisplayName = 'Commd'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\* .*? (\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Param'
        StyleName = 'Param'
        BlockName = '{'
        TokenType = 7
        Expression = '[\w\.-][\w\-\#\{\}\$]+ (?=\s*\:)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Const'
        StyleName = 'Const'
        TokenType = 5
        Expression = '\#[\da-f]+\b | \b\d+ (%|\w+)? '
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String in URL'
        Enabled = False
        StyleName = 'String'
        Expression = '(?<=URL\s*\() .*? (?=\))'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39') .*? (\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Var'
        StyleName = 'Var'
        TokenType = 2
        Expression = '\$\w[\w-]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 6
        Expression = '[\w\.\-][\w\-\#\{\}\$]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[;:,%\(\)\{\}\[\]\-\+\*~&\#]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Commd'
        StyleName = 'Commd'
        TokenType = 6
        Expression = '@\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'KeywFunc'
        StyleName = 'Id Function'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abs'
              'adjust-color'
              'adjust-hue'
              'alpha'
              'append'
              'blue'
              'ceil'
              'change-color'
              'comparable'
              'complement'
              'darken'
              'desaturate'
              'fade-in'
              'fade-out'
              'floor'
              'grayscale'
              'green'
              'hsl'
              'hsla'
              'hue'
              'if'
              'invert'
              'join'
              'length'
              'lighten'
              'lightness'
              'mix'
              'nth'
              'opacify'
              'opacity'
              'percentage'
              'quote'
              'red'
              'rgb'
              'rgba'
              'round'
              'saturate'
              'saturation'
              'scale-color'
              'transparentize'
              'type-of'
              'unit'
              'unitless'
              'unquote')
            TokenTypes = 64
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = '{'
        ConditionList = <
          item
            TagList.Strings = (
              '{')
            TokenTypes = 8
          end>
        BlockEnd = '}'
        Highlight = True
        InvertColors = True
        NameFmt = '%sl0'
        RefToCondEnd = True
        DynHighlight = dhRange
        HighlightPos = cpRange
        DynSelectMin = True
        IgnoreAsParent = False
      end
      item
        DisplayName = '}'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              '}')
            TokenTypes = 8
          end>
        BlockEnd = '{'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Param begin'
        ConditionList = <
          item
            TagList.Strings = (
              ':')
            TokenTypes = 520
          end
          item
            TokenTypes = 128
          end>
        IdentIndex = 1
        BlockOffset = 1
        BlockEnd = 'Param end'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Param end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              ';'
              '}')
            TokenTypes = 8
          end>
        BlockOffset = 1
        DisplayInTree = False
        HighlightPos = cpBound
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* style.scss */'
      'a {'
      '  color: rgb(10, 10, 0);'
      '  &:hover { color: #ffbbff; }'
      '}'
      ''
      '@mixin rounded-top {'
      '  $side: top;'
      '  $radius: 10px;'
      '  border-#{$side}-radius: $radius;'
      '  -moz-border-radius-#{$side}: $radius;'
      '}'
      ''
      '#navbar li { @include rounded-top; }')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Var'
      'Symbol'
      'String'
      'Const'
      'Id'
      'Param')
    Extentions = 'scss'
    LexerName = 'SCSS'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Test: '
      'http://sass-lang.com/tutorial.html'
      'Func list:'
      'http://sass-lang.com/docs/yardoc/Sass/Script/Functions.html')
    LineComment = '//'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal49: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Rus'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clYellow
        FormatType = ftColor
      end
      item
        DisplayName = 'Digits'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftColor
      end>
    TokenRules = <
      item
        DisplayName = 'Rus'
        StyleName = 'Rus'
        Expression = '(?r)['#1072'-'#1103#1040'-'#1071#1105#1025']+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Digits'
        StyleName = 'Digits'
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <>
    CodeTemplates = <>
    SubAnalyzers = <>
    TokenTypeNames.Strings = (
      'Unknown')
    LexerName = 'Text Russian detector'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com')
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal65: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Num'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = '%tag'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = '@var'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Cmt'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '^(-\#|/).* (\z\s.*)*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Str'
        StyleName = 'String'
        TokenType = 4
        Expression = '('#39'|").*?(\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '%tag'
        StyleName = '%tag'
        Expression = '%\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '@var'
        StyleName = '@var'
        Expression = '@\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symb'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\:\.,;\-\+/\*\(\)\{\}\[\]<>=%!\#\|\?~\\]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/ Short comment'
      '  This is a block comment'
      '  %strong there can even be tags'
      '%title Test  '
      '-# Haml comment'
      '-#'
      '  Nested Haml comment'
      '  - raise '#39'dead'#39
      '%p{ :class => "test" } @var')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Number')
    Extentions = 'haml'
    LexerName = 'Haml'
    SkipSpaces = False
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com')
    LineComment = '/ '
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal33: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'File names'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = clSkyBlue
      end
      item
        DisplayName = 'Chunk start'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 12615935
      end
      item
        DisplayName = 'Context line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clSilver
      end
      item
        DisplayName = 'Added line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 8454016
      end
      item
        DisplayName = 'Deleted line'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = 8421631
      end>
    TokenRules = <
      item
        DisplayName = 'File name'
        StyleName = 'File names'
        Expression = '^(---|\+\+\+).*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Chunk start'
        StyleName = 'Chunk start'
        TokenType = 1
        Expression = '^@@.*@@'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Added line'
        StyleName = 'Added line'
        TokenType = 2
        Expression = '^+.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Deleted line'
        StyleName = 'Deleted line'
        TokenType = 2
        Expression = '^-.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Context line'
        StyleName = 'Context line'
        TokenType = 3
        Expression = '^\s.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'some text'
      'simple text'
      '--- a/python/Makefile.am'#9'2010-05-26 22:09:50 +0000'
      '+++ b/python/Makefile.am'#9'2010-09-10 20:26:24 +0000'
      '@@ -41,9 +41,9 @@'
      ' libvirtmod_la_CFLAGS = $(WARN_PYTHON_CFLAGS)'
      ' '
      
        ' libvirtmod_la_LDFLAGS = -module -avoid-version -shared -L$(top_' +
        'builddir)/src/.libs \'
      '-'#9'$(CYGWIN_EXTRA_LDFLAGS)'
      '+'#9'$(CYGWIN_EXTRA_LDFLAGS) $(MINGW_EXTRA_LDFLAGS) -L/python/libs'
      ' libvirtmod_la_LIBADD = $(mylibs) \'
      '-'#9'$(CYGWIN_EXTRA_LIBADD) $(CYGWIN_EXTRA_PYTHON_LIBADD)'
      
        '+'#9'$(CYGWIN_EXTRA_LIBADD) $(CYGWIN_EXTRA_PYTHON_LIBADD) -lpython2' +
        '6'
      ' '
      ' GENERATE = generator.py')
    TokenTypeNames.Strings = (
      'file'
      'chunk'
      'line'
      'context'
      'default')
    Extentions = 'diff patch'
    LexerName = 'Diff'
    SkipSpaces = False
    Notes.Strings = (
      'Author: WhiteWind')
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal66: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'IdTag'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'IdFunc'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BorderTypeBottom = blDot
        BorderColorBottom = clTeal
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clWhite
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Color'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '//.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Number'
        StyleName = 'Number'
        TokenType = 7
        Expression = '\d+(\.\d+)?'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39') .*? (\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String in URL'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?<=URL\() .*? (?=\))'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'IdTag'
        StyleName = 'IdTag'
        TokenType = 8
        Expression = '^[\w\.\#\-]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '(\-[\w\-]+) | (\w[\w\-]*)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 5
        Expression = '[;:,%\(\)\[\]@=/\*\-\+\?\{\}]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Color'
        StyleName = 'Color'
        TokenType = 6
        Expression = '\#[\da-f]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'EmptyLn'
        Expression = '^$'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Style begin'
        StyleName = 'Current block'
        ConditionList = <
          item
            TokenTypes = 256
          end>
        BlockEnd = 'Style end'
        EndOfTextClose = True
        Highlight = True
        InvertColors = True
        NameFmt = '%s0'
        DynHighlight = dhRange
        HighlightPos = cpRange
        DynSelectMin = True
        SelfClose = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Style end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 1
          end>
        BlockEnd = 'Style begin'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Funcs'
        StyleName = 'IdFunc'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'abs'
              'add-property'
              'alpha'
              'append'
              'avg'
              'blue'
              'ceil'
              'current-property'
              'dark'
              'darken'
              'desaturate'
              'error'
              'even'
              'floor'
              'green'
              'hsla'
              'hue'
              'image-size'
              'invert'
              'join'
              'keys'
              'last'
              'length'
              'light'
              'lighten'
              'lightness'
              'match'
              'max'
              'min'
              'odd'
              'operate'
              'opposite-position'
              'p'
              'prepend'
              'push'
              'red'
              'rgb'
              'rgba'
              'round'
              's'
              'saturate'
              'saturation'
              'sum'
              'type'
              'typeof'
              'type-of'
              'unit'
              'unquote'
              'unshift'
              'values'
              'warn')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      ''
      '//font-size = 14px'
      'font-families = "Lucida Grande", Arial, sans-serif'
      'primary-color = #aa00ff'
      'width = 800px'
      'pad = 20px'
      ''
      'body'
      '  font font-size/1.5 font-families'
      '  background white url(image.gif)'
      '  color rgb(10,10,20)'
      ''
      'h1'
      '  font-size font-size * (5 - 3)'
      '  -moz-color primary-color + #aa00ff')
    TokenTypeNames.Strings = (
      'EmptyLn'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Delimiter'
      'Color'
      'Number'
      'TagName')
    Extentions = 'styl'
    LexerName = 'Stylus'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Doc: http://learnboost.github.com/stylus/'
      'Examples: get Zip on github: '
      '  https://github.com/LearnBoost/stylus')
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal67: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Text-Italic'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Text-Bold'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Text-Bold_Italic'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold, fsItalic]
      end
      item
        DisplayName = 'Link'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Heading'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -19
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Quote'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Codeblock'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clMoneyGreen
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end>
    TokenRules = <
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)\<!--.*?(--\>|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text-Bold_Italic'
        StyleName = 'Text-Bold_Italic'
        TokenType = 1
        Expression = '(\*\*\*|___).*?(\*\*\*|___|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text-Bold'
        StyleName = 'Text-Bold'
        TokenType = 1
        Expression = '(\*\*|__).*?(\*\*|__|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Text-Italic'
        StyleName = 'Text-Italic'
        TokenType = 1
        Expression = '(\*|_).*?(\*|_)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Link'
        StyleName = 'Link'
        TokenType = 1
        Expression = '\[ [^\]]+? \] (?=\()'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Heading'
        StyleName = 'Heading'
        TokenType = 2
        Expression = '^\#.*|.*\z-{2,}|.*\z=+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Quote'
        StyleName = 'Quote'
        Expression = '^>.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Block'
        StyleName = 'Block'
        Expression = '(?s)(```|`) .*? (\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Codeblock'
        StyleName = 'Codeblock'
        TokenType = 1
        Expression = '^\x20{4}.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Header'
        ConditionList = <
          item
            TokenTypes = 4
          end>
        EndOfTextClose = True
        NotCollapsed = True
        HighlightPos = cpAny
        SelfClose = True
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'Header'
      '======'
      ''
      '##Header too'
      ''
      '```'
      'This is a block'
      '```'
      ''
      '2nd paragraph. *Italic*, **bold**, ***bold-italic***.'
      'Some `preformatted` text.'
      'Some [not link]. Some [link](\www\www). '
      ''
      '> Block quotes are'
      '> written like so.')
    TokenTypeNames.Strings = (
      'Line'
      'Other'
      'Header')
    Extentions = 'md'
    LexerName = 'Markdown'
    SkipSpaces = False
    Notes.Strings = (
      'Author: Matthias030 (SynWrite admin)')
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal68: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlack
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Id label'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = '#Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end>
    TokenRules = <
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = '("|'#39')(\\\1|\\\\|.)*?(\1|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id label'
        StyleName = 'Id label'
        TokenType = 8
        Expression = '^ [a-z_]\w* (?=:\s*$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Hex'
        Enabled = False
        StyleName = 'Number'
        TokenType = 7
        Expression = '0x[\da-f]*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Float'
        StyleName = 'Number'
        TokenType = 6
        Expression = 
          '#with exp. dot is optional '#13#10'(\d+ \.)? \d+ e [\+\-]? \d+ |'#13#10'#wit' +
          'hout exp. dot is required'#13#10'\d+ \. \d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 1'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '(?s)/\*.*?(\*/|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment 2'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '--.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment#'
        StyleName = '#Comment'
        TokenType = 1
        Expression = '^\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = '::'
        StyleName = 'Symbol'
        TokenType = 9
        Expression = '^::'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Single symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[\{\}\(\)\[\],;]'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\+\-\*:=<>&/\|\^\.!~\\%]+'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'keywords'
        Enabled = False
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
          end>
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '/* ... */'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        StrictParent = True
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end>
        BlockOffset = 2
        BlockEnd = 'Block comment'
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'do'
        ConditionList = <
          item
            TagList.Strings = (
              'do'
              'select')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'do end'
        DisplayInTree = False
        HighlightPos = cpAny
        DrawStaple = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'do end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'end')
            TokenTypes = 4
            IgnoreCase = True
          end>
        BlockEnd = 'do'
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'proc'
        ConditionList = <
          item
            TagList.Strings = (
              'procedure')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TagList.Strings = (
              ':')
            TokenTypes = 8
          end
          item
            TokenTypes = 4
          end>
        BlockEnd = 'proc end'
        NameFmt = 'proc %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'proc end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'return')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        GrammaRuleName = 'label_end'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'label'
        ConditionList = <
          item
            TokenTypes = 256
          end>
        BlockEnd = 'proc end'
        NameFmt = 'label %s0'
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class'
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 512
          end>
        BlockEnd = 'class end'
        EndOfTextClose = True
        NameFmt = 'class %s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        SelfClose = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'class end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TagList.Strings = (
              'class')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 512
          end>
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'method'
        ConditionList = <
          item
            TokenTypes = 20
          end
          item
            TagList.Strings = (
              'method'
              'routine')
            TokenTypes = 4
            IgnoreCase = True
          end
          item
            TokenTypes = 512
          end>
        BlockEnd = 'method end'
        EndOfTextClose = True
        NameFmt = '%s-1 %s-2'
        RefToCondEnd = True
        HighlightPos = cpAny
        SelfClose = True
        IgnoreAsParent = False
      end
      item
        DisplayName = 'method end'
        BlockType = btRangeEnd
        ConditionList = <
          item
            TokenTypes = 768
          end>
        RefToCondEnd = True
        HighlightPos = cpAny
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '/* Get domain controller name */'
      'GetDC: procedure'
      #9'NETGETDCNAME = 510  --Comment'
      #9'DomainName = value( "DOMAIN", , "OS2ENVIRONMENT" )'
      
        #9'parse value NetMisc( NETGETDCNAME, DomainName, "" ) with myRc d' +
        'cName'
      #9'if myRc <> "0" then do'
      #9#9'say "NetMisc NETGETDCNAME error: "||myRc'
      #9#9'exit 9'
      #9'end'
      'return dcName'
      ''
      '/* Get requester type */'
      'RequesterType:'
      #9'NETSERVICE = 170'
      #9'MyRc = NetEnumerate( NETSERVICE, "serviceInfo", "" )'
      #9'if MyRc <> 0 then do'
      #9#9'say "NetEnumerate NETSERVICE error: "||MyRc'
      #9#9'exit 9'
      #9'end'
      #9'if serviceInfo.0 = 0 then do'
      #9#9'req_type = "UNKNOWN"'
      #9'end'
      #9'else do'
      #9#9'req_type = ""'
      #9#9'do i = 1 to serviceInfo.0'
      #9#9#9'if serviceInfo.i = "SERVER" then req_type = "SERVER"'
      #9#9'end'
      #9'end'
      'return req_type'
      ''
      '--Class test here'
      '::class Test'
      '::method Init'
      'return'
      '::method Done'
      'return')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Id label'
      '::')
    Gramma.Gramma = 'label_end = '#39'return'#39' | '#39'::'#39' ;'#13#10
    Extentions = 'rex cls'
    LexerName = 'Rexx'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com'
      'Samples:'
      'http://www.robvanderwoude.com/rexxexamples.php'
      'http://www.oorexx.org/ - Download, see samples folder')
    LineComment = '--'
    Charset = DEFAULT_CHARSET
  end
  object SyntAnal70: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Type'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clPurple
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Id'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'Params'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -11
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftCustomFont
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGreen
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Cmt sys'
        StyleName = 'Comment'
        Expression = '^\#.+$'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Type'
        StyleName = 'Type'
        TokenType = 1
        Expression = '^\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Id'
        StyleName = 'Id'
        TokenType = 2
        Expression = '[\w\$\-]+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Params'
        StyleName = 'Params'
        TokenType = 3
        Expression = '\(.*?(\)|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Cmt'
        StyleName = 'Comment'
        Expression = '\|.*$'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      'type Name(some params) |Comment')
    TokenTypeNames.Strings = (
      'Comment'
      'Type'
      'Id'
      'Params ')
    Extentions = 'acp'
    LexerName = 'SynWrite ACP files'
    Notes.Strings = (
      'Author: Alex, uvviewsoft.com')
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
  object SyntAnal2: TLibSyntAnalyzer
    Formats = <
      item
        DisplayName = 'Marked block'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clHighlightText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        BgColor = clHighlight
        FormatType = ftColor
      end
      item
        DisplayName = 'Default'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftBackGround
      end
      item
        DisplayName = 'Symbol'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Number'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'String'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clTeal
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftColor
      end
      item
        DisplayName = 'Identifier'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
        FormatType = ftColor
      end
      item
        DisplayName = 'Reserved word'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'Comment'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clGray
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsItalic]
      end
      item
        DisplayName = 'Current block'
        Font.Charset = RUSSIAN_CHARSET
        Font.Color = clMaroon
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
        BgColor = 13369046
        FormatType = ftColor
        BorderTypeLeft = blSolid
        BorderColorLeft = clGray
        BorderTypeTop = blSolid
        BorderColorTop = clGray
        BorderTypeRight = blSolid
        BorderColorRight = clGray
        BorderTypeBottom = blSolid
        BorderColorBottom = clGray
      end
      item
        DisplayName = 'Function'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clBlue
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = [fsBold]
      end
      item
        DisplayName = 'function tree'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clNavy
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end
      item
        DisplayName = 'class tree'
        Font.Charset = DEFAULT_CHARSET
        Font.Color = clWindowText
        Font.Height = -13
        Font.Name = 'Courier New'
        Font.Style = []
      end>
    TokenRules = <
      item
        DisplayName = 'Word1stTreeItem'
        StyleName = 'Reserved word'
        TokenType = 11
        Expression = '^[\x20\x09]*(def|class)\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Word1stKeyword'
        StyleName = 'Reserved word'
        TokenType = 10
        Expression = 
          '^[\x20\x09]*(if|else|elif|for|while|try|except|finally|switch|ca' +
          'se)\b'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Word1stId'
        StyleName = 'Identifier'
        TokenType = 9
        Expression = '^[\x20\x09]*\w+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String'
        StyleName = 'String'
        TokenType = 4
        Expression = #39'.*?('#39'|$)'#13#10
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String3'
        StyleName = 'String'
        TokenType = 4
        Expression = '(?s)""".*?("""|\Z)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'String2'
        StyleName = 'String'
        TokenType = 4
        Expression = '"(\\"|.)*?("|$)'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Any name'
        StyleName = 'Identifier'
        TokenType = 2
        Expression = '[a-z_]\w*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Integer'
        StyleName = 'Number'
        TokenType = 5
        Expression = '\d+'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Comment'
        StyleName = 'Comment'
        TokenType = 1
        Expression = '\#.*'
        ColumnFrom = 0
        ColumnTo = 0
      end
      item
        DisplayName = 'Symbol'
        StyleName = 'Symbol'
        TokenType = 3
        Expression = '[/\*,\.;:\(\)=<>\+\-\[\]\{\}\^@!%]'
        ColumnFrom = 0
        ColumnTo = 0
      end>
    BlockRules = <
      item
        DisplayName = 'Keywords'
        StyleName = 'Reserved word'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              'and'
              'assert'
              'break'
              'class'
              'continue'
              'def'
              'del'
              'elif'
              'else'
              'except'
              'exec'
              'finally'
              'for'
              'from'
              'global'
              'if'
              'import'
              'in'
              'is'
              'lambda'
              'not'
              'or'
              'pass'
              'print'
              'raise'
              'return'
              'try'
              'while'
              'yield')
            TokenTypes = 4
            IgnoreCase = True
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Functions'
        StyleName = 'Function'
        BlockType = btTagDetect
        ConditionList = <
          item
            TagList.Strings = (
              '__future__'
              '__import__'
              'abs'
              'apply'
              'as'
              'buffer'
              'callable'
              'chr'
              'cmp'
              'coerce'
              'compile'
              'complex'
              'delattr'
              'dict'
              'dir'
              'divmod'
              'eval'
              'execfile'
              'False'
              'file'
              'filter'
              'float'
              'getattr'
              'globals'
              'hasattr'
              'hash'
              'help'
              'hex'
              'id'
              'input'
              'int'
              'intern'
              'isinstance'
              'issubclass'
              'iter'
              'len'
              'list'
              'locals'
              'long'
              'map'
              'max'
              'min'
              'None'
              'NotImplemented'
              'oct'
              'open'
              'ord'
              'pow'
              'range'
              'raw_input'
              'reduce'
              'reload'
              'repr'
              'round'
              'self'
              'setattr'
              'slice'
              'str'
              'True'
              'tuple'
              'type'
              'unichr'
              'unicode'
              'vars'
              'xrange'
              'zip')
            TokenTypes = 4
          end>
        HighlightPos = cpAny
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment'
        BlockName = 'Block comment'
        NotParent = True
        AlwaysEnabled = True
        ConditionList = <
          item
            TokenTypes = 2
          end>
        BlockEnd = 'Block comment end'
        DisplayInTree = False
        HighlightPos = cpBound
        CollapseFmt = '{ ... }'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'Block comment end'
        BlockName = 'Block comment'
        StrictParent = True
        AlwaysEnabled = True
        BlockType = btRangeEnd
        ConditionList = <
          item
            CondType = tcNotEqual
            TokenTypes = 2
          end
          item
            TokenTypes = 2
          end>
        BlockOffset = 2
        HighlightPos = cpBound
        IgnoreAsParent = False
      end
      item
        DisplayName = 'block for tree'
        ConditionList = <
          item
            TagList.Strings = (
              ':')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 510
          end
          item
            TokenTypes = 2048
          end>
        EndOfTextClose = True
        NameFmt = '%s0 %s-1'
        RefToCondEnd = True
        HighlightPos = cpAny
        GroupIndex = 20
        CollapseFmt = '%s0 %s-1...'
        IgnoreAsParent = False
      end
      item
        DisplayName = 'block begin'
        ConditionList = <
          item
            TagList.Strings = (
              ':')
            TokenTypes = 8
          end
          item
            CondType = tcSkip
            TokenTypes = 510
          end
          item
            TokenTypes = 1024
          end>
        EndOfTextClose = True
        DisplayInTree = False
        NameFmt = '"%s0"'
        RefToCondEnd = True
        HighlightPos = cpAny
        GroupIndex = 20
        CollapseFmt = '%s0 ...'
        IgnoreAsParent = False
      end>
    CodeTemplates = <>
    SubAnalyzers = <>
    SampleText.Strings = (
      '#!/usr/local/bin/python'
      'import string, sys'
      '""" multiline '
      'string """'
      'if len(sys.argv)==1:'
      '    print '#39'Usage: celsius temp1 temp2 ...'#39
      '    sys.exit(0) '
      '    '
      '  if aa'
      '    aa'
      '    aa'
      '      if cc:'
      '        cc'
      '        cc'
      '  aa        ')
    TokenTypeNames.Strings = (
      'Unknown'
      'Comment'
      'Identifier'
      'Symbol'
      'String'
      'Integer const'
      'Float const'
      'Hex const'
      'Char const'
      '1st word'
      '1st keyword'
      '1st word tree')
    Extentions = 'py pyw'
    LexerName = 'Python'
    SkipSpaces = False
    FullRefreshSize = 80000
    Notes.Strings = (
      'New Python lexer, by Alex, uvviewsoft.com'
      'Special properties must be set for folding to appear:'
      '- rules group index set to 20'
      '- parsers needed which take first words with spaces/tabs'
      '- tokens type names (for new parsers) set to "1nnnnn"')
    LineComment = '#'
    Charset = DEFAULT_CHARSET
    Left = 144
    Top = 184
  end
end
